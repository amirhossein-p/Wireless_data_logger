
DL_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000996  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  00800084  00800084  00000a4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012e4  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000290  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055f  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000304  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bed  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	a9 c0       	rjmp	.+338    	; 0x156 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 38       	cpi	r26, 0x84	; 132
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e8       	ldi	r26, 0x84	; 132
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 3d       	cpi	r26, 0xDD	; 221
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	07 d3       	rcall	.+1550   	; 0x668 <main>
  5a:	9b c4       	rjmp	.+2358   	; 0x992 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <spi>:
unsigned char command_buff=0,status_buff=0,nrf_state=0;
char nrf_mode;
int sent_actived=0;
unsigned char spi(unsigned char data)
{
	SPDR=data;
  5e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
  60:	77 9b       	sbis	0x0e, 7	; 14
  62:	fe cf       	rjmp	.-4      	; 0x60 <spi+0x2>
	data=SPSR;
  64:	8e b1       	in	r24, 0x0e	; 14
	return SPDR;
  66:	8f b1       	in	r24, 0x0f	; 15
}
  68:	08 95       	ret

0000006a <nrf_inst>:
void nrf_inst(unsigned char ins)
{
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	c8 2f       	mov	r28, r24
	int i;
	CSN0; //CSN=0;
  74:	c2 98       	cbi	0x18, 2	; 24
	status_buff=spi(ins);
  76:	f3 df       	rcall	.-26     	; 0x5e <spi>
  78:	80 93 8b 00 	sts	0x008B, r24
	switch(ins & 0xE0)
  7c:	9c 2f       	mov	r25, r28
  7e:	90 7e       	andi	r25, 0xE0	; 224
  80:	90 32       	cpi	r25, 0x20	; 32
  82:	21 f1       	breq	.+72     	; 0xcc <nrf_inst+0x62>
  84:	18 f4       	brcc	.+6      	; 0x8c <nrf_inst+0x22>
  86:	99 23       	and	r25, r25
  88:	39 f0       	breq	.+14     	; 0x98 <nrf_inst+0x2e>
  8a:	5b c0       	rjmp	.+182    	; 0x142 <nrf_inst+0xd8>
  8c:	90 36       	cpi	r25, 0x60	; 96
  8e:	b1 f1       	breq	.+108    	; 0xfc <nrf_inst+0x92>
  90:	90 3a       	cpi	r25, 0xA0	; 160
  92:	09 f4       	brne	.+2      	; 0x96 <nrf_inst+0x2c>
  94:	49 c0       	rjmp	.+146    	; 0x128 <nrf_inst+0xbe>
  96:	55 c0       	rjmp	.+170    	; 0x142 <nrf_inst+0xd8>
	{
		case 0x00:
		{
			if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10)
  98:	cf 71       	andi	r28, 0x1F	; 31
  9a:	2c 2f       	mov	r18, r28
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	2a 50       	subi	r18, 0x0A	; 10
  a0:	31 09       	sbc	r19, r1
  a2:	22 30       	cpi	r18, 0x02	; 2
  a4:	31 05       	cpc	r19, r1
  a6:	10 f0       	brcs	.+4      	; 0xac <nrf_inst+0x42>
  a8:	c0 31       	cpi	r28, 0x10	; 16
  aa:	59 f4       	brne	.+22     	; 0xc2 <nrf_inst+0x58>
  ac:	ce e7       	ldi	r28, 0x7E	; 126
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	09 e7       	ldi	r16, 0x79	; 121
  b2:	10 e0       	ldi	r17, 0x00	; 0
			{
				for(i=4;i>=0;i--)
				{
					temp_address[i]=spi(0xFF);
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	d3 df       	rcall	.-90     	; 0x5e <spi>
  b8:	8a 93       	st	-Y, r24
	{
		case 0x00:
		{
			if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10)
			{
				for(i=4;i>=0;i--)
  ba:	c0 17       	cp	r28, r16
  bc:	d1 07       	cpc	r29, r17
  be:	d1 f7       	brne	.-12     	; 0xb4 <nrf_inst+0x4a>
  c0:	40 c0       	rjmp	.+128    	; 0x142 <nrf_inst+0xd8>
					temp_address[i]=spi(0xFF);
				}
			}
			else
			{
				command_buff=spi(0xFF);
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	cc df       	rcall	.-104    	; 0x5e <spi>
  c6:	80 93 8c 00 	sts	0x008C, r24
  ca:	3b c0       	rjmp	.+118    	; 0x142 <nrf_inst+0xd8>
			}
			break;
		}
		case 0x20:
		{
			if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10)
  cc:	cf 71       	andi	r28, 0x1F	; 31
  ce:	2c 2f       	mov	r18, r28
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	2a 50       	subi	r18, 0x0A	; 10
  d4:	31 09       	sbc	r19, r1
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	10 f0       	brcs	.+4      	; 0xe0 <nrf_inst+0x76>
  dc:	c0 31       	cpi	r28, 0x10	; 16
  de:	51 f4       	brne	.+20     	; 0xf4 <nrf_inst+0x8a>
  e0:	c3 e8       	ldi	r28, 0x83	; 131
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	0e e7       	ldi	r16, 0x7E	; 126
  e6:	10 e0       	ldi	r17, 0x00	; 0
			{
				for(i=4;i>=0;i--)
				{
					spi(base_address[i]);
  e8:	8a 91       	ld	r24, -Y
  ea:	b9 df       	rcall	.-142    	; 0x5e <spi>
		}
		case 0x20:
		{
			if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10)
			{
				for(i=4;i>=0;i--)
  ec:	c0 17       	cp	r28, r16
  ee:	d1 07       	cpc	r29, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <nrf_inst+0x7e>
  f2:	27 c0       	rjmp	.+78     	; 0x142 <nrf_inst+0xd8>
					spi(base_address[i]);
				}
			}
			else
			{
				spi(command_buff);
  f4:	80 91 8c 00 	lds	r24, 0x008C
  f8:	b2 df       	rcall	.-156    	; 0x5e <spi>
  fa:	23 c0       	rjmp	.+70     	; 0x142 <nrf_inst+0xd8>
			}
			break;
		}
		case 0x60:
		{
			if((ins & 0x01)==1)
  fc:	c0 ff       	sbrs	r28, 0
  fe:	0f c0       	rjmp	.+30     	; 0x11e <nrf_inst+0xb4>
			{
				i=payload[0];
 100:	c0 91 b8 00 	lds	r28, 0x00B8
				while(i!=0)
 104:	cc 23       	and	r28, r28
 106:	e9 f0       	breq	.+58     	; 0x142 <nrf_inst+0xd8>
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	c7 54       	subi	r28, 0x47	; 71
 10c:	df 4f       	sbci	r29, 0xFF	; 255
				{
					payload[i]=spi(0xFF);
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	a6 df       	rcall	.-180    	; 0x5e <spi>
 112:	8a 93       	st	-Y, r24
		case 0x60:
		{
			if((ins & 0x01)==1)
			{
				i=payload[0];
				while(i!=0)
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	c9 3b       	cpi	r28, 0xB9	; 185
 118:	d8 07       	cpc	r29, r24
 11a:	c9 f7       	brne	.-14     	; 0x10e <nrf_inst+0xa4>
 11c:	12 c0       	rjmp	.+36     	; 0x142 <nrf_inst+0xd8>
					i--;
				}
			}
			else
			{
				command_buff=spi(0xFF);
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	9e df       	rcall	.-196    	; 0x5e <spi>
 122:	80 93 8c 00 	sts	0x008C, r24
 126:	0d c0       	rjmp	.+26     	; 0x142 <nrf_inst+0xd8>
			}
			break;
		}
		case 0xA0:
		{
			i=payload[0];
 128:	c0 91 b8 00 	lds	r28, 0x00B8
			while(i!=0)
 12c:	cc 23       	and	r28, r28
 12e:	49 f0       	breq	.+18     	; 0x142 <nrf_inst+0xd8>
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	c7 54       	subi	r28, 0x47	; 71
 134:	df 4f       	sbci	r29, 0xFF	; 255
			{
				spi(payload[i]);
 136:	8a 91       	ld	r24, -Y
 138:	92 df       	rcall	.-220    	; 0x5e <spi>
			break;
		}
		case 0xA0:
		{
			i=payload[0];
			while(i!=0)
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	c9 3b       	cpi	r28, 0xB9	; 185
 13e:	d8 07       	cpc	r29, r24
 140:	d1 f7       	brne	.-12     	; 0x136 <nrf_inst+0xcc>
			}
			break;
		}
		
	}
	CSN1; //CSN=1;
 142:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8a e1       	ldi	r24, 0x1A	; 26
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <nrf_inst+0xdc>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <nrf_inst+0xe2>
	_delay_us(10);
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <__vector_1>:
ISR (INT0_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	if(nrf_mode==0)
 178:	80 91 9e 00 	lds	r24, 0x009E
 17c:	81 11       	cpse	r24, r1
 17e:	24 c0       	rjmp	.+72     	; 0x1c8 <__vector_1+0x72>
	{
		nrf_inst(0xFF);
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	73 df       	rcall	.-282    	; 0x6a <nrf_inst>
		if(status_buff & 0x20)
 184:	80 91 8b 00 	lds	r24, 0x008B
 188:	85 ff       	sbrs	r24, 5
 18a:	1a c0       	rjmp	.+52     	; 0x1c0 <__vector_1+0x6a>
		{
			nrf_state=2;
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	80 93 8a 00 	sts	0x008A, r24
			nrf_inst(0x17);
 192:	87 e1       	ldi	r24, 0x17	; 23
 194:	6a df       	rcall	.-300    	; 0x6a <nrf_inst>
			if((command_buff & 0x01)==0)
 196:	80 91 8c 00 	lds	r24, 0x008C
 19a:	80 fd       	sbrc	r24, 0
 19c:	25 c0       	rjmp	.+74     	; 0x1e8 <__vector_1+0x92>
			{
				nrf_inst(0x60);
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	64 df       	rcall	.-312    	; 0x6a <nrf_inst>
				if(command_buff<=32)
 1a2:	80 91 8c 00 	lds	r24, 0x008C
 1a6:	81 32       	cpi	r24, 0x21	; 33
 1a8:	40 f4       	brcc	.+16     	; 0x1ba <__vector_1+0x64>
				{
					payload[0]=command_buff;
 1aa:	80 93 b8 00 	sts	0x00B8, r24
					nrf_inst(0x61);
 1ae:	81 e6       	ldi	r24, 0x61	; 97
 1b0:	5c df       	rcall	.-328    	; 0x6a <nrf_inst>
					nrf_state=3;
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	80 93 8a 00 	sts	0x008A, r24
 1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <__vector_1+0x92>
				}
				else
				nrf_inst(0xE2);
 1ba:	82 ee       	ldi	r24, 0xE2	; 226
 1bc:	56 df       	rcall	.-340    	; 0x6a <nrf_inst>
 1be:	14 c0       	rjmp	.+40     	; 0x1e8 <__vector_1+0x92>
			}
		}
		else
		{
			nrf_state=4;
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	80 93 8a 00 	sts	0x008A, r24
 1c6:	10 c0       	rjmp	.+32     	; 0x1e8 <__vector_1+0x92>
		}
	}
	else
	{
		nrf_inst(0x60);
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	4f df       	rcall	.-354    	; 0x6a <nrf_inst>
		if(command_buff>32)
 1cc:	80 91 8c 00 	lds	r24, 0x008C
 1d0:	81 32       	cpi	r24, 0x21	; 33
 1d2:	18 f0       	brcs	.+6      	; 0x1da <__vector_1+0x84>
		{
			nrf_inst(0xE2);
 1d4:	82 ee       	ldi	r24, 0xE2	; 226
 1d6:	49 df       	rcall	.-366    	; 0x6a <nrf_inst>
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <__vector_1+0x92>
		}
		else
		{
			payload[0]=command_buff;
 1da:	80 93 b8 00 	sts	0x00B8, r24
			nrf_inst(0x61);
 1de:	81 e6       	ldi	r24, 0x61	; 97
 1e0:	44 df       	rcall	.-376    	; 0x6a <nrf_inst>
			nrf_state=1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 8a 00 	sts	0x008A, r24
		}
	}
	command_buff=0x7E;
 1e8:	8e e7       	ldi	r24, 0x7E	; 126
 1ea:	80 93 8c 00 	sts	0x008C, r24
	nrf_inst(0x27);
 1ee:	87 e2       	ldi	r24, 0x27	; 39
 1f0:	3c df       	rcall	.-392    	; 0x6a <nrf_inst>
	nrf_inst(0xE1);
 1f2:	81 ee       	ldi	r24, 0xE1	; 225
 1f4:	3a df       	rcall	.-396    	; 0x6a <nrf_inst>
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <sent>:

void sent()
{
	if(sent_actived)
 218:	80 91 88 00 	lds	r24, 0x0088
 21c:	90 91 89 00 	lds	r25, 0x0089
 220:	89 2b       	or	r24, r25
 222:	e1 f1       	breq	.+120    	; 0x29c <sent+0x84>
	{
		sent_actived=0;
 224:	10 92 89 00 	sts	0x0089, r1
 228:	10 92 88 00 	sts	0x0088, r1
		if((temp_address[4]==base_address[4]) && (temp_address[3]==base_address[3]) && (temp_address[2]==base_address[2]) && (temp_address[1]==base_address[1]) && (temp_address[0]==base_address[0]))
 22c:	90 91 7d 00 	lds	r25, 0x007D
 230:	80 91 82 00 	lds	r24, 0x0082
 234:	98 13       	cpse	r25, r24
 236:	2f c0       	rjmp	.+94     	; 0x296 <sent+0x7e>
 238:	90 91 7c 00 	lds	r25, 0x007C
 23c:	80 91 81 00 	lds	r24, 0x0081
 240:	98 13       	cpse	r25, r24
 242:	29 c0       	rjmp	.+82     	; 0x296 <sent+0x7e>
 244:	90 91 7b 00 	lds	r25, 0x007B
 248:	80 91 80 00 	lds	r24, 0x0080
 24c:	98 13       	cpse	r25, r24
 24e:	23 c0       	rjmp	.+70     	; 0x296 <sent+0x7e>
 250:	90 91 7a 00 	lds	r25, 0x007A
 254:	80 91 7f 00 	lds	r24, 0x007F
 258:	98 13       	cpse	r25, r24
 25a:	1d c0       	rjmp	.+58     	; 0x296 <sent+0x7e>
 25c:	90 91 79 00 	lds	r25, 0x0079
 260:	80 91 7e 00 	lds	r24, 0x007E
 264:	98 13       	cpse	r25, r24
 266:	17 c0       	rjmp	.+46     	; 0x296 <sent+0x7e>
		{
			nrf_inst(0xE1);
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	ff de       	rcall	.-514    	; 0x6a <nrf_inst>
			nrf_inst(0xA0);
 26c:	80 ea       	ldi	r24, 0xA0	; 160
 26e:	fd de       	rcall	.-518    	; 0x6a <nrf_inst>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	9e e4       	ldi	r25, 0x4E	; 78
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <sent+0x5c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <sent+0x62>
 27a:	00 00       	nop
			_delay_ms(10);
			CE1; //CE = 1
 27c:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	95 e3       	ldi	r25, 0x35	; 53
 280:	9a 95       	dec	r25
 282:	f1 f7       	brne	.-4      	; 0x280 <sent+0x68>
 284:	00 00       	nop
			_delay_us(20);
			CE0; //CE = 0
 286:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <sent+0x74>
 290:	00 c0       	rjmp	.+0      	; 0x292 <sent+0x7a>
 292:	00 00       	nop
 294:	08 95       	ret
			_delay_ms(10);
		}
		else
		nrf_state=5;
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	80 93 8a 00 	sts	0x008A, r24
 29c:	08 95       	ret

0000029e <nrf_config>:
	}
}

void nrf_config(char mode)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	d8 2f       	mov	r29, r24
	IRQ1; //IRQ = 1
 2a4:	92 9a       	sbi	0x12, 2	; 18
	CSN1; //CSN=1;
 2a6:	c2 9a       	sbi	0x18, 2	; 24
	DDCSN; //DD_CSN=1;
 2a8:	ba 9a       	sbi	0x17, 2	; 23
	CLK0; //CLK=0;
 2aa:	c5 98       	cbi	0x18, 5	; 24
	DDCLK; //DD_CLK=1;
 2ac:	bd 9a       	sbi	0x17, 5	; 23
	CE0; //CE = 0
 2ae:	c0 98       	cbi	0x18, 0	; 24
	DDCE; //DD_CE=1;
 2b0:	b8 9a       	sbi	0x17, 0	; 23
	DDMOSI; //DD_MOSI=1;
 2b2:	bb 9a       	sbi	0x17, 3	; 23
	DDMISO; //DD_MISO=0;
 2b4:	bc 9a       	sbi	0x17, 4	; 23
	GIFR=0x40;
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	8a bf       	out	0x3a, r24	; 58
	GICR|=0x40;
 2ba:	8b b7       	in	r24, 0x3b	; 59
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	8b bf       	out	0x3b, r24	; 59
	sei();
 2c0:	78 94       	sei
	SPCR=0x50;
 2c2:	80 e5       	ldi	r24, 0x50	; 80
 2c4:	8d b9       	out	0x0d, r24	; 13
 2c6:	2f e7       	ldi	r18, 0x7F	; 127
 2c8:	8f ea       	ldi	r24, 0xAF	; 175
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <nrf_config+0x2e>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <nrf_config+0x38>
 2d6:	00 00       	nop
	_delay_ms(110);
	
	nrf_mode=mode;
 2d8:	d0 93 9e 00 	sts	0x009E, r29
	
	command_buff=0x01;
 2dc:	c1 e0       	ldi	r28, 0x01	; 1
 2de:	c0 93 8c 00 	sts	0x008C, r28
	nrf_inst(0x21);
 2e2:	81 e2       	ldi	r24, 0x21	; 33
 2e4:	c2 de       	rcall	.-636    	; 0x6a <nrf_inst>
	
	command_buff=0x01;
 2e6:	c0 93 8c 00 	sts	0x008C, r28
	nrf_inst(0x22);
 2ea:	82 e2       	ldi	r24, 0x22	; 34
 2ec:	be de       	rcall	.-644    	; 0x6a <nrf_inst>
	
	command_buff=0x03;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 93 8c 00 	sts	0x008C, r24
	nrf_inst(0x23);
 2f4:	83 e2       	ldi	r24, 0x23	; 35
 2f6:	b9 de       	rcall	.-654    	; 0x6a <nrf_inst>
	
	command_buff=0x2f;
 2f8:	8f e2       	ldi	r24, 0x2F	; 47
 2fa:	80 93 8c 00 	sts	0x008C, r24
	nrf_inst(0x24);
 2fe:	84 e2       	ldi	r24, 0x24	; 36
 300:	b4 de       	rcall	.-664    	; 0x6a <nrf_inst>
	
	command_buff=0x01;
 302:	c0 93 8c 00 	sts	0x008C, r28
	nrf_inst(0x25);
 306:	85 e2       	ldi	r24, 0x25	; 37
 308:	b0 de       	rcall	.-672    	; 0x6a <nrf_inst>
	
	command_buff=0x26;   //0x06 -> 0x26
 30a:	86 e2       	ldi	r24, 0x26	; 38
 30c:	80 93 8c 00 	sts	0x008C, r24
	nrf_inst(0x26);
 310:	ac de       	rcall	.-680    	; 0x6a <nrf_inst>
	
	nrf_inst(0x2A);
 312:	8a e2       	ldi	r24, 0x2A	; 42
 314:	aa de       	rcall	.-684    	; 0x6a <nrf_inst>
	
	nrf_inst(0x30);
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	a8 de       	rcall	.-688    	; 0x6a <nrf_inst>
	
	command_buff=0x01;
 31a:	c0 93 8c 00 	sts	0x008C, r28
	nrf_inst(0x3C);
 31e:	8c e3       	ldi	r24, 0x3C	; 60
 320:	a4 de       	rcall	.-696    	; 0x6a <nrf_inst>
	
	command_buff=0x07;
 322:	87 e0       	ldi	r24, 0x07	; 7
 324:	80 93 8c 00 	sts	0x008C, r24
	nrf_inst(0x3D);
 328:	8d e3       	ldi	r24, 0x3D	; 61
 32a:	9f de       	rcall	.-706    	; 0x6a <nrf_inst>
	
	if(mode==0)
 32c:	d1 11       	cpse	r29, r1
 32e:	15 c0       	rjmp	.+42     	; 0x35a <nrf_config+0xbc>
	{
		command_buff=0x4E;
 330:	8e e4       	ldi	r24, 0x4E	; 78
 332:	80 93 8c 00 	sts	0x008C, r24
		nrf_inst(0x20);
 336:	80 e2       	ldi	r24, 0x20	; 32
 338:	98 de       	rcall	.-720    	; 0x6a <nrf_inst>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	80 e7       	ldi	r24, 0x70	; 112
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <nrf_config+0xa2>
 348:	00 c0       	rjmp	.+0      	; 0x34a <nrf_config+0xac>
 34a:	00 00       	nop
		_delay_ms(100);
		sent_actived=1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	90 93 89 00 	sts	0x0089, r25
 354:	80 93 88 00 	sts	0x0088, r24
 358:	0c c0       	rjmp	.+24     	; 0x372 <nrf_config+0xd4>
	}
	else
	{
		command_buff=0x3F;
 35a:	8f e3       	ldi	r24, 0x3F	; 63
 35c:	80 93 8c 00 	sts	0x008C, r24
		nrf_inst(0x20);
 360:	80 e2       	ldi	r24, 0x20	; 32
 362:	83 de       	rcall	.-762    	; 0x6a <nrf_inst>
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	97 e2       	ldi	r25, 0x27	; 39
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <nrf_config+0xca>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <nrf_config+0xd0>
 36e:	00 00       	nop
		_delay_ms(5);
		CE1; //CE = 1
 370:	c0 9a       	sbi	0x18, 0	; 24
	}
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <thr_reset_1>:
#define cmd_alarmsearch		0xec
//////////////////////////////////////////////////////////////////////////
uint8_t thr_reset_1(void)
{
	uint8_t i;
	thr_low_1;
 378:	aa 98       	cbi	0x15, 2	; 21
	thr_output_1;
 37a:	a2 9a       	sbi	0x14, 2	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f eb       	ldi	r24, 0xBF	; 191
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <thr_reset_1+0x8>
 384:	00 c0       	rjmp	.+0      	; 0x386 <thr_reset_1+0xe>
 386:	00 00       	nop
	_delay_us(480);
	thr_input_1;
 388:	a2 98       	cbi	0x14, 2	; 20
 38a:	90 ea       	ldi	r25, 0xA0	; 160
 38c:	9a 95       	dec	r25
 38e:	f1 f7       	brne	.-4      	; 0x38c <thr_reset_1+0x14>
	_delay_us(60);
	i = (thr_pin_1 & (1<<thr_dq_1));
 390:	83 b3       	in	r24, 0x13	; 19
 392:	e7 e4       	ldi	r30, 0x47	; 71
 394:	f3 e0       	ldi	r31, 0x03	; 3
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <thr_reset_1+0x1e>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <thr_reset_1+0x24>
 39c:	00 00       	nop
	_delay_us(420);
	return i;
}
 39e:	84 70       	andi	r24, 0x04	; 4
 3a0:	08 95       	ret

000003a2 <thr_reset_2>:

uint8_t thr_reset_2(void)
{
	uint8_t i;
	thr_low_2;
 3a2:	ab 98       	cbi	0x15, 3	; 21
	thr_output_2;
 3a4:	a3 9a       	sbi	0x14, 3	; 20
 3a6:	8f eb       	ldi	r24, 0xBF	; 191
 3a8:	93 e0       	ldi	r25, 0x03	; 3
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <thr_reset_2+0x8>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <thr_reset_2+0xe>
 3b0:	00 00       	nop
	_delay_us(480);
	thr_input_2;
 3b2:	a3 98       	cbi	0x14, 3	; 20
 3b4:	90 ea       	ldi	r25, 0xA0	; 160
 3b6:	9a 95       	dec	r25
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <thr_reset_2+0x14>
	_delay_us(60);
	i = (thr_pin_2 & (1<<thr_dq_2));
 3ba:	83 b3       	in	r24, 0x13	; 19
 3bc:	e7 e4       	ldi	r30, 0x47	; 71
 3be:	f3 e0       	ldi	r31, 0x03	; 3
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <thr_reset_2+0x1e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <thr_reset_2+0x24>
 3c6:	00 00       	nop
	_delay_us(420);
	return i;
}
 3c8:	88 70       	andi	r24, 0x08	; 8
 3ca:	08 95       	ret

000003cc <thr_wrbit_1>:
//////////////////////////////////////////////////////////////////////////
void thr_wrbit_1 (uint8_t bi)
{
	thr_low_1;
 3cc:	aa 98       	cbi	0x15, 2	; 21
	thr_output_1;
 3ce:	a2 9a       	sbi	0x14, 2	; 20
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	9a 95       	dec	r25
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <thr_wrbit_1+0x6>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <thr_wrbit_1+0xc>
	_delay_us(1);
	if (bi) thr_input_1;
 3d8:	81 11       	cpse	r24, r1
 3da:	a2 98       	cbi	0x14, 2	; 20
 3dc:	80 ea       	ldi	r24, 0xA0	; 160
 3de:	8a 95       	dec	r24
 3e0:	f1 f7       	brne	.-4      	; 0x3de <thr_wrbit_1+0x12>
	_delay_us(60);
	thr_input_1;
 3e2:	a2 98       	cbi	0x14, 2	; 20
 3e4:	08 95       	ret

000003e6 <thr_wrbit_2>:
}

void thr_wrbit_2 (uint8_t bi)
{
	thr_low_2;
 3e6:	ab 98       	cbi	0x15, 3	; 21
	thr_output_2;
 3e8:	a3 9a       	sbi	0x14, 3	; 20
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	9a 95       	dec	r25
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <thr_wrbit_2+0x6>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <thr_wrbit_2+0xc>
	_delay_us(1);
	if (bi) thr_input_2;
 3f2:	81 11       	cpse	r24, r1
 3f4:	a3 98       	cbi	0x14, 3	; 20
 3f6:	80 ea       	ldi	r24, 0xA0	; 160
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <thr_wrbit_2+0x12>
	_delay_us(60);
	thr_input_2;
 3fc:	a3 98       	cbi	0x14, 3	; 20
 3fe:	08 95       	ret

00000400 <thr_rdbit_1>:
}
//////////////////////////////////////////////////////////////////////////
uint8_t thr_rdbit_1 (void)
{
	uint8_t bit = 0;
	thr_low_1;
 400:	aa 98       	cbi	0x15, 2	; 21
	thr_output_1;
 402:	a2 9a       	sbi	0x14, 2	; 20
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	8a 95       	dec	r24
 408:	f1 f7       	brne	.-4      	; 0x406 <thr_rdbit_1+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <thr_rdbit_1+0xc>
	_delay_us(1);
	thr_input_1;
 40c:	a2 98       	cbi	0x14, 2	; 20
 40e:	95 e2       	ldi	r25, 0x25	; 37
 410:	9a 95       	dec	r25
 412:	f1 f7       	brne	.-4      	; 0x410 <thr_rdbit_1+0x10>
 414:	00 00       	nop
	_delay_us(14);
	if (thr_pin_1 & (1<<thr_dq_1)) bit = 1;
 416:	83 b3       	in	r24, 0x13	; 19
 418:	98 e7       	ldi	r25, 0x78	; 120
 41a:	9a 95       	dec	r25
 41c:	f1 f7       	brne	.-4      	; 0x41a <thr_rdbit_1+0x1a>
	_delay_us(45);
	return bit;
}
 41e:	82 fb       	bst	r24, 2
 420:	88 27       	eor	r24, r24
 422:	80 f9       	bld	r24, 0
 424:	08 95       	ret

00000426 <thr_rdbit_2>:

uint8_t thr_rdbit_2 (void)
{
	uint8_t bit = 0;
	thr_low_2;
 426:	ab 98       	cbi	0x15, 3	; 21
	thr_output_2;
 428:	a3 9a       	sbi	0x14, 3	; 20
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	8a 95       	dec	r24
 42e:	f1 f7       	brne	.-4      	; 0x42c <thr_rdbit_2+0x6>
 430:	00 c0       	rjmp	.+0      	; 0x432 <thr_rdbit_2+0xc>
	_delay_us(1);
	thr_input_2;
 432:	a3 98       	cbi	0x14, 3	; 20
 434:	95 e2       	ldi	r25, 0x25	; 37
 436:	9a 95       	dec	r25
 438:	f1 f7       	brne	.-4      	; 0x436 <thr_rdbit_2+0x10>
 43a:	00 00       	nop
	_delay_us(14);
	if (thr_pin_2 & (1<<thr_dq_2)) bit = 1;
 43c:	83 b3       	in	r24, 0x13	; 19
 43e:	98 e7       	ldi	r25, 0x78	; 120
 440:	9a 95       	dec	r25
 442:	f1 f7       	brne	.-4      	; 0x440 <thr_rdbit_2+0x1a>
	_delay_us(45);
	return bit;
}
 444:	83 fb       	bst	r24, 3
 446:	88 27       	eor	r24, r24
 448:	80 f9       	bld	r24, 0
 44a:	08 95       	ret

0000044c <thr_rdbyte_1>:
//////////////////////////////////////////////////////////////////////////
uint8_t thr_rdbyte_1 (void)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i = 8;
	uint8_t n = 0;
 452:	d0 e0       	ldi	r29, 0x00	; 0
	while (i--)
	{
		n >>= 1;
		n |= (thr_rdbit_1() << 7);
 454:	d5 df       	rcall	.-86     	; 0x400 <thr_rdbit_1>
 456:	20 e8       	ldi	r18, 0x80	; 128
 458:	82 9f       	mul	r24, r18
 45a:	c0 01       	movw	r24, r0
 45c:	11 24       	eor	r1, r1
{
	uint8_t i = 8;
	uint8_t n = 0;
	while (i--)
	{
		n >>= 1;
 45e:	d6 95       	lsr	r29
		n |= (thr_rdbit_1() << 7);
 460:	d8 2b       	or	r29, r24
 462:	c1 50       	subi	r28, 0x01	; 1
//////////////////////////////////////////////////////////////////////////
uint8_t thr_rdbyte_1 (void)
{
	uint8_t i = 8;
	uint8_t n = 0;
	while (i--)
 464:	b9 f7       	brne	.-18     	; 0x454 <thr_rdbyte_1+0x8>
	{
		n >>= 1;
		n |= (thr_rdbit_1() << 7);
	}
	return n;
}
 466:	8d 2f       	mov	r24, r29
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <thr_rdbyte_2>:

uint8_t thr_rdbyte_2 (void)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i = 8;
	uint8_t n = 0;
 474:	d0 e0       	ldi	r29, 0x00	; 0
	while (i--)
	{
		n >>= 1;
		n |= (thr_rdbit_2() << 7);
 476:	d7 df       	rcall	.-82     	; 0x426 <thr_rdbit_2>
 478:	20 e8       	ldi	r18, 0x80	; 128
 47a:	82 9f       	mul	r24, r18
 47c:	c0 01       	movw	r24, r0
 47e:	11 24       	eor	r1, r1
{
	uint8_t i = 8;
	uint8_t n = 0;
	while (i--)
	{
		n >>= 1;
 480:	d6 95       	lsr	r29
		n |= (thr_rdbit_2() << 7);
 482:	d8 2b       	or	r29, r24
 484:	c1 50       	subi	r28, 0x01	; 1

uint8_t thr_rdbyte_2 (void)
{
	uint8_t i = 8;
	uint8_t n = 0;
	while (i--)
 486:	b9 f7       	brne	.-18     	; 0x476 <thr_rdbyte_2+0x8>
	{
		n >>= 1;
		n |= (thr_rdbit_2() << 7);
	}
	return n;
}
 488:	8d 2f       	mov	r24, r29
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <thr_wrbyte_1>:
//////////////////////////////////////////////////////////////////////////
void thr_wrbyte_1 (uint8_t by)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	d8 2f       	mov	r29, r24
 496:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i = 8;
	while (i--)
	{
		thr_wrbit_1( by & 1 );
 498:	8d 2f       	mov	r24, r29
 49a:	81 70       	andi	r24, 0x01	; 1
 49c:	97 df       	rcall	.-210    	; 0x3cc <thr_wrbit_1>
		by >>= 1;
 49e:	d6 95       	lsr	r29
 4a0:	c1 50       	subi	r28, 0x01	; 1
}
//////////////////////////////////////////////////////////////////////////
void thr_wrbyte_1 (uint8_t by)
{
	uint8_t i = 8;
	while (i--)
 4a2:	d1 f7       	brne	.-12     	; 0x498 <thr_wrbyte_1+0x8>
	{
		thr_wrbit_1( by & 1 );
		by >>= 1;
	}
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <thr_wrbyte_2>:

void thr_wrbyte_2 (uint8_t by)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	d8 2f       	mov	r29, r24
 4b0:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i = 8;
	while (i--)
	{
		thr_wrbit_2( by & 1 );
 4b2:	8d 2f       	mov	r24, r29
 4b4:	81 70       	andi	r24, 0x01	; 1
 4b6:	97 df       	rcall	.-210    	; 0x3e6 <thr_wrbit_2>
		by >>= 1;
 4b8:	d6 95       	lsr	r29
 4ba:	c1 50       	subi	r28, 0x01	; 1
}

void thr_wrbyte_2 (uint8_t by)
{
	uint8_t i = 8;
	while (i--)
 4bc:	d1 f7       	brne	.-12     	; 0x4b2 <thr_wrbyte_2+0x8>
	{
		thr_wrbit_2( by & 1 );
		by >>= 1;
	}
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <ds18b20_read_1>:
//////////////////////////////////////////////////////////////////////////
void ds18b20_read_1 (unsigned int *data)
{
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	ec 01       	movw	r28, r24
	uint8_t temp[2];
	unsigned int dig;
	unsigned int dec;
	unsigned int sgn;
	thr_reset_1();
 4cc:	55 df       	rcall	.-342    	; 0x378 <thr_reset_1>
	thr_wrbyte_1(cmd_skiprom);
 4ce:	8c ec       	ldi	r24, 0xCC	; 204
 4d0:	df df       	rcall	.-66     	; 0x490 <thr_wrbyte_1>
	thr_wrbyte_1(cmd_convtemp);
 4d2:	84 e4       	ldi	r24, 0x44	; 68
 4d4:	dd df       	rcall	.-70     	; 0x490 <thr_wrbyte_1>
	while (!thr_rdbit_1());
 4d6:	94 df       	rcall	.-216    	; 0x400 <thr_rdbit_1>
 4d8:	88 23       	and	r24, r24
 4da:	e9 f3       	breq	.-6      	; 0x4d6 <ds18b20_read_1+0x12>
	thr_reset_1();
 4dc:	4d df       	rcall	.-358    	; 0x378 <thr_reset_1>
	thr_wrbyte_1(cmd_skiprom);
 4de:	8c ec       	ldi	r24, 0xCC	; 204
 4e0:	d7 df       	rcall	.-82     	; 0x490 <thr_wrbyte_1>
	thr_wrbyte_1(cmd_rscratchpad);
 4e2:	8e eb       	ldi	r24, 0xBE	; 190
 4e4:	d5 df       	rcall	.-86     	; 0x490 <thr_wrbyte_1>
	temp[0] = thr_rdbyte_1();
 4e6:	b2 df       	rcall	.-156    	; 0x44c <thr_rdbyte_1>
 4e8:	18 2f       	mov	r17, r24
	temp[1] = thr_rdbyte_1();
 4ea:	b0 df       	rcall	.-160    	; 0x44c <thr_rdbyte_1>
	dig = temp[0] >> 4;
 4ec:	91 2f       	mov	r25, r17
 4ee:	92 95       	swap	r25
 4f0:	9f 70       	andi	r25, 0x0F	; 15
	dig |= (temp[1] & 0x07) << 4;
	dec = temp[0] & 0x0f;
 4f2:	1f 70       	andi	r17, 0x0F	; 15
	dec *= 625;
	sgn = temp[1] >> 7;
 4f4:	48 2f       	mov	r20, r24
 4f6:	44 1f       	adc	r20, r20
 4f8:	44 27       	eor	r20, r20
 4fa:	44 1f       	adc	r20, r20
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	59 83       	std	Y+1, r21	; 0x01
 500:	48 83       	st	Y, r20
	thr_wrbyte_1(cmd_skiprom);
	thr_wrbyte_1(cmd_rscratchpad);
	temp[0] = thr_rdbyte_1();
	temp[1] = thr_rdbyte_1();
	dig = temp[0] >> 4;
	dig |= (temp[1] & 0x07) << 4;
 502:	87 70       	andi	r24, 0x07	; 7
 504:	40 e1       	ldi	r20, 0x10	; 16
 506:	84 9f       	mul	r24, r20
 508:	90 01       	movw	r18, r0
 50a:	11 24       	eor	r1, r1
 50c:	29 2b       	or	r18, r25
	dec = temp[0] & 0x0f;
	dec *= 625;
	sgn = temp[1] >> 7;
	data[0] = sgn;
	data[1] = dig;
 50e:	3b 83       	std	Y+3, r19	; 0x03
 510:	2a 83       	std	Y+2, r18	; 0x02
	temp[0] = thr_rdbyte_1();
	temp[1] = thr_rdbyte_1();
	dig = temp[0] >> 4;
	dig |= (temp[1] & 0x07) << 4;
	dec = temp[0] & 0x0f;
	dec *= 625;
 512:	41 e7       	ldi	r20, 0x71	; 113
 514:	52 e0       	ldi	r21, 0x02	; 2
 516:	14 9f       	mul	r17, r20
 518:	90 01       	movw	r18, r0
 51a:	15 9f       	mul	r17, r21
 51c:	30 0d       	add	r19, r0
 51e:	11 24       	eor	r1, r1
	sgn = temp[1] >> 7;
	data[0] = sgn;
	data[1] = dig;
	data[2] = dec;
 520:	3d 83       	std	Y+5, r19	; 0x05
 522:	2c 83       	std	Y+4, r18	; 0x04
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	08 95       	ret

0000052c <ds18b20_read_2>:

void ds18b20_read_2 (unsigned int *data)
{
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ec 01       	movw	r28, r24
	uint8_t temp[2];
	unsigned int dig;
	unsigned int dec;
	unsigned int sgn;
	thr_reset_2();
 534:	36 df       	rcall	.-404    	; 0x3a2 <thr_reset_2>
	thr_wrbyte_2(cmd_skiprom);
 536:	8c ec       	ldi	r24, 0xCC	; 204
 538:	b8 df       	rcall	.-144    	; 0x4aa <thr_wrbyte_2>
	thr_wrbyte_2(cmd_convtemp);
 53a:	84 e4       	ldi	r24, 0x44	; 68
 53c:	b6 df       	rcall	.-148    	; 0x4aa <thr_wrbyte_2>
	while (!thr_rdbit_2());
 53e:	73 df       	rcall	.-282    	; 0x426 <thr_rdbit_2>
 540:	88 23       	and	r24, r24
 542:	e9 f3       	breq	.-6      	; 0x53e <ds18b20_read_2+0x12>
	thr_reset_2();
 544:	2e df       	rcall	.-420    	; 0x3a2 <thr_reset_2>
	thr_wrbyte_2(cmd_skiprom);
 546:	8c ec       	ldi	r24, 0xCC	; 204
 548:	b0 df       	rcall	.-160    	; 0x4aa <thr_wrbyte_2>
	thr_wrbyte_2(cmd_rscratchpad);
 54a:	8e eb       	ldi	r24, 0xBE	; 190
 54c:	ae df       	rcall	.-164    	; 0x4aa <thr_wrbyte_2>
	temp[0] = thr_rdbyte_2();
 54e:	8f df       	rcall	.-226    	; 0x46e <thr_rdbyte_2>
 550:	18 2f       	mov	r17, r24
	temp[1] = thr_rdbyte_2();
 552:	8d df       	rcall	.-230    	; 0x46e <thr_rdbyte_2>
	dig = temp[0] >> 4;
 554:	91 2f       	mov	r25, r17
 556:	92 95       	swap	r25
 558:	9f 70       	andi	r25, 0x0F	; 15
	dig |= (temp[1] & 0x07) << 4;
	dec = temp[0] & 0x0f;
 55a:	1f 70       	andi	r17, 0x0F	; 15
	dec *= 625;
	sgn = temp[1] >> 7;
 55c:	48 2f       	mov	r20, r24
 55e:	44 1f       	adc	r20, r20
 560:	44 27       	eor	r20, r20
 562:	44 1f       	adc	r20, r20
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	59 83       	std	Y+1, r21	; 0x01
 568:	48 83       	st	Y, r20
	thr_wrbyte_2(cmd_skiprom);
	thr_wrbyte_2(cmd_rscratchpad);
	temp[0] = thr_rdbyte_2();
	temp[1] = thr_rdbyte_2();
	dig = temp[0] >> 4;
	dig |= (temp[1] & 0x07) << 4;
 56a:	87 70       	andi	r24, 0x07	; 7
 56c:	40 e1       	ldi	r20, 0x10	; 16
 56e:	84 9f       	mul	r24, r20
 570:	90 01       	movw	r18, r0
 572:	11 24       	eor	r1, r1
 574:	29 2b       	or	r18, r25
	dec = temp[0] & 0x0f;
	dec *= 625;
	sgn = temp[1] >> 7;
	data[0] = sgn;
	data[1] = dig;
 576:	3b 83       	std	Y+3, r19	; 0x03
 578:	2a 83       	std	Y+2, r18	; 0x02
	temp[0] = thr_rdbyte_2();
	temp[1] = thr_rdbyte_2();
	dig = temp[0] >> 4;
	dig |= (temp[1] & 0x07) << 4;
	dec = temp[0] & 0x0f;
	dec *= 625;
 57a:	41 e7       	ldi	r20, 0x71	; 113
 57c:	52 e0       	ldi	r21, 0x02	; 2
 57e:	14 9f       	mul	r17, r20
 580:	90 01       	movw	r18, r0
 582:	15 9f       	mul	r17, r21
 584:	30 0d       	add	r19, r0
 586:	11 24       	eor	r1, r1
	sgn = temp[1] >> 7;
	data[0] = sgn;
	data[1] = dig;
	data[2] = dec;
 588:	3d 83       	std	Y+5, r19	; 0x05
 58a:	2c 83       	std	Y+4, r18	; 0x04
}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	08 95       	ret

00000594 <receive>:
unsigned int id = 0xA0;				// Data Logger ID
unsigned int dly = 0;				// Delay Step
div_t fin;							// Finder LED Command

void receive (void)
{
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
	if (mode != 1) { mode = 1; nrf_config(mode); }
 598:	80 91 77 00 	lds	r24, 0x0077
 59c:	90 91 78 00 	lds	r25, 0x0078
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	39 f0       	breq	.+14     	; 0x5b2 <receive+0x1e>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	90 93 78 00 	sts	0x0078, r25
 5ac:	80 93 77 00 	sts	0x0077, r24
 5b0:	76 de       	rcall	.-788    	; 0x29e <nrf_config>
	if (nrf_state == 1)
 5b2:	80 91 8a 00 	lds	r24, 0x008A
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	d9 f4       	brne	.+54     	; 0x5f0 <receive+0x5c>
	{
		PORTC |= (1<<4);
 5ba:	ac 9a       	sbi	0x15, 4	; 21
		rcv = 1;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	90 93 87 00 	sts	0x0087, r25
 5c4:	80 93 86 00 	sts	0x0086, r24
 5c8:	e9 eb       	ldi	r30, 0xB9	; 185
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	ae e8       	ldi	r26, 0x8E	; 142
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	83 ec       	ldi	r24, 0xC3	; 195
 5d2:	90 e0       	ldi	r25, 0x00	; 0
		for (int i=1; i<11; i++)
		{
			bufi[i] = payload[i];
 5d4:	21 91       	ld	r18, Z+
 5d6:	2d 93       	st	X+, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d8:	cf ec       	ldi	r28, 0xCF	; 207
 5da:	d7 e0       	ldi	r29, 0x07	; 7
 5dc:	21 97       	sbiw	r28, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <receive+0x48>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <receive+0x4e>
 5e2:	00 00       	nop
	if (mode != 1) { mode = 1; nrf_config(mode); }
	if (nrf_state == 1)
	{
		PORTC |= (1<<4);
		rcv = 1;
		for (int i=1; i<11; i++)
 5e4:	e8 17       	cp	r30, r24
 5e6:	f9 07       	cpc	r31, r25
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <receive+0x40>
		{
			bufi[i] = payload[i];
			_delay_ms(1);
		}
		nrf_state = 0;
 5ea:	10 92 8a 00 	sts	0x008A, r1
		PORTC &= ~(1<<4);
 5ee:	ac 98       	cbi	0x15, 4	; 21
 5f0:	8f e1       	ldi	r24, 0x1F	; 31
 5f2:	9e e4       	ldi	r25, 0x4E	; 78
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <receive+0x60>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <receive+0x66>
 5fa:	00 00       	nop
	}
	_delay_ms(10);
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <transmit>:

void transmit (void)
{
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
	if (mode != 0) { mode = 0; nrf_config(mode); }
 606:	80 91 77 00 	lds	r24, 0x0077
 60a:	90 91 78 00 	lds	r25, 0x0078
 60e:	89 2b       	or	r24, r25
 610:	31 f0       	breq	.+12     	; 0x61e <transmit+0x1c>
 612:	10 92 78 00 	sts	0x0078, r1
 616:	10 92 77 00 	sts	0x0077, r1
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	40 de       	rcall	.-896    	; 0x29e <nrf_config>
	PORTC |= (1<<5);
 61e:	ad 9a       	sbi	0x15, 5	; 21
 620:	a0 ea       	ldi	r26, 0xA0	; 160
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e9 eb       	ldi	r30, 0xB9	; 185
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	21 e0       	ldi	r18, 0x01	; 1
	for(int j=1; j<11; j++)
	{
		if (nrf_state != 0)
		{
			sent_actived = 1;
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	50 e0       	ldi	r21, 0x00	; 0
			nrf_state = 0;
		}
		payload[0] = j;
 62e:	c8 eb       	ldi	r28, 0xB8	; 184
 630:	d0 e0       	ldi	r29, 0x00	; 0
{
	if (mode != 0) { mode = 0; nrf_config(mode); }
	PORTC |= (1<<5);
	for(int j=1; j<11; j++)
	{
		if (nrf_state != 0)
 632:	30 91 8a 00 	lds	r19, 0x008A
 636:	33 23       	and	r19, r19
 638:	31 f0       	breq	.+12     	; 0x646 <transmit+0x44>
		{
			sent_actived = 1;
 63a:	50 93 89 00 	sts	0x0089, r21
 63e:	40 93 88 00 	sts	0x0088, r20
			nrf_state = 0;
 642:	10 92 8a 00 	sts	0x008A, r1
		}
		payload[0] = j;
 646:	28 83       	st	Y, r18
		payload[j] = bufo[j];
 648:	3d 91       	ld	r19, X+
 64a:	31 93       	st	Z+, r19
 64c:	8f ec       	ldi	r24, 0xCF	; 207
 64e:	97 e0       	ldi	r25, 0x07	; 7
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <transmit+0x4e>
 654:	00 c0       	rjmp	.+0      	; 0x656 <transmit+0x54>
 656:	00 00       	nop
 658:	2f 5f       	subi	r18, 0xFF	; 255

void transmit (void)
{
	if (mode != 0) { mode = 0; nrf_config(mode); }
	PORTC |= (1<<5);
	for(int j=1; j<11; j++)
 65a:	2b 30       	cpi	r18, 0x0B	; 11
 65c:	51 f7       	brne	.-44     	; 0x632 <transmit+0x30>
		}
		payload[0] = j;
		payload[j] = bufo[j];
		_delay_ms(1);
	}
	sent();
 65e:	dc dd       	rcall	.-1096   	; 0x218 <sent>
	PORTC &= ~(1<<5);
 660:	ad 98       	cbi	0x15, 5	; 21
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <main>:


int main(void)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
 670:	62 97       	sbiw	r28, 0x12	; 18
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	f8 94       	cli
 676:	de bf       	out	0x3e, r29	; 62
 678:	0f be       	out	0x3f, r0	; 63
 67a:	cd bf       	out	0x3d, r28	; 61
	unsigned int tmpr1[3];				// DS18B20 -1 Data
	unsigned int tmpr2[3];				// DS18B20 -2 Data
	ADMUX = 0b11000000;
 67c:	80 ec       	ldi	r24, 0xC0	; 192
 67e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100000;
 680:	80 ee       	ldi	r24, 0xE0	; 224
 682:	86 b9       	out	0x06, r24	; 6
	UCSRB = (1 << RXEN) | (1 << TXEN);
 684:	88 e1       	ldi	r24, 0x18	; 24
 686:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
 688:	86 e8       	ldi	r24, 0x86	; 134
 68a:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25; // 19200 @ 8MHz
 68c:	89 e1       	ldi	r24, 0x19	; 25
 68e:	89 b9       	out	0x09, r24	; 9
	DDRC |= (1<<4) | (1<<5);
 690:	84 b3       	in	r24, 0x14	; 20
 692:	80 63       	ori	r24, 0x30	; 48
 694:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1<<1);
 696:	b9 9a       	sbi	0x17, 1	; 23
	nrf_config(mode);
 698:	80 91 77 00 	lds	r24, 0x0077
 69c:	00 de       	rcall	.-1024   	; 0x29e <nrf_config>
	PORTC |= (1<<4);
 69e:	ac 9a       	sbi	0x15, 4	; 21
	PORTC |= (1<<5);
 6a0:	ad 9a       	sbi	0x15, 5	; 21
 6a2:	2f ef       	ldi	r18, 0xFF	; 255
 6a4:	40 e7       	ldi	r20, 0x70	; 112
 6a6:	52 e0       	ldi	r21, 0x02	; 2
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	40 40       	sbci	r20, 0x00	; 0
 6ac:	50 40       	sbci	r21, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <main+0x40>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0x4a>
 6b2:	00 00       	nop
	_delay_ms(100);
	PORTC &= ~(1<<4);
 6b4:	ac 98       	cbi	0x15, 4	; 21
	PORTC &= ~(1<<5);
 6b6:	ad 98       	cbi	0x15, 5	; 21
	while(1)
	{
		adh = ADCH;
		adl = ADCL;
		receive();
		for (int z=0; z<dltb[dly]; z++)						// Active Delay , Finder LED
 6b8:	21 2c       	mov	r2, r1
 6ba:	31 2c       	mov	r3, r1
		{
			receive();
			adh = ADCH;
			adl = ADCL;
			dly = bufi[3];
 6bc:	0f 2e       	mov	r0, r31
 6be:	f0 e9       	ldi	r31, 0x90	; 144
 6c0:	cf 2e       	mov	r12, r31
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	df 2e       	mov	r13, r31
 6c6:	f0 2d       	mov	r31, r0
			PORTB &= ~(1<<1);
			fin = div(z,40);
			if ((fin.rem == 0) && bufi[2] == 1) PORTB |= (1<<1);
 6c8:	0f 2e       	mov	r0, r31
 6ca:	fc ea       	ldi	r31, 0xAC	; 172
 6cc:	ef 2e       	mov	r14, r31
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	ff 2e       	mov	r15, r31
 6d2:	f0 2d       	mov	r31, r0
 6d4:	0f 2e       	mov	r0, r31
 6d6:	ff e8       	ldi	r31, 0x8F	; 143
 6d8:	af 2e       	mov	r10, r31
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	bf 2e       	mov	r11, r31
 6de:	f0 2d       	mov	r31, r0
 6e0:	0f 2e       	mov	r0, r31
 6e2:	fe e8       	ldi	r31, 0x8E	; 142
 6e4:	6f 2e       	mov	r6, r31
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	7f 2e       	mov	r7, r31
 6ea:	f0 2d       	mov	r31, r0
 6ec:	0f 2e       	mov	r0, r31
 6ee:	f8 e9       	ldi	r31, 0x98	; 152
 6f0:	8f 2e       	mov	r8, r31
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	9f 2e       	mov	r9, r31
 6f6:	f0 2d       	mov	r31, r0
			bufo[8]  = d6;
			bufo[9]  = id;
			bufo[10] = 'B';
			transmit();
		}
		if ((bufi[1] == 'F') && (bufi[10] == 'F'))		// Off ACK
 6f8:	0f 2e       	mov	r0, r31
 6fa:	f7 e9       	ldi	r31, 0x97	; 151
 6fc:	4f 2e       	mov	r4, r31
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	5f 2e       	mov	r5, r31
 702:	f0 2d       	mov	r31, r0
	_delay_ms(100);
	PORTC &= ~(1<<4);
	PORTC &= ~(1<<5);
	while(1)
	{
		adh = ADCH;
 704:	85 b1       	in	r24, 0x05	; 5
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 9d 00 	sts	0x009D, r25
 70c:	80 93 9c 00 	sts	0x009C, r24
		adl = ADCL;
 710:	84 b1       	in	r24, 0x04	; 4
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	90 93 b1 00 	sts	0x00B1, r25
 718:	80 93 b0 00 	sts	0x00B0, r24
		receive();
 71c:	3b df       	rcall	.-394    	; 0x594 <receive>
		for (int z=0; z<dltb[dly]; z++)						// Active Delay , Finder LED
 71e:	e0 91 84 00 	lds	r30, 0x0084
 722:	f0 91 85 00 	lds	r31, 0x0085
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	ee 59       	subi	r30, 0x9E	; 158
 72c:	ff 4f       	sbci	r31, 0xFF	; 255
 72e:	80 81       	ld	r24, Z
 730:	91 81       	ldd	r25, Z+1	; 0x01
 732:	89 2b       	or	r24, r25
 734:	09 f4       	brne	.+2      	; 0x738 <main+0xd0>
 736:	4d c0       	rjmp	.+154    	; 0x7d2 <main+0x16a>
 738:	02 2d       	mov	r16, r2
 73a:	13 2d       	mov	r17, r3
		{
			receive();
 73c:	2b df       	rcall	.-426    	; 0x594 <receive>
			adh = ADCH;
 73e:	85 b1       	in	r24, 0x05	; 5
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	90 93 9d 00 	sts	0x009D, r25
 746:	80 93 9c 00 	sts	0x009C, r24
			adl = ADCL;
 74a:	84 b1       	in	r24, 0x04	; 4
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	90 93 b1 00 	sts	0x00B1, r25
 752:	80 93 b0 00 	sts	0x00B0, r24
			dly = bufi[3];
 756:	f6 01       	movw	r30, r12
 758:	80 81       	ld	r24, Z
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	90 93 85 00 	sts	0x0085, r25
 760:	80 93 84 00 	sts	0x0084, r24
			PORTB &= ~(1<<1);
 764:	c1 98       	cbi	0x18, 1	; 24
			fin = div(z,40);
 766:	68 e2       	ldi	r22, 0x28	; 40
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	c8 01       	movw	r24, r16
 76c:	eb d0       	rcall	.+470    	; 0x944 <__divmodhi4>
 76e:	60 93 aa 00 	sts	0x00AA, r22
 772:	70 93 ab 00 	sts	0x00AB, r23
 776:	80 93 ac 00 	sts	0x00AC, r24
 77a:	90 93 ad 00 	sts	0x00AD, r25
			if ((fin.rem == 0) && bufi[2] == 1) PORTB |= (1<<1);
 77e:	f7 01       	movw	r30, r14
 780:	80 81       	ld	r24, Z
 782:	91 81       	ldd	r25, Z+1	; 0x01
 784:	89 2b       	or	r24, r25
 786:	29 f4       	brne	.+10     	; 0x792 <main+0x12a>
 788:	f5 01       	movw	r30, r10
 78a:	80 81       	ld	r24, Z
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	09 f4       	brne	.+2      	; 0x792 <main+0x12a>
 790:	c1 9a       	sbi	0x18, 1	; 24
			if (rcv == 1) z = dltb[dly];
 792:	80 91 86 00 	lds	r24, 0x0086
 796:	90 91 87 00 	lds	r25, 0x0087
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	51 f4       	brne	.+20     	; 0x7b2 <main+0x14a>
 79e:	e0 91 84 00 	lds	r30, 0x0084
 7a2:	f0 91 85 00 	lds	r31, 0x0085
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	ee 59       	subi	r30, 0x9E	; 158
 7ac:	ff 4f       	sbci	r31, 0xFF	; 255
 7ae:	00 81       	ld	r16, Z
 7b0:	11 81       	ldd	r17, Z+1	; 0x01
	while(1)
	{
		adh = ADCH;
		adl = ADCL;
		receive();
		for (int z=0; z<dltb[dly]; z++)						// Active Delay , Finder LED
 7b2:	0f 5f       	subi	r16, 0xFF	; 255
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	e0 91 84 00 	lds	r30, 0x0084
 7ba:	f0 91 85 00 	lds	r31, 0x0085
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	ee 59       	subi	r30, 0x9E	; 158
 7c4:	ff 4f       	sbci	r31, 0xFF	; 255
 7c6:	80 81       	ld	r24, Z
 7c8:	91 81       	ldd	r25, Z+1	; 0x01
 7ca:	08 17       	cp	r16, r24
 7cc:	19 07       	cpc	r17, r25
 7ce:	08 f4       	brcc	.+2      	; 0x7d2 <main+0x16a>
 7d0:	b5 cf       	rjmp	.-150    	; 0x73c <main+0xd4>
			PORTB &= ~(1<<1);
			fin = div(z,40);
			if ((fin.rem == 0) && bufi[2] == 1) PORTB |= (1<<1);
			if (rcv == 1) z = dltb[dly];
		}
		if (rcv == 1)									// Write to USART
 7d2:	80 91 86 00 	lds	r24, 0x0086
 7d6:	90 91 87 00 	lds	r25, 0x0087
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	51 f4       	brne	.+20     	; 0x7f2 <main+0x18a>
 7de:	f3 01       	movw	r30, r6
		{
			for (int x=1; x < 11; x++)
			{
				UDR = bufi[x];
 7e0:	81 91       	ld	r24, Z+
 7e2:	8c b9       	out	0x0c, r24	; 12
			if ((fin.rem == 0) && bufi[2] == 1) PORTB |= (1<<1);
			if (rcv == 1) z = dltb[dly];
		}
		if (rcv == 1)									// Write to USART
		{
			for (int x=1; x < 11; x++)
 7e4:	e8 15       	cp	r30, r8
 7e6:	f9 05       	cpc	r31, r9
 7e8:	d9 f7       	brne	.-10     	; 0x7e0 <main+0x178>
			{
				UDR = bufi[x];
				//_delay_ms(1);
			}
			rcv = 0;
 7ea:	20 92 86 00 	sts	0x0086, r2
 7ee:	30 92 87 00 	sts	0x0087, r3
		}
		if ((bufi[1] == 'N') && (bufi[10] == 'N'))		// Send Data
 7f2:	f3 01       	movw	r30, r6
 7f4:	80 81       	ld	r24, Z
 7f6:	8e 34       	cpi	r24, 0x4E	; 78
 7f8:	09 f0       	breq	.+2      	; 0x7fc <main+0x194>
 7fa:	79 c0       	rjmp	.+242    	; 0x8ee <main+0x286>
 7fc:	f2 01       	movw	r30, r4
 7fe:	80 81       	ld	r24, Z
 800:	8e 34       	cpi	r24, 0x4E	; 78
 802:	09 f0       	breq	.+2      	; 0x806 <main+0x19e>
 804:	7f cf       	rjmp	.-258    	; 0x704 <main+0x9c>
		{
			ds18b20_read_1(tmpr1);
 806:	ce 01       	movw	r24, r28
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	5c de       	rcall	.-840    	; 0x4c4 <ds18b20_read_1>
 80c:	8f e9       	ldi	r24, 0x9F	; 159
 80e:	9f e0       	ldi	r25, 0x0F	; 15
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <main+0x1a8>
 814:	00 c0       	rjmp	.+0      	; 0x816 <main+0x1ae>
 816:	00 00       	nop
			_delay_ms(2);
			ds18b20_read_2(tmpr2);
 818:	ce 01       	movw	r24, r28
 81a:	07 96       	adiw	r24, 0x07	; 7
 81c:	87 de       	rcall	.-754    	; 0x52c <ds18b20_read_2>
			d1 = ((tmpr1[0] << 7) | tmpr1[1]);
 81e:	a9 81       	ldd	r26, Y+1	; 0x01
 820:	ba 81       	ldd	r27, Y+2	; 0x02
 822:	b6 95       	lsr	r27
 824:	ba 2f       	mov	r27, r26
 826:	aa 27       	eor	r26, r26
 828:	b7 95       	ror	r27
 82a:	a7 95       	ror	r26
 82c:	8b 81       	ldd	r24, Y+3	; 0x03
 82e:	9c 81       	ldd	r25, Y+4	; 0x04
 830:	a8 2b       	or	r26, r24
 832:	b9 2b       	or	r27, r25
 834:	b0 93 9b 00 	sts	0x009B, r27
 838:	a0 93 9a 00 	sts	0x009A, r26
			d2 = (tmpr1[2] >> 8);
 83c:	2d 81       	ldd	r18, Y+5	; 0x05
 83e:	3e 81       	ldd	r19, Y+6	; 0x06
 840:	30 93 b2 00 	sts	0x00B2, r19
 844:	10 92 b3 00 	sts	0x00B3, r1
			d3 = (tmpr1[2] & 0b11111111);
 848:	f9 01       	movw	r30, r18
 84a:	ff 27       	eor	r31, r31
 84c:	f0 93 dc 00 	sts	0x00DC, r31
 850:	e0 93 db 00 	sts	0x00DB, r30
			d4 = ((tmpr2[0] << 7) | tmpr2[1]);
 854:	4f 81       	ldd	r20, Y+7	; 0x07
 856:	58 85       	ldd	r21, Y+8	; 0x08
 858:	56 95       	lsr	r21
 85a:	54 2f       	mov	r21, r20
 85c:	44 27       	eor	r20, r20
 85e:	57 95       	ror	r21
 860:	47 95       	ror	r20
 862:	89 85       	ldd	r24, Y+9	; 0x09
 864:	9a 85       	ldd	r25, Y+10	; 0x0a
 866:	ba 01       	movw	r22, r20
 868:	68 2b       	or	r22, r24
 86a:	79 2b       	or	r23, r25
 86c:	7a 8b       	std	Y+18, r23	; 0x12
 86e:	69 8b       	std	Y+17, r22	; 0x11
 870:	70 93 b7 00 	sts	0x00B7, r23
 874:	60 93 b6 00 	sts	0x00B6, r22
			d5 = (tmpr2[2] >> 8);
 878:	8b 85       	ldd	r24, Y+11	; 0x0b
 87a:	9c 85       	ldd	r25, Y+12	; 0x0c
 87c:	90 93 b4 00 	sts	0x00B4, r25
 880:	10 92 b5 00 	sts	0x00B5, r1
			d6 = (tmpr2[2] & 0b11111111);
 884:	8c 01       	movw	r16, r24
 886:	11 27       	eor	r17, r17
 888:	10 93 da 00 	sts	0x00DA, r17
 88c:	00 93 d9 00 	sts	0x00D9, r16
			//ad = (((adh << 8) | adl) / 128);
			ad = (((adh << 8) | adl) / 4);
 890:	70 91 9c 00 	lds	r23, 0x009C
 894:	7e 87       	std	Y+14, r23	; 0x0e
 896:	1d 86       	std	Y+13, r1	; 0x0d
 898:	40 91 b0 00 	lds	r20, 0x00B0
 89c:	50 91 b1 00 	lds	r21, 0x00B1
 8a0:	6d 85       	ldd	r22, Y+13	; 0x0d
 8a2:	7e 85       	ldd	r23, Y+14	; 0x0e
 8a4:	46 2b       	or	r20, r22
 8a6:	57 2b       	or	r21, r23
 8a8:	ba 01       	movw	r22, r20
 8aa:	76 95       	lsr	r23
 8ac:	67 95       	ror	r22
 8ae:	76 95       	lsr	r23
 8b0:	67 95       	ror	r22
 8b2:	70 93 99 00 	sts	0x0099, r23
 8b6:	60 93 98 00 	sts	0x0098, r22
			bufo[1]  = 'A';
 8ba:	81 e4       	ldi	r24, 0x41	; 65
 8bc:	80 93 a0 00 	sts	0x00A0, r24
			bufo[2]  = d1;
 8c0:	a0 93 a1 00 	sts	0x00A1, r26
			bufo[3]  = d2;
 8c4:	30 93 a2 00 	sts	0x00A2, r19
			bufo[4]  = d3;
 8c8:	e0 93 a3 00 	sts	0x00A3, r30
			bufo[5]  = ad;
 8cc:	60 93 a4 00 	sts	0x00A4, r22
			bufo[6]  = d4;
 8d0:	79 89       	ldd	r23, Y+17	; 0x11
 8d2:	70 93 a5 00 	sts	0x00A5, r23
			bufo[7]  = d5;
 8d6:	90 93 a6 00 	sts	0x00A6, r25
			bufo[8]  = d6;
 8da:	00 93 a7 00 	sts	0x00A7, r16
			bufo[9]  = id;
 8de:	80 91 60 00 	lds	r24, 0x0060
 8e2:	80 93 a8 00 	sts	0x00A8, r24
			bufo[10] = 'B';
 8e6:	82 e4       	ldi	r24, 0x42	; 66
 8e8:	80 93 a9 00 	sts	0x00A9, r24
			transmit();
 8ec:	8a de       	rcall	.-748    	; 0x602 <transmit>
		}
		if ((bufi[1] == 'F') && (bufi[10] == 'F'))		// Off ACK
 8ee:	f3 01       	movw	r30, r6
 8f0:	80 81       	ld	r24, Z
 8f2:	86 34       	cpi	r24, 0x46	; 70
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <main+0x290>
 8f6:	06 cf       	rjmp	.-500    	; 0x704 <main+0x9c>
 8f8:	f2 01       	movw	r30, r4
 8fa:	80 81       	ld	r24, Z
 8fc:	86 34       	cpi	r24, 0x46	; 70
 8fe:	09 f0       	breq	.+2      	; 0x902 <main+0x29a>
 900:	01 cf       	rjmp	.-510    	; 0x704 <main+0x9c>
 902:	8f e1       	ldi	r24, 0x1F	; 31
 904:	9e e4       	ldi	r25, 0x4E	; 78
 906:	01 97       	sbiw	r24, 0x01	; 1
 908:	f1 f7       	brne	.-4      	; 0x906 <main+0x29e>
 90a:	00 c0       	rjmp	.+0      	; 0x90c <main+0x2a4>
 90c:	00 00       	nop
 90e:	ed e6       	ldi	r30, 0x6D	; 109
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	a0 ea       	ldi	r26, 0xA0	; 160
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	47 e7       	ldi	r20, 0x77	; 119
 918:	50 e0       	ldi	r21, 0x00	; 0
		{
			_delay_ms(10);
			for (int x=1; x < 11; x++)
			{
				bufo[x] = ofack[x];
 91a:	21 91       	ld	r18, Z+
 91c:	2d 93       	st	X+, r18
 91e:	8f ec       	ldi	r24, 0xCF	; 207
 920:	97 e0       	ldi	r25, 0x07	; 7
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <main+0x2ba>
 926:	00 c0       	rjmp	.+0      	; 0x928 <main+0x2c0>
 928:	00 00       	nop
			transmit();
		}
		if ((bufi[1] == 'F') && (bufi[10] == 'F'))		// Off ACK
		{
			_delay_ms(10);
			for (int x=1; x < 11; x++)
 92a:	e4 17       	cp	r30, r20
 92c:	f5 07       	cpc	r31, r21
 92e:	a9 f7       	brne	.-22     	; 0x91a <main+0x2b2>
			{
				bufo[x] = ofack[x];
				_delay_ms(1);
			}
			bufi[1] = 0;
 930:	f3 01       	movw	r30, r6
 932:	10 82       	st	Z, r1
			transmit();
 934:	66 de       	rcall	.-820    	; 0x602 <transmit>
 936:	8f e1       	ldi	r24, 0x1F	; 31
 938:	9e e4       	ldi	r25, 0x4E	; 78
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	f1 f7       	brne	.-4      	; 0x93a <main+0x2d2>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <main+0x2d8>
 940:	00 00       	nop
 942:	e0 ce       	rjmp	.-576    	; 0x704 <main+0x9c>

00000944 <__divmodhi4>:
 944:	97 fb       	bst	r25, 7
 946:	07 2e       	mov	r0, r23
 948:	16 f4       	brtc	.+4      	; 0x94e <__divmodhi4+0xa>
 94a:	00 94       	com	r0
 94c:	06 d0       	rcall	.+12     	; 0x95a <__divmodhi4_neg1>
 94e:	77 fd       	sbrc	r23, 7
 950:	08 d0       	rcall	.+16     	; 0x962 <__divmodhi4_neg2>
 952:	0b d0       	rcall	.+22     	; 0x96a <__udivmodhi4>
 954:	07 fc       	sbrc	r0, 7
 956:	05 d0       	rcall	.+10     	; 0x962 <__divmodhi4_neg2>
 958:	3e f4       	brtc	.+14     	; 0x968 <__divmodhi4_exit>

0000095a <__divmodhi4_neg1>:
 95a:	90 95       	com	r25
 95c:	81 95       	neg	r24
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__divmodhi4_neg2>:
 962:	70 95       	com	r23
 964:	61 95       	neg	r22
 966:	7f 4f       	sbci	r23, 0xFF	; 255

00000968 <__divmodhi4_exit>:
 968:	08 95       	ret

0000096a <__udivmodhi4>:
 96a:	aa 1b       	sub	r26, r26
 96c:	bb 1b       	sub	r27, r27
 96e:	51 e1       	ldi	r21, 0x11	; 17
 970:	07 c0       	rjmp	.+14     	; 0x980 <__udivmodhi4_ep>

00000972 <__udivmodhi4_loop>:
 972:	aa 1f       	adc	r26, r26
 974:	bb 1f       	adc	r27, r27
 976:	a6 17       	cp	r26, r22
 978:	b7 07       	cpc	r27, r23
 97a:	10 f0       	brcs	.+4      	; 0x980 <__udivmodhi4_ep>
 97c:	a6 1b       	sub	r26, r22
 97e:	b7 0b       	sbc	r27, r23

00000980 <__udivmodhi4_ep>:
 980:	88 1f       	adc	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	5a 95       	dec	r21
 986:	a9 f7       	brne	.-22     	; 0x972 <__udivmodhi4_loop>
 988:	80 95       	com	r24
 98a:	90 95       	com	r25
 98c:	bc 01       	movw	r22, r24
 98e:	cd 01       	movw	r24, r26
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
