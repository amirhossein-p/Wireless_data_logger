
TR_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  000036c8  0000377c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  008001f6  008001f6  00003912  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00003912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003915  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00003971  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005451  00000000  00000000  00003b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073d  00000000  00000000  00008f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000158d  00000000  00000000  000096af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  0000ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c97  00000000  00000000  0000b733  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000e3ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <main>
      8a:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      92:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      94:	82 e0       	ldi	r24, 0x02	; 2
      96:	8a 95       	dec	r24
      98:	f1 f7       	brne	.-4      	; 0x96 <toggle_e+0x4>
      9a:	00 c0       	rjmp	.+0      	; 0x9c <toggle_e+0xa>
    lcd_e_delay();
    lcd_e_low();
      9c:	c2 98       	cbi	0x18, 2	; 24
      9e:	08 95       	ret

000000a0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
      a0:	cf 93       	push	r28
      a2:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
      a4:	66 23       	and	r22, r22
      a6:	11 f0       	breq	.+4      	; 0xac <lcd_write+0xc>
       lcd_rs_high();
      a8:	c0 9a       	sbi	0x18, 0	; 24
      aa:	01 c0       	rjmp	.+2      	; 0xae <lcd_write+0xe>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      ac:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();    /* RW=0  write mode      */
      ae:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
      b0:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
      b2:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
      b4:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
      b6:	8e 9a       	sbi	0x11, 6	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      b8:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      ba:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      bc:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      be:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      c0:	cc 23       	and	r28, r28
      c2:	0c f4       	brge	.+2      	; 0xc6 <lcd_write+0x26>
      c4:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      c6:	c6 fd       	sbrc	r28, 6
      c8:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      ca:	c5 fd       	sbrc	r28, 5
      cc:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
      ce:	c4 fd       	sbrc	r28, 4
      d0:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_toggle();
      d2:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      d6:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      d8:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      da:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      dc:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      de:	c3 fd       	sbrc	r28, 3
      e0:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      e2:	c2 fd       	sbrc	r28, 2
      e4:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      e6:	c1 fd       	sbrc	r28, 1
      e8:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
      ea:	c0 fd       	sbrc	r28, 0
      ec:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_toggle();        
      ee:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
      f2:	c3 9a       	sbi	0x18, 3	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      f4:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      f6:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      f8:	96 9a       	sbi	0x12, 6	; 18
    }
}
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
      fe:	88 23       	and	r24, r24
     100:	11 f0       	breq	.+4      	; 0x106 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     102:	c0 9a       	sbi	0x18, 0	; 24
     104:	01 c0       	rjmp	.+2      	; 0x108 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     106:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
     108:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     10a:	bb 98       	cbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     10c:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     10e:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     110:	8e 98       	cbi	0x11, 6	; 17
                
        /* read high nibble first */
        lcd_e_high();
     112:	c2 9a       	sbi	0x18, 2	; 24
     114:	82 e0       	ldi	r24, 0x02	; 2
     116:	8a 95       	dec	r24
     118:	f1 f7       	brne	.-4      	; 0x116 <lcd_read+0x18>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_read+0x1e>
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     11c:	b3 99       	sbic	0x16, 3	; 22
     11e:	02 c0       	rjmp	.+4      	; 0x124 <lcd_read+0x26>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	01 c0       	rjmp	.+2      	; 0x126 <lcd_read+0x28>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     124:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     126:	84 99       	sbic	0x10, 4	; 16
     128:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     12a:	85 99       	sbic	0x10, 5	; 16
     12c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     12e:	86 99       	sbic	0x10, 6	; 16
     130:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     132:	c2 98       	cbi	0x18, 2	; 24
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	9a 95       	dec	r25
     138:	f1 f7       	brne	.-4      	; 0x136 <lcd_read+0x38>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_read+0x3e>

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
     13c:	c2 9a       	sbi	0x18, 2	; 24
     13e:	92 e0       	ldi	r25, 0x02	; 2
     140:	9a 95       	dec	r25
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_read+0x42>
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_read+0x48>
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     146:	b3 99       	sbic	0x16, 3	; 22
     148:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     14a:	84 99       	sbic	0x10, 4	; 16
     14c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     14e:	85 99       	sbic	0x10, 5	; 16
     150:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     152:	86 99       	sbic	0x10, 6	; 16
     154:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     156:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     158:	08 95       	ret

0000015a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_read>
     160:	88 23       	and	r24, r24
     162:	dc f3       	brlt	.-10     	; 0x15a <lcd_waitbusy>
     164:	8a e0       	ldi	r24, 0x0A	; 10
     166:	8a 95       	dec	r24
     168:	f1 f7       	brne	.-4      	; 0x166 <lcd_waitbusy+0xc>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_waitbusy+0x12>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_read>
    
}/* lcd_waitbusy */
     172:	08 95       	ret

00000174 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     174:	cf 93       	push	r28
     176:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     178:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_waitbusy>
    lcd_write(cmd,0);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8c 2f       	mov	r24, r28
     180:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_write>
}
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     188:	cf 93       	push	r28
     18a:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     18c:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_waitbusy>
    lcd_write(data,1);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	8c 2f       	mov	r24, r28
     194:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_write>
}
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     19c:	61 11       	cpse	r22, r1
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     1a0:	80 58       	subi	r24, 0x80	; 128
     1a2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     1a6:	08 95       	ret
    else if ( y==1)
     1a8:	61 30       	cpi	r22, 0x01	; 1
     1aa:	21 f4       	brne	.+8      	; 0x1b4 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     1ac:	80 54       	subi	r24, 0x40	; 64
     1ae:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     1b2:	08 95       	ret
    else if ( y==2)
     1b4:	62 30       	cpi	r22, 0x02	; 2
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <lcd_gotoxy+0x24>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     1b8:	80 57       	subi	r24, 0x70	; 112
     1ba:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     1be:	08 95       	ret
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     1c0:	80 53       	subi	r24, 0x30	; 48
     1c2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     1c6:	08 95       	ret

000001c8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     1ce:	08 95       	ret

000001d0 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     1d6:	08 95       	ret

000001d8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     1d8:	cf 93       	push	r28
     1da:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     1dc:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_waitbusy>
    if (c=='\n')
     1e0:	ca 30       	cpi	r28, 0x0A	; 10
     1e2:	a1 f4       	brne	.+40     	; 0x20c <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     1e4:	80 31       	cpi	r24, 0x10	; 16
     1e6:	48 f0       	brcs	.+18     	; 0x1fa <lcd_putc+0x22>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     1e8:	90 ec       	ldi	r25, 0xC0	; 192
     1ea:	98 0f       	add	r25, r24
     1ec:	90 31       	cpi	r25, 0x10	; 16
     1ee:	38 f0       	brcs	.+14     	; 0x1fe <lcd_putc+0x26>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     1f0:	80 51       	subi	r24, 0x10	; 16
     1f2:	80 33       	cpi	r24, 0x30	; 48
     1f4:	30 f4       	brcc	.+12     	; 0x202 <lcd_putc+0x2a>
        addressCounter = LCD_START_LINE4;
     1f6:	80 e5       	ldi	r24, 0x50	; 80
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
     1fa:	80 e4       	ldi	r24, 0x40	; 64
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
     1fe:	80 e1       	ldi	r24, 0x10	; 16
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
     202:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     204:	80 58       	subi	r24, 0x80	; 128
     206:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
     20a:	04 c0       	rjmp	.+8      	; 0x214 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	8c 2f       	mov	r24, r28
     210:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_write>
    }

}/* lcd_putc */
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     21c:	ec 01       	movw	r28, r24
     21e:	21 96       	adiw	r28, 0x01	; 1
     220:	fc 01       	movw	r30, r24
     222:	80 81       	ld	r24, Z
     224:	88 23       	and	r24, r24
     226:	29 f0       	breq	.+10     	; 0x232 <lcd_puts+0x1a>
        lcd_putc(c);
     228:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     22c:	89 91       	ld	r24, Y+
     22e:	81 11       	cpse	r24, r1
     230:	fb cf       	rjmp	.-10     	; 0x228 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     238:	cf 93       	push	r28
     23a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     23c:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     23e:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     240:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     242:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     244:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     246:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     248:	8e 9a       	sbi	0x11, 6	; 17
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	9c e7       	ldi	r25, 0x7C	; 124
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x16>
     252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x1c>
     254:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     256:	94 9a       	sbi	0x12, 4	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     258:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_toggle();
     25a:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     25e:	8f e0       	ldi	r24, 0x0F	; 15
     260:	97 e2       	ldi	r25, 0x27	; 39
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x2a>
     266:	00 c0       	rjmp	.+0      	; 0x268 <lcd_init+0x30>
     268:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     26a:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     26e:	9a ea       	ldi	r25, 0xAA	; 170
     270:	9a 95       	dec	r25
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x38>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x3e>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     276:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     27a:	8a ea       	ldi	r24, 0xAA	; 170
     27c:	8a 95       	dec	r24
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x44>
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x4a>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     282:	c3 98       	cbi	0x18, 3	; 24
    lcd_e_toggle();
     284:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     288:	9a ea       	ldi	r25, 0xAA	; 170
     28a:	9a 95       	dec	r25
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x52>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x58>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     290:	88 e2       	ldi	r24, 0x28	; 40
     292:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     296:	88 e0       	ldi	r24, 0x08	; 8
     298:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     29c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     2a0:	86 e0       	ldi	r24, 0x06	; 6
     2a2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2a6:	8c 2f       	mov	r24, r28
     2a8:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>

}/* lcd_init */
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <spi>:
unsigned char command_buff=0,status_buff=0,nrf_state=0;
char nrf_mode;
int sent_actived=0;
unsigned char spi(unsigned char data)
{
    SPDR=data;
     2b0:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & 0x80)); 
     2b2:	77 9b       	sbis	0x0e, 7	; 14
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <spi+0x2>
    data=SPSR; 
     2b6:	8e b1       	in	r24, 0x0e	; 14
    return SPDR;
     2b8:	8f b1       	in	r24, 0x0f	; 15
}
     2ba:	08 95       	ret

000002bc <nrf_inst>:
void nrf_inst(unsigned char ins)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	c8 2f       	mov	r28, r24
    int i;                              
    CSN0; //CSN=0;    
     2c6:	c4 98       	cbi	0x18, 4	; 24
    status_buff=spi(ins);       
     2c8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
     2cc:	80 93 53 02 	sts	0x0253, r24
    switch(ins & 0xE0)
     2d0:	9c 2f       	mov	r25, r28
     2d2:	90 7e       	andi	r25, 0xE0	; 224
     2d4:	90 32       	cpi	r25, 0x20	; 32
     2d6:	31 f1       	breq	.+76     	; 0x324 <nrf_inst+0x68>
     2d8:	18 f4       	brcc	.+6      	; 0x2e0 <nrf_inst+0x24>
     2da:	99 23       	and	r25, r25
     2dc:	39 f0       	breq	.+14     	; 0x2ec <nrf_inst+0x30>
     2de:	62 c0       	rjmp	.+196    	; 0x3a4 <nrf_inst+0xe8>
     2e0:	90 36       	cpi	r25, 0x60	; 96
     2e2:	d1 f1       	breq	.+116    	; 0x358 <nrf_inst+0x9c>
     2e4:	90 3a       	cpi	r25, 0xA0	; 160
     2e6:	09 f4       	brne	.+2      	; 0x2ea <nrf_inst+0x2e>
     2e8:	4f c0       	rjmp	.+158    	; 0x388 <nrf_inst+0xcc>
     2ea:	5c c0       	rjmp	.+184    	; 0x3a4 <nrf_inst+0xe8>
    {
        case 0x00:
        {                         
            if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10) 
     2ec:	cf 71       	andi	r28, 0x1F	; 31
     2ee:	2c 2f       	mov	r18, r28
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	2a 50       	subi	r18, 0x0A	; 10
     2f4:	31 09       	sbc	r19, r1
     2f6:	22 30       	cpi	r18, 0x02	; 2
     2f8:	31 05       	cpc	r19, r1
     2fa:	10 f0       	brcs	.+4      	; 0x300 <nrf_inst+0x44>
     2fc:	c0 31       	cpi	r28, 0x10	; 16
     2fe:	61 f4       	brne	.+24     	; 0x318 <nrf_inst+0x5c>
     300:	cf eb       	ldi	r28, 0xBF	; 191
     302:	d0 e0       	ldi	r29, 0x00	; 0
     304:	0a eb       	ldi	r16, 0xBA	; 186
     306:	10 e0       	ldi	r17, 0x00	; 0
            {
                for(i=4;i>=0;i--)
                {
                    temp_address[i]=spi(0xFF);
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
     30e:	8a 93       	st	-Y, r24
    {
        case 0x00:
        {                         
            if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10) 
            {
                for(i=4;i>=0;i--)
     310:	c0 17       	cp	r28, r16
     312:	d1 07       	cpc	r29, r17
     314:	c9 f7       	brne	.-14     	; 0x308 <nrf_inst+0x4c>
     316:	46 c0       	rjmp	.+140    	; 0x3a4 <nrf_inst+0xe8>
                    temp_address[i]=spi(0xFF);
                }
            }
            else
            {
                command_buff=spi(0xFF);   
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
     31e:	80 93 54 02 	sts	0x0254, r24
     322:	40 c0       	rjmp	.+128    	; 0x3a4 <nrf_inst+0xe8>
            }
            break;
        }
        case 0x20:  
        {                         
            if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10)
     324:	cf 71       	andi	r28, 0x1F	; 31
     326:	2c 2f       	mov	r18, r28
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	2a 50       	subi	r18, 0x0A	; 10
     32c:	31 09       	sbc	r19, r1
     32e:	22 30       	cpi	r18, 0x02	; 2
     330:	31 05       	cpc	r19, r1
     332:	10 f0       	brcs	.+4      	; 0x338 <nrf_inst+0x7c>
     334:	c0 31       	cpi	r28, 0x10	; 16
     336:	59 f4       	brne	.+22     	; 0x34e <nrf_inst+0x92>
     338:	c4 ec       	ldi	r28, 0xC4	; 196
     33a:	d0 e0       	ldi	r29, 0x00	; 0
     33c:	0f eb       	ldi	r16, 0xBF	; 191
     33e:	10 e0       	ldi	r17, 0x00	; 0
            {
                for(i=4;i>=0;i--)
                {
                    spi(base_address[i]);
     340:	8a 91       	ld	r24, -Y
     342:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
        }
        case 0x20:  
        {                         
            if((ins & 0x1F)==0x0A || (ins & 0x1F)==0x0B || (ins & 0x1F)==0x10)
            {
                for(i=4;i>=0;i--)
     346:	c0 17       	cp	r28, r16
     348:	d1 07       	cpc	r29, r17
     34a:	d1 f7       	brne	.-12     	; 0x340 <nrf_inst+0x84>
     34c:	2b c0       	rjmp	.+86     	; 0x3a4 <nrf_inst+0xe8>
                    spi(base_address[i]);
                } 
            }
            else
            {  
                spi(command_buff);
     34e:	80 91 54 02 	lds	r24, 0x0254
     352:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
     356:	26 c0       	rjmp	.+76     	; 0x3a4 <nrf_inst+0xe8>
            }
            break;
        }         
        case 0x60:
        {
            if((ins & 0x01)==1)
     358:	c0 ff       	sbrs	r28, 0
     35a:	10 c0       	rjmp	.+32     	; 0x37c <nrf_inst+0xc0>
            {
                i=payload[0];
     35c:	c0 91 d1 02 	lds	r28, 0x02D1
                while(i!=0)
     360:	cc 23       	and	r28, r28
     362:	01 f1       	breq	.+64     	; 0x3a4 <nrf_inst+0xe8>
     364:	d0 e0       	ldi	r29, 0x00	; 0
     366:	ce 52       	subi	r28, 0x2E	; 46
     368:	dd 4f       	sbci	r29, 0xFD	; 253
                {
                    payload[i]=spi(0xFF); 
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
     370:	8a 93       	st	-Y, r24
        case 0x60:
        {
            if((ins & 0x01)==1)
            {
                i=payload[0];
                while(i!=0)
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	c2 3d       	cpi	r28, 0xD2	; 210
     376:	d8 07       	cpc	r29, r24
     378:	c1 f7       	brne	.-16     	; 0x36a <nrf_inst+0xae>
     37a:	14 c0       	rjmp	.+40     	; 0x3a4 <nrf_inst+0xe8>
                    i--;
                }    
            }
            else 
            {
                command_buff=spi(0xFF);    
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
     382:	80 93 54 02 	sts	0x0254, r24
     386:	0e c0       	rjmp	.+28     	; 0x3a4 <nrf_inst+0xe8>
            }
            break;
        }
        case 0xA0:
        {    
            i=payload[0];
     388:	c0 91 d1 02 	lds	r28, 0x02D1
            while(i!=0)
     38c:	cc 23       	and	r28, r28
     38e:	51 f0       	breq	.+20     	; 0x3a4 <nrf_inst+0xe8>
     390:	d0 e0       	ldi	r29, 0x00	; 0
     392:	ce 52       	subi	r28, 0x2E	; 46
     394:	dd 4f       	sbci	r29, 0xFD	; 253
            {
                spi(payload[i]); 
     396:	8a 91       	ld	r24, -Y
     398:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi>
            break;
        }
        case 0xA0:
        {    
            i=payload[0];
            while(i!=0)
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	c2 3d       	cpi	r28, 0xD2	; 210
     3a0:	d8 07       	cpc	r29, r24
     3a2:	c9 f7       	brne	.-14     	; 0x396 <nrf_inst+0xda>
            }
            break;
        }
        
    }   
    CSN1; //CSN=1;  
     3a4:	c4 9a       	sbi	0x18, 4	; 24
     3a6:	8a e1       	ldi	r24, 0x1A	; 26
     3a8:	8a 95       	dec	r24
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <nrf_inst+0xec>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <nrf_inst+0xf2>
    _delay_us(10);
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <__vector_1>:
ISR (INT0_vect)
{ 
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
    if(nrf_mode==0)
     3da:	80 91 95 02 	lds	r24, 0x0295
     3de:	81 11       	cpse	r24, r1
     3e0:	29 c0       	rjmp	.+82     	; 0x434 <__vector_1+0x7c>
    {
        nrf_inst(0xFF); 
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
        if(status_buff & 0x20)  
     3e8:	80 91 53 02 	lds	r24, 0x0253
     3ec:	85 ff       	sbrs	r24, 5
     3ee:	1e c0       	rjmp	.+60     	; 0x42c <__vector_1+0x74>
        {
            nrf_state=2;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	80 93 52 02 	sts	0x0252, r24
            nrf_inst(0x17);        
     3f6:	87 e1       	ldi	r24, 0x17	; 23
     3f8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
            if((command_buff & 0x01)==0)
     3fc:	80 91 54 02 	lds	r24, 0x0254
     400:	80 fd       	sbrc	r24, 0
     402:	2b c0       	rjmp	.+86     	; 0x45a <__vector_1+0xa2>
            {
                nrf_inst(0x60);  
     404:	80 e6       	ldi	r24, 0x60	; 96
     406:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
                if(command_buff<=32)
     40a:	80 91 54 02 	lds	r24, 0x0254
     40e:	81 32       	cpi	r24, 0x21	; 33
     410:	48 f4       	brcc	.+18     	; 0x424 <__vector_1+0x6c>
                {
                    payload[0]=command_buff; 
     412:	80 93 d1 02 	sts	0x02D1, r24
                    nrf_inst(0x61);    
     416:	81 e6       	ldi	r24, 0x61	; 97
     418:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
                    nrf_state=3;
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	80 93 52 02 	sts	0x0252, r24
     422:	1b c0       	rjmp	.+54     	; 0x45a <__vector_1+0xa2>
                }
                else
                    nrf_inst(0xE2);
     424:	82 ee       	ldi	r24, 0xE2	; 226
     426:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
     42a:	17 c0       	rjmp	.+46     	; 0x45a <__vector_1+0xa2>
            }          
        }
        else 
        {
            nrf_state=4;
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	80 93 52 02 	sts	0x0252, r24
     432:	13 c0       	rjmp	.+38     	; 0x45a <__vector_1+0xa2>
        }
    }                                                     
    else
    {
        nrf_inst(0x60); 
     434:	80 e6       	ldi	r24, 0x60	; 96
     436:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
        if(command_buff>32)
     43a:	80 91 54 02 	lds	r24, 0x0254
     43e:	81 32       	cpi	r24, 0x21	; 33
     440:	20 f0       	brcs	.+8      	; 0x44a <__vector_1+0x92>
        {
            nrf_inst(0xE2);
     442:	82 ee       	ldi	r24, 0xE2	; 226
     444:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
     448:	08 c0       	rjmp	.+16     	; 0x45a <__vector_1+0xa2>
        }
        else
        {
            payload[0]=command_buff;
     44a:	80 93 d1 02 	sts	0x02D1, r24
            nrf_inst(0x61);
     44e:	81 e6       	ldi	r24, 0x61	; 97
     450:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
            nrf_state=1;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 52 02 	sts	0x0252, r24
        }
    }     
    command_buff=0x7E; 
     45a:	8e e7       	ldi	r24, 0x7E	; 126
     45c:	80 93 54 02 	sts	0x0254, r24
    nrf_inst(0x27);    
     460:	87 e2       	ldi	r24, 0x27	; 39
     462:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    nrf_inst(0xE1);                                                  
     466:	81 ee       	ldi	r24, 0xE1	; 225
     468:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
}
     46c:	ff 91       	pop	r31
     46e:	ef 91       	pop	r30
     470:	bf 91       	pop	r27
     472:	af 91       	pop	r26
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	7f 91       	pop	r23
     47a:	6f 91       	pop	r22
     47c:	5f 91       	pop	r21
     47e:	4f 91       	pop	r20
     480:	3f 91       	pop	r19
     482:	2f 91       	pop	r18
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <sent>:

void sent()
{ 
    if(sent_actived)
     48e:	80 91 50 02 	lds	r24, 0x0250
     492:	90 91 51 02 	lds	r25, 0x0251
     496:	89 2b       	or	r24, r25
     498:	f1 f1       	breq	.+124    	; 0x516 <sent+0x88>
    {
        sent_actived=0;  
     49a:	10 92 51 02 	sts	0x0251, r1
     49e:	10 92 50 02 	sts	0x0250, r1
        if((temp_address[4]==base_address[4]) && (temp_address[3]==base_address[3]) && (temp_address[2]==base_address[2]) && (temp_address[1]==base_address[1]) && (temp_address[0]==base_address[0]))
     4a2:	90 91 be 00 	lds	r25, 0x00BE
     4a6:	80 91 c3 00 	lds	r24, 0x00C3
     4aa:	98 13       	cpse	r25, r24
     4ac:	31 c0       	rjmp	.+98     	; 0x510 <sent+0x82>
     4ae:	90 91 bd 00 	lds	r25, 0x00BD
     4b2:	80 91 c2 00 	lds	r24, 0x00C2
     4b6:	98 13       	cpse	r25, r24
     4b8:	2b c0       	rjmp	.+86     	; 0x510 <sent+0x82>
     4ba:	90 91 bc 00 	lds	r25, 0x00BC
     4be:	80 91 c1 00 	lds	r24, 0x00C1
     4c2:	98 13       	cpse	r25, r24
     4c4:	25 c0       	rjmp	.+74     	; 0x510 <sent+0x82>
     4c6:	90 91 bb 00 	lds	r25, 0x00BB
     4ca:	80 91 c0 00 	lds	r24, 0x00C0
     4ce:	98 13       	cpse	r25, r24
     4d0:	1f c0       	rjmp	.+62     	; 0x510 <sent+0x82>
     4d2:	90 91 ba 00 	lds	r25, 0x00BA
     4d6:	80 91 bf 00 	lds	r24, 0x00BF
     4da:	98 13       	cpse	r25, r24
     4dc:	19 c0       	rjmp	.+50     	; 0x510 <sent+0x82>
        {
            nrf_inst(0xE1); 
     4de:	81 ee       	ldi	r24, 0xE1	; 225
     4e0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
            nrf_inst(0xA0);           
     4e4:	80 ea       	ldi	r24, 0xA0	; 160
     4e6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ea:	8f e1       	ldi	r24, 0x1F	; 31
     4ec:	9e e4       	ldi	r25, 0x4E	; 78
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <sent+0x60>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <sent+0x66>
     4f4:	00 00       	nop
            _delay_ms(10);
            CE1; //CE = 1
     4f6:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f8:	95 e3       	ldi	r25, 0x35	; 53
     4fa:	9a 95       	dec	r25
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <sent+0x6c>
     4fe:	00 00       	nop
            _delay_us(20);
            CE0; //CE = 0
     500:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     502:	8f e1       	ldi	r24, 0x1F	; 31
     504:	9e e4       	ldi	r25, 0x4E	; 78
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <sent+0x78>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <sent+0x7e>
     50c:	00 00       	nop
     50e:	08 95       	ret
            _delay_ms(10);
        }
        else
            nrf_state=5; 
     510:	85 e0       	ldi	r24, 0x05	; 5
     512:	80 93 52 02 	sts	0x0252, r24
     516:	08 95       	ret

00000518 <nrf_config>:
    }                                      
}

void nrf_config(char mode)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	d8 2f       	mov	r29, r24
    IRQ1; //IRQ = 1
     51e:	92 9a       	sbi	0x12, 2	; 18
    CSN1; //CSN=1; 
     520:	c4 9a       	sbi	0x18, 4	; 24
    DDCSN; //DD_CSN=1;
     522:	bc 9a       	sbi	0x17, 4	; 23
    CLK0; //CLK=0;
     524:	c7 98       	cbi	0x18, 7	; 24
    DDCLK; //DD_CLK=1;
     526:	bf 9a       	sbi	0x17, 7	; 23
    CE0; //CE = 0
     528:	93 98       	cbi	0x12, 3	; 18
    DDCE; //DD_CE=1;
     52a:	8b 9a       	sbi	0x11, 3	; 17
    DDMOSI; //DD_MOSI=1;
     52c:	bd 9a       	sbi	0x17, 5	; 23
    DDMISO; //DD_MISO=0;  
     52e:	be 9a       	sbi	0x17, 6	; 23
    GIFR=0x40;
     530:	80 e4       	ldi	r24, 0x40	; 64
     532:	8a bf       	out	0x3a, r24	; 58
    GICR|=0x40;          
     534:	8b b7       	in	r24, 0x3b	; 59
     536:	80 64       	ori	r24, 0x40	; 64
     538:	8b bf       	out	0x3b, r24	; 59
    sei();
     53a:	78 94       	sei
    SPCR=0x50;        
     53c:	80 e5       	ldi	r24, 0x50	; 80
     53e:	8d b9       	out	0x0d, r24	; 13
     540:	2f e7       	ldi	r18, 0x7F	; 127
     542:	8f ea       	ldi	r24, 0xAF	; 175
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	21 50       	subi	r18, 0x01	; 1
     548:	80 40       	sbci	r24, 0x00	; 0
     54a:	90 40       	sbci	r25, 0x00	; 0
     54c:	e1 f7       	brne	.-8      	; 0x546 <nrf_config+0x2e>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <nrf_config+0x38>
     550:	00 00       	nop
    _delay_ms(110);
    
    nrf_mode=mode;   
     552:	d0 93 95 02 	sts	0x0295, r29
    
    command_buff=0x01;
     556:	c1 e0       	ldi	r28, 0x01	; 1
     558:	c0 93 54 02 	sts	0x0254, r28
    nrf_inst(0x21);   
     55c:	81 e2       	ldi	r24, 0x21	; 33
     55e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    command_buff=0x01;
     562:	c0 93 54 02 	sts	0x0254, r28
    nrf_inst(0x22);   
     566:	82 e2       	ldi	r24, 0x22	; 34
     568:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
      
    command_buff=0x03;
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	80 93 54 02 	sts	0x0254, r24
    nrf_inst(0x23);   
     572:	83 e2       	ldi	r24, 0x23	; 35
     574:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    command_buff=0x2f;
     578:	8f e2       	ldi	r24, 0x2F	; 47
     57a:	80 93 54 02 	sts	0x0254, r24
    nrf_inst(0x24);   
     57e:	84 e2       	ldi	r24, 0x24	; 36
     580:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
                       
    command_buff=0x01;   
     584:	c0 93 54 02 	sts	0x0254, r28
    nrf_inst(0x25);      
     588:	85 e2       	ldi	r24, 0x25	; 37
     58a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    command_buff=0x26;   //0x06 -> 0x26
     58e:	86 e2       	ldi	r24, 0x26	; 38
     590:	80 93 54 02 	sts	0x0254, r24
    nrf_inst(0x26);      
     594:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    nrf_inst(0x2A);      
     598:	8a e2       	ldi	r24, 0x2A	; 42
     59a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    nrf_inst(0x30);      
     59e:	80 e3       	ldi	r24, 0x30	; 48
     5a0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    command_buff=0x01;   
     5a4:	c0 93 54 02 	sts	0x0254, r28
    nrf_inst(0x3C);      
     5a8:	8c e3       	ldi	r24, 0x3C	; 60
     5aa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
        
    command_buff=0x07;   
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	80 93 54 02 	sts	0x0254, r24
    nrf_inst(0x3D);          
     5b4:	8d e3       	ldi	r24, 0x3D	; 61
     5b6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
    
    if(mode==0)
     5ba:	d1 11       	cpse	r29, r1
     5bc:	16 c0       	rjmp	.+44     	; 0x5ea <nrf_config+0xd2>
    {
        command_buff=0x4E;
     5be:	8e e4       	ldi	r24, 0x4E	; 78
     5c0:	80 93 54 02 	sts	0x0254, r24
        nrf_inst(0x20);   
     5c4:	80 e2       	ldi	r24, 0x20	; 32
     5c6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	80 e7       	ldi	r24, 0x70	; 112
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <nrf_config+0xb8>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <nrf_config+0xc2>
     5da:	00 00       	nop
        _delay_ms(100);
        sent_actived=1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	90 93 51 02 	sts	0x0251, r25
     5e4:	80 93 50 02 	sts	0x0250, r24
     5e8:	0d c0       	rjmp	.+26     	; 0x604 <nrf_config+0xec>
    }
    else
    {
        command_buff=0x3F;
     5ea:	8f e3       	ldi	r24, 0x3F	; 63
     5ec:	80 93 54 02 	sts	0x0254, r24
        nrf_inst(0x20);   
     5f0:	80 e2       	ldi	r24, 0x20	; 32
     5f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf_inst>
     5f6:	8f e0       	ldi	r24, 0x0F	; 15
     5f8:	97 e2       	ldi	r25, 0x27	; 39
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <nrf_config+0xe2>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <nrf_config+0xe8>
     600:	00 00       	nop
        _delay_ms(5);
        CE1; //CE = 1
     602:	93 9a       	sbi	0x12, 3	; 18
    } 
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <__vector_11>:
unsigned int start[7] =		{ 's' , 't' , 'a' , 'r' , 't' , 0x0D , 0x0A };	
unsigned int usrcv = 0;
unsigned int aa = 0;

ISR (USART_RXC_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	8f 93       	push	r24
     61c:	9f 93       	push	r25
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
	usrcv = UDR;
     622:	4c b1       	in	r20, 0x0c	; 12
     624:	84 2f       	mov	r24, r20
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	90 93 4d 02 	sts	0x024D, r25
     62c:	80 93 4c 02 	sts	0x024C, r24
	rcv[i++] = usrcv;
     630:	80 91 4e 02 	lds	r24, 0x024E
     634:	90 91 4f 02 	lds	r25, 0x024F
     638:	9c 01       	movw	r18, r24
     63a:	2f 5f       	subi	r18, 0xFF	; 255
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	30 93 4f 02 	sts	0x024F, r19
     642:	20 93 4e 02 	sts	0x024E, r18
     646:	fc 01       	movw	r30, r24
     648:	ef 53       	subi	r30, 0x3F	; 63
     64a:	fd 4f       	sbci	r31, 0xFD	; 253
     64c:	40 83       	st	Z, r20
}
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	4f 91       	pop	r20
     658:	3f 91       	pop	r19
     65a:	2f 91       	pop	r18
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <sd_init>:
	return usrcv;
}

void sd_init(void)
{
	sd_set;
     666:	ad 9a       	sbi	0x15, 5	; 21
     668:	08 95       	ret

0000066a <sd_response>:
		_delay_ms(100);
		sd_set;
	}
}
int sd_response (void)
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
	i = 0;
     672:	10 92 4f 02 	sts	0x024F, r1
     676:	10 92 4e 02 	sts	0x024E, r1
     67a:	e0 eb       	ldi	r30, 0xB0	; 176
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	8a eb       	ldi	r24, 0xBA	; 186
     680:	90 e0       	ldi	r25, 0x00	; 0
	int rspn = 0;
	for (int a=0; a<5; a++)
	{
		UDR = rsp[a];
     682:	20 81       	ld	r18, Z
     684:	32 96       	adiw	r30, 0x02	; 2
     686:	2c b9       	out	0x0c, r18	; 12
     688:	af ec       	ldi	r26, 0xCF	; 207
     68a:	b7 e0       	ldi	r27, 0x07	; 7
     68c:	11 97       	sbiw	r26, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <sd_response+0x22>
     690:	00 c0       	rjmp	.+0      	; 0x692 <sd_response+0x28>
     692:	00 00       	nop
}
int sd_response (void)
{
	i = 0;
	int rspn = 0;
	for (int a=0; a<5; a++)
     694:	e8 17       	cp	r30, r24
     696:	f9 07       	cpc	r31, r25
     698:	a1 f7       	brne	.-24     	; 0x682 <sd_response+0x18>
     69a:	8f e1       	ldi	r24, 0x1F	; 31
     69c:	9e e4       	ldi	r25, 0x4E	; 78
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <sd_response+0x34>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <sd_response+0x3a>
     6a4:	00 00       	nop
	{
		UDR = rsp[a];
		_delay_ms(1);
	}
	_delay_ms(10);
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '0')) rspn = 100;		// File System isn't compatible
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	80 91 c1 02 	lds	r24, 0x02C1
     6ac:	81 33       	cpi	r24, 0x31	; 49
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <sd_response+0x48>
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 91 c2 02 	lds	r21, 0x02C2
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	50 33       	cpi	r21, 0x30	; 48
     6ba:	09 f0       	breq	.+2      	; 0x6be <sd_response+0x54>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	24 23       	and	r18, r20
     6c0:	30 91 c3 02 	lds	r19, 0x02C3
     6c4:	71 e0       	ldi	r23, 0x01	; 1
     6c6:	30 33       	cpi	r19, 0x30	; 48
     6c8:	09 f0       	breq	.+2      	; 0x6cc <sd_response+0x62>
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	22 23       	and	r18, r18
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <sd_response+0x6a>
     6d0:	71 11       	cpse	r23, r1
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <sd_response+0x70>
	}
}
int sd_response (void)
{
	i = 0;
	int rspn = 0;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <sd_response+0x74>
	{
		UDR = rsp[a];
		_delay_ms(1);
	}
	_delay_ms(10);
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '0')) rspn = 100;		// File System isn't compatible
     6da:	84 e6       	ldi	r24, 0x64	; 100
     6dc:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '1')) rspn = 101;		// Card is dismount
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	31 33       	cpi	r19, 0x31	; 49
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <sd_response+0x7c>
     6e4:	00 e0       	ldi	r16, 0x00	; 0
     6e6:	22 23       	and	r18, r18
     6e8:	21 f0       	breq	.+8      	; 0x6f2 <sd_response+0x88>
     6ea:	00 23       	and	r16, r16
     6ec:	11 f0       	breq	.+4      	; 0x6f2 <sd_response+0x88>
     6ee:	85 e6       	ldi	r24, 0x65	; 101
     6f0:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '2')) rspn = 102;		// Card isn't present
     6f2:	11 e0       	ldi	r17, 0x01	; 1
     6f4:	32 33       	cpi	r19, 0x32	; 50
     6f6:	09 f0       	breq	.+2      	; 0x6fa <sd_response+0x90>
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	22 23       	and	r18, r18
     6fc:	21 f0       	breq	.+8      	; 0x706 <sd_response+0x9c>
     6fe:	11 23       	and	r17, r17
     700:	11 f0       	breq	.+4      	; 0x706 <sd_response+0x9c>
     702:	86 e6       	ldi	r24, 0x66	; 102
     704:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '3')) rspn = 103;		// Write Protected
     706:	d1 e0       	ldi	r29, 0x01	; 1
     708:	33 33       	cpi	r19, 0x33	; 51
     70a:	09 f0       	breq	.+2      	; 0x70e <sd_response+0xa4>
     70c:	d0 e0       	ldi	r29, 0x00	; 0
     70e:	22 23       	and	r18, r18
     710:	21 f0       	breq	.+8      	; 0x71a <sd_response+0xb0>
     712:	dd 23       	and	r29, r29
     714:	11 f0       	breq	.+4      	; 0x71a <sd_response+0xb0>
     716:	87 e6       	ldi	r24, 0x67	; 103
     718:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '4')) rspn = 104;		// Drive not initialized
     71a:	c1 e0       	ldi	r28, 0x01	; 1
     71c:	34 33       	cpi	r19, 0x34	; 52
     71e:	09 f0       	breq	.+2      	; 0x722 <sd_response+0xb8>
     720:	c0 e0       	ldi	r28, 0x00	; 0
     722:	22 23       	and	r18, r18
     724:	21 f0       	breq	.+8      	; 0x72e <sd_response+0xc4>
     726:	cc 23       	and	r28, r28
     728:	11 f0       	breq	.+4      	; 0x72e <sd_response+0xc4>
     72a:	88 e6       	ldi	r24, 0x68	; 104
     72c:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '5')) rspn = 105;		// Sector size isn't available
     72e:	b1 e0       	ldi	r27, 0x01	; 1
     730:	35 33       	cpi	r19, 0x35	; 53
     732:	09 f0       	breq	.+2      	; 0x736 <sd_response+0xcc>
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	22 23       	and	r18, r18
     738:	21 f0       	breq	.+8      	; 0x742 <sd_response+0xd8>
     73a:	bb 23       	and	r27, r27
     73c:	11 f0       	breq	.+4      	; 0x742 <sd_response+0xd8>
     73e:	89 e6       	ldi	r24, 0x69	; 105
     740:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '6')) rspn = 106;		// Sector count isn't available
     742:	a1 e0       	ldi	r26, 0x01	; 1
     744:	36 33       	cpi	r19, 0x36	; 54
     746:	09 f0       	breq	.+2      	; 0x74a <sd_response+0xe0>
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	22 23       	and	r18, r18
     74c:	21 f0       	breq	.+8      	; 0x756 <sd_response+0xec>
     74e:	aa 23       	and	r26, r26
     750:	11 f0       	breq	.+4      	; 0x756 <sd_response+0xec>
     752:	8a e6       	ldi	r24, 0x6A	; 106
     754:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '7')) rspn = 107;		// File or directory not exist
     756:	f1 e0       	ldi	r31, 0x01	; 1
     758:	37 33       	cpi	r19, 0x37	; 55
     75a:	09 f0       	breq	.+2      	; 0x75e <sd_response+0xf4>
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	22 23       	and	r18, r18
     760:	21 f0       	breq	.+8      	; 0x76a <sd_response+0x100>
     762:	ff 23       	and	r31, r31
     764:	11 f0       	breq	.+4      	; 0x76a <sd_response+0x100>
     766:	8b e6       	ldi	r24, 0x6B	; 107
     768:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '8')) rspn = 108;		// File isn't open
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	38 33       	cpi	r19, 0x38	; 56
     76e:	09 f0       	breq	.+2      	; 0x772 <sd_response+0x108>
     770:	e0 e0       	ldi	r30, 0x00	; 0
     772:	22 23       	and	r18, r18
     774:	21 f0       	breq	.+8      	; 0x77e <sd_response+0x114>
     776:	ee 23       	and	r30, r30
     778:	11 f0       	breq	.+4      	; 0x77e <sd_response+0x114>
     77a:	8c e6       	ldi	r24, 0x6C	; 108
     77c:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '9')) rspn = 109;		// File already is open
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	39 33       	cpi	r19, 0x39	; 57
     782:	09 f0       	breq	.+2      	; 0x786 <sd_response+0x11c>
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	22 23       	and	r18, r18
     788:	21 f0       	breq	.+8      	; 0x792 <sd_response+0x128>
     78a:	66 23       	and	r22, r22
     78c:	11 f0       	breq	.+4      	; 0x792 <sd_response+0x128>
     78e:	8d e6       	ldi	r24, 0x6D	; 109
     790:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '0')) rspn = 110;		// Invalid Filename & File extension or Directory Name
     792:	21 e0       	ldi	r18, 0x01	; 1
     794:	51 33       	cpi	r21, 0x31	; 49
     796:	09 f0       	breq	.+2      	; 0x79a <sd_response+0x130>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	24 23       	and	r18, r20
     79c:	21 f0       	breq	.+8      	; 0x7a6 <sd_response+0x13c>
     79e:	77 23       	and	r23, r23
     7a0:	11 f0       	breq	.+4      	; 0x7a6 <sd_response+0x13c>
     7a2:	8e e6       	ldi	r24, 0x6E	; 110
     7a4:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '1')) rspn = 111;		// Capacity does not Initialize
     7a6:	22 23       	and	r18, r18
     7a8:	21 f0       	breq	.+8      	; 0x7b2 <sd_response+0x148>
     7aa:	00 23       	and	r16, r16
     7ac:	11 f0       	breq	.+4      	; 0x7b2 <sd_response+0x148>
     7ae:	8f e6       	ldi	r24, 0x6F	; 111
     7b0:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '2')) rspn = 112;		// Append Length >512 byte
     7b2:	22 23       	and	r18, r18
     7b4:	21 f0       	breq	.+8      	; 0x7be <sd_response+0x154>
     7b6:	11 23       	and	r17, r17
     7b8:	11 f0       	breq	.+4      	; 0x7be <sd_response+0x154>
     7ba:	80 e7       	ldi	r24, 0x70	; 112
     7bc:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '3')) rspn = 113;		// Error in saving data
     7be:	22 23       	and	r18, r18
     7c0:	21 f0       	breq	.+8      	; 0x7ca <sd_response+0x160>
     7c2:	dd 23       	and	r29, r29
     7c4:	11 f0       	breq	.+4      	; 0x7ca <sd_response+0x160>
     7c6:	81 e7       	ldi	r24, 0x71	; 113
     7c8:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '4')) rspn = 114;		// File Not Close
     7ca:	22 23       	and	r18, r18
     7cc:	21 f0       	breq	.+8      	; 0x7d6 <sd_response+0x16c>
     7ce:	cc 23       	and	r28, r28
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <sd_response+0x16c>
     7d2:	82 e7       	ldi	r24, 0x72	; 114
     7d4:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '5')) rspn = 115;		// Error in get free size
     7d6:	22 23       	and	r18, r18
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <sd_response+0x178>
     7da:	bb 23       	and	r27, r27
     7dc:	11 f0       	breq	.+4      	; 0x7e2 <sd_response+0x178>
     7de:	83 e7       	ldi	r24, 0x73	; 115
     7e0:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '6')) rspn = 116;		// Read Length >512 byte
     7e2:	22 23       	and	r18, r18
     7e4:	21 f0       	breq	.+8      	; 0x7ee <sd_response+0x184>
     7e6:	aa 23       	and	r26, r26
     7e8:	11 f0       	breq	.+4      	; 0x7ee <sd_response+0x184>
     7ea:	84 e7       	ldi	r24, 0x74	; 116
     7ec:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '7')) rspn = 117;		// Start point is out of file > file size
     7ee:	22 23       	and	r18, r18
     7f0:	21 f0       	breq	.+8      	; 0x7fa <sd_response+0x190>
     7f2:	ff 23       	and	r31, r31
     7f4:	11 f0       	breq	.+4      	; 0x7fa <sd_response+0x190>
     7f6:	85 e7       	ldi	r24, 0x75	; 117
     7f8:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '8')) rspn = 118;		// Body is out of EOF
     7fa:	22 23       	and	r18, r18
     7fc:	21 f0       	breq	.+8      	; 0x806 <sd_response+0x19c>
     7fe:	ee 23       	and	r30, r30
     800:	11 f0       	breq	.+4      	; 0x806 <sd_response+0x19c>
     802:	86 e7       	ldi	r24, 0x76	; 118
     804:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '1') & (rcv[2] == '9')) rspn = 119;		// Invalid replace length or >512 bytes
     806:	22 23       	and	r18, r18
     808:	21 f0       	breq	.+8      	; 0x812 <sd_response+0x1a8>
     80a:	66 23       	and	r22, r22
     80c:	11 f0       	breq	.+4      	; 0x812 <sd_response+0x1a8>
     80e:	87 e7       	ldi	r24, 0x77	; 119
     810:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '0')) rspn = 120;		// Dismount error
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	52 33       	cpi	r21, 0x32	; 50
     816:	09 f0       	breq	.+2      	; 0x81a <sd_response+0x1b0>
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	24 23       	and	r18, r20
     81c:	21 f0       	breq	.+8      	; 0x826 <sd_response+0x1bc>
     81e:	77 23       	and	r23, r23
     820:	11 f0       	breq	.+4      	; 0x826 <sd_response+0x1bc>
     822:	88 e7       	ldi	r24, 0x78	; 120
     824:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '1')) rspn = 121;		// Long file name
     826:	22 23       	and	r18, r18
     828:	21 f0       	breq	.+8      	; 0x832 <sd_response+0x1c8>
     82a:	00 23       	and	r16, r16
     82c:	11 f0       	breq	.+4      	; 0x832 <sd_response+0x1c8>
     82e:	89 e7       	ldi	r24, 0x79	; 121
     830:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '2')) rspn = 122;		// File is read only
     832:	22 23       	and	r18, r18
     834:	21 f0       	breq	.+8      	; 0x83e <sd_response+0x1d4>
     836:	11 23       	and	r17, r17
     838:	11 f0       	breq	.+4      	; 0x83e <sd_response+0x1d4>
     83a:	8a e7       	ldi	r24, 0x7A	; 122
     83c:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '3')) rspn = 123;		// Directory isn't empty
     83e:	22 23       	and	r18, r18
     840:	21 f0       	breq	.+8      	; 0x84a <sd_response+0x1e0>
     842:	dd 23       	and	r29, r29
     844:	11 f0       	breq	.+4      	; 0x84a <sd_response+0x1e0>
     846:	8b e7       	ldi	r24, 0x7B	; 123
     848:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '4')) rspn = 124;		// Old & new file or directory name error
     84a:	22 23       	and	r18, r18
     84c:	21 f0       	breq	.+8      	; 0x856 <sd_response+0x1ec>
     84e:	cc 23       	and	r28, r28
     850:	11 f0       	breq	.+4      	; 0x856 <sd_response+0x1ec>
     852:	8c e7       	ldi	r24, 0x7C	; 124
     854:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '5')) rspn = 125;		// Old file or directory name error
     856:	22 23       	and	r18, r18
     858:	21 f0       	breq	.+8      	; 0x862 <sd_response+0x1f8>
     85a:	bb 23       	and	r27, r27
     85c:	11 f0       	breq	.+4      	; 0x862 <sd_response+0x1f8>
     85e:	8d e7       	ldi	r24, 0x7D	; 125
     860:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '6')) rspn = 126;		// New file or directory name error
     862:	22 23       	and	r18, r18
     864:	21 f0       	breq	.+8      	; 0x86e <sd_response+0x204>
     866:	aa 23       	and	r26, r26
     868:	11 f0       	breq	.+4      	; 0x86e <sd_response+0x204>
     86a:	8e e7       	ldi	r24, 0x7E	; 126
     86c:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '7')) rspn = 127;		// File or directory already is exist
     86e:	22 23       	and	r18, r18
     870:	21 f0       	breq	.+8      	; 0x87a <sd_response+0x210>
     872:	ff 23       	and	r31, r31
     874:	11 f0       	breq	.+4      	; 0x87a <sd_response+0x210>
     876:	8f e7       	ldi	r24, 0x7F	; 127
     878:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '8')) rspn = 128;		// Path is not exist
     87a:	22 23       	and	r18, r18
     87c:	21 f0       	breq	.+8      	; 0x886 <sd_response+0x21c>
     87e:	ee 23       	and	r30, r30
     880:	11 f0       	breq	.+4      	; 0x886 <sd_response+0x21c>
     882:	80 e8       	ldi	r24, 0x80	; 128
     884:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '9')) rspn = 129;		// File is not open
     886:	22 23       	and	r18, r18
     888:	21 f0       	breq	.+8      	; 0x892 <sd_response+0x228>
     88a:	66 23       	and	r22, r22
     88c:	11 f0       	breq	.+4      	; 0x892 <sd_response+0x228>
     88e:	81 e8       	ldi	r24, 0x81	; 129
     890:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '0')) rspn = 130;		// Set attribute error
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	53 33       	cpi	r21, 0x33	; 51
     896:	09 f0       	breq	.+2      	; 0x89a <sd_response+0x230>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	24 23       	and	r18, r20
     89c:	21 f0       	breq	.+8      	; 0x8a6 <sd_response+0x23c>
     89e:	77 23       	and	r23, r23
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <sd_response+0x23c>
     8a2:	82 e8       	ldi	r24, 0x82	; 130
     8a4:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '1')) rspn = 131;		// Clear attribute error
     8a6:	22 23       	and	r18, r18
     8a8:	21 f0       	breq	.+8      	; 0x8b2 <sd_response+0x248>
     8aa:	00 23       	and	r16, r16
     8ac:	11 f0       	breq	.+4      	; 0x8b2 <sd_response+0x248>
     8ae:	83 e8       	ldi	r24, 0x83	; 131
     8b0:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '2')) rspn = 132;		// Attribute parameter error
     8b2:	22 23       	and	r18, r18
     8b4:	21 f0       	breq	.+8      	; 0x8be <sd_response+0x254>
     8b6:	11 23       	and	r17, r17
     8b8:	11 f0       	breq	.+4      	; 0x8be <sd_response+0x254>
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '3')) rspn = 133;		// Time attribute is not set
     8be:	22 23       	and	r18, r18
     8c0:	21 f0       	breq	.+8      	; 0x8ca <sd_response+0x260>
     8c2:	dd 23       	and	r29, r29
     8c4:	11 f0       	breq	.+4      	; 0x8ca <sd_response+0x260>
     8c6:	85 e8       	ldi	r24, 0x85	; 133
     8c8:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '4')) rspn = 134;		// Hour >23
     8ca:	22 23       	and	r18, r18
     8cc:	21 f0       	breq	.+8      	; 0x8d6 <sd_response+0x26c>
     8ce:	cc 23       	and	r28, r28
     8d0:	11 f0       	breq	.+4      	; 0x8d6 <sd_response+0x26c>
     8d2:	86 e8       	ldi	r24, 0x86	; 134
     8d4:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '5')) rspn = 135;		// Minute >59
     8d6:	22 23       	and	r18, r18
     8d8:	21 f0       	breq	.+8      	; 0x8e2 <sd_response+0x278>
     8da:	bb 23       	and	r27, r27
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <sd_response+0x278>
     8de:	87 e8       	ldi	r24, 0x87	; 135
     8e0:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '6')) rspn = 136;		// Second >59
     8e2:	22 23       	and	r18, r18
     8e4:	21 f0       	breq	.+8      	; 0x8ee <sd_response+0x284>
     8e6:	aa 23       	and	r26, r26
     8e8:	11 f0       	breq	.+4      	; 0x8ee <sd_response+0x284>
     8ea:	88 e8       	ldi	r24, 0x88	; 136
     8ec:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '7')) rspn = 137;		// Month is not valid >12 or = 0
     8ee:	22 23       	and	r18, r18
     8f0:	21 f0       	breq	.+8      	; 0x8fa <sd_response+0x290>
     8f2:	ff 23       	and	r31, r31
     8f4:	11 f0       	breq	.+4      	; 0x8fa <sd_response+0x290>
     8f6:	89 e8       	ldi	r24, 0x89	; 137
     8f8:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '8')) rspn = 138;		// Day is not valid >31 or = 0
     8fa:	22 23       	and	r18, r18
     8fc:	21 f0       	breq	.+8      	; 0x906 <sd_response+0x29c>
     8fe:	ee 23       	and	r30, r30
     900:	11 f0       	breq	.+4      	; 0x906 <sd_response+0x29c>
     902:	8a e8       	ldi	r24, 0x8A	; 138
     904:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '3') & (rcv[2] == '9')) rspn = 139;		// Dir error
     906:	22 23       	and	r18, r18
     908:	21 f0       	breq	.+8      	; 0x912 <sd_response+0x2a8>
     90a:	66 23       	and	r22, r22
     90c:	11 f0       	breq	.+4      	; 0x912 <sd_response+0x2a8>
     90e:	8b e8       	ldi	r24, 0x8B	; 139
     910:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '4') & (rcv[2] == '0')) rspn = 140;		// Access denied
     912:	74 23       	and	r23, r20
     914:	41 f0       	breq	.+16     	; 0x926 <sd_response+0x2bc>
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	54 33       	cpi	r21, 0x34	; 52
     91a:	09 f0       	breq	.+2      	; 0x91e <sd_response+0x2b4>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	22 23       	and	r18, r18
     920:	11 f0       	breq	.+4      	; 0x926 <sd_response+0x2bc>
     922:	8c e8       	ldi	r24, 0x8C	; 140
     924:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '9') & (rcv[2] == '9')) rspn = 199;		// Wrong Command
     926:	46 23       	and	r20, r22
     928:	41 f0       	breq	.+16     	; 0x93a <sd_response+0x2d0>
     92a:	21 e0       	ldi	r18, 0x01	; 1
     92c:	59 33       	cpi	r21, 0x39	; 57
     92e:	09 f0       	breq	.+2      	; 0x932 <sd_response+0x2c8>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	22 23       	and	r18, r18
     934:	11 f0       	breq	.+4      	; 0x93a <sd_response+0x2d0>
     936:	87 ec       	ldi	r24, 0xC7	; 199
     938:	90 e0       	ldi	r25, 0x00	; 0
	i = 0;
     93a:	10 92 4f 02 	sts	0x024F, r1
     93e:	10 92 4e 02 	sts	0x024E, r1
	return rspn;	
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <sd_open>:
void sd_open (unsigned int len , char *fil)
{
     94c:	e4 ea       	ldi	r30, 0xA4	; 164
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	20 eb       	ldi	r18, 0xB0	; 176
     952:	30 e0       	ldi	r19, 0x00	; 0
	for (int a=0; a<6; a++)
	{
		UDR = open[a];
     954:	40 81       	ld	r20, Z
     956:	32 96       	adiw	r30, 0x02	; 2
     958:	4c b9       	out	0x0c, r20	; 12
     95a:	af ec       	ldi	r26, 0xCF	; 207
     95c:	b7 e0       	ldi	r27, 0x07	; 7
     95e:	11 97       	sbiw	r26, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <sd_open+0x12>
     962:	00 c0       	rjmp	.+0      	; 0x964 <sd_open+0x18>
     964:	00 00       	nop
	i = 0;
	return rspn;	
}
void sd_open (unsigned int len , char *fil)
{
	for (int a=0; a<6; a++)
     966:	e2 17       	cp	r30, r18
     968:	f3 07       	cpc	r31, r19
     96a:	a1 f7       	brne	.-24     	; 0x954 <sd_open+0x8>
	{
		UDR = open[a];
		_delay_ms(1);
	}
	for (int b=0; b<len; b++)
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	a9 f0       	breq	.+42     	; 0x99a <sd_open+0x4e>
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
	{
		UDR = fil[b];
     978:	fb 01       	movw	r30, r22
     97a:	e4 0f       	add	r30, r20
     97c:	f5 1f       	adc	r31, r21
     97e:	40 81       	ld	r20, Z
     980:	4c b9       	out	0x0c, r20	; 12
     982:	ef ec       	ldi	r30, 0xCF	; 207
     984:	f7 e0       	ldi	r31, 0x07	; 7
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <sd_open+0x3a>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <sd_open+0x40>
     98c:	00 00       	nop
	for (int a=0; a<6; a++)
	{
		UDR = open[a];
		_delay_ms(1);
	}
	for (int b=0; b<len; b++)
     98e:	2f 5f       	subi	r18, 0xFF	; 255
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	a9 01       	movw	r20, r18
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	79 f7       	brne	.-34     	; 0x978 <sd_open+0x2c>
	{
		UDR = fil[b];
		_delay_ms(1);
	}
	UDR = 0x0D;
     99a:	8d e0       	ldi	r24, 0x0D	; 13
     99c:	8c b9       	out	0x0c, r24	; 12
     99e:	8f ec       	ldi	r24, 0xCF	; 207
     9a0:	97 e0       	ldi	r25, 0x07	; 7
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <sd_open+0x56>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <sd_open+0x5c>
     9a8:	00 00       	nop
	_delay_ms(1);
	UDR = 0x0A;
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	8c b9       	out	0x0c, r24	; 12
     9ae:	af ec       	ldi	r26, 0xCF	; 207
     9b0:	b7 e0       	ldi	r27, 0x07	; 7
     9b2:	11 97       	sbiw	r26, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <sd_open+0x66>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <sd_open+0x6c>
     9b8:	00 00       	nop
     9ba:	08 95       	ret

000009bc <sd_append>:
	}
}*/


void sd_append (unsigned int len , char *dat)
{
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <sd_append+0x12>
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	6c 01       	movw	r12, r24
     9d4:	7b 01       	movw	r14, r22
	//unsigned int le = 0;
	char lec[2];
	//if (len < 10) le = 1;
	//if (len > 9)  le = 2;
	//if (len > 99) le = 3;
	itoa(len , lec , 10);
     9d6:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9d8:	4a e0       	ldi	r20, 0x0A	; 10
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	0e 94 47 18 	call	0x308e	; 0x308e <__itoa_ncheck>
     9e4:	e4 e9       	ldi	r30, 0x94	; 148
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	24 ea       	ldi	r18, 0xA4	; 164
     9ea:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int a=0; a<8; a++)
	{
		UDR = append[a];
     9ec:	80 81       	ld	r24, Z
     9ee:	32 96       	adiw	r30, 0x02	; 2
     9f0:	8c b9       	out	0x0c, r24	; 12
     9f2:	8f ec       	ldi	r24, 0xCF	; 207
     9f4:	97 e0       	ldi	r25, 0x07	; 7
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <sd_append+0x3a>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <sd_append+0x40>
     9fc:	00 00       	nop
	//if (len < 10) le = 1;
	//if (len > 9)  le = 2;
	//if (len > 99) le = 3;
	itoa(len , lec , 10);
	
	for (int a=0; a<8; a++)
     9fe:	e2 17       	cp	r30, r18
     a00:	f3 07       	cpc	r31, r19
     a02:	a1 f7       	brne	.-24     	; 0x9ec <sd_append+0x30>
		UDR = append[a];
		_delay_ms(1);
	}
	for (int b=0; b<2; b++)
	{
		UDR = lec[b];
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	8c b9       	out	0x0c, r24	; 12
     a08:	ef ec       	ldi	r30, 0xCF	; 207
     a0a:	f7 e0       	ldi	r31, 0x07	; 7
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <sd_append+0x50>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <sd_append+0x56>
     a12:	00 00       	nop
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	8c b9       	out	0x0c, r24	; 12
     a18:	8f ec       	ldi	r24, 0xCF	; 207
     a1a:	97 e0       	ldi	r25, 0x07	; 7
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <sd_append+0x60>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <sd_append+0x66>
     a22:	00 00       	nop
		_delay_ms(1);
	}
	UDR = 0x0D;
     a24:	8d e0       	ldi	r24, 0x0D	; 13
     a26:	8c b9       	out	0x0c, r24	; 12
     a28:	ef ec       	ldi	r30, 0xCF	; 207
     a2a:	f7 e0       	ldi	r31, 0x07	; 7
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <sd_append+0x70>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <sd_append+0x76>
     a32:	00 00       	nop
	_delay_ms(1);
	UDR = 0x0A;
     a34:	8a e0       	ldi	r24, 0x0A	; 10
     a36:	8c b9       	out	0x0c, r24	; 12
     a38:	8f ec       	ldi	r24, 0xCF	; 207
     a3a:	97 e0       	ldi	r25, 0x07	; 7
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <sd_append+0x80>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <sd_append+0x86>
     a42:	00 00       	nop
	_delay_ms(1);
	for (int c=0; c<len; c++)
     a44:	cd 28       	or	r12, r13
     a46:	a1 f0       	breq	.+40     	; 0xa70 <sd_append+0xb4>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
	{
		UDR = dat[c];
     a50:	f7 01       	movw	r30, r14
     a52:	e2 0f       	add	r30, r18
     a54:	f3 1f       	adc	r31, r19
     a56:	20 81       	ld	r18, Z
     a58:	2c b9       	out	0x0c, r18	; 12
     a5a:	ef ec       	ldi	r30, 0xCF	; 207
     a5c:	f7 e0       	ldi	r31, 0x07	; 7
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <sd_append+0xa2>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <sd_append+0xa8>
     a64:	00 00       	nop
	}
	UDR = 0x0D;
	_delay_ms(1);
	UDR = 0x0A;
	_delay_ms(1);
	for (int c=0; c<len; c++)
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	9c 01       	movw	r18, r24
     a6a:	08 17       	cp	r16, r24
     a6c:	19 07       	cpc	r17, r25
     a6e:	81 f7       	brne	.-32     	; 0xa50 <sd_append+0x94>
	{
		UDR = dat[c];
		_delay_ms(1);
	}
	UDR = 0x0D;
     a70:	8d e0       	ldi	r24, 0x0D	; 13
     a72:	8c b9       	out	0x0c, r24	; 12
     a74:	8f ec       	ldi	r24, 0xCF	; 207
     a76:	97 e0       	ldi	r25, 0x07	; 7
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <sd_append+0xbc>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <sd_append+0xc2>
     a7e:	00 00       	nop
	_delay_ms(1);
	UDR = 0x0A;
     a80:	8a e0       	ldi	r24, 0x0A	; 10
     a82:	8c b9       	out	0x0c, r24	; 12
     a84:	ef ec       	ldi	r30, 0xCF	; 207
     a86:	f7 e0       	ldi	r31, 0x07	; 7
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <sd_append+0xcc>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <sd_append+0xd2>
     a8e:	00 00       	nop
	_delay_ms(1);
}
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	08 95       	ret

00000aa6 <sd_fnexist>:
		_delay_ms(1);
	}
}
int sd_fnexist (unsigned int len , char *dir)
{
	i = 0;
     aa6:	10 92 4f 02 	sts	0x024F, r1
     aaa:	10 92 4e 02 	sts	0x024E, r1
     aae:	e2 e8       	ldi	r30, 0x82	; 130
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	24 e9       	ldi	r18, 0x94	; 148
     ab4:	30 e0       	ldi	r19, 0x00	; 0
	int rspn = 0;
	for (int a=0; a<9; a++)
	{
		UDR = exist[a];
     ab6:	40 81       	ld	r20, Z
     ab8:	32 96       	adiw	r30, 0x02	; 2
     aba:	4c b9       	out	0x0c, r20	; 12
     abc:	af ec       	ldi	r26, 0xCF	; 207
     abe:	b7 e0       	ldi	r27, 0x07	; 7
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <sd_fnexist+0x1a>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <sd_fnexist+0x20>
     ac6:	00 00       	nop
}
int sd_fnexist (unsigned int len , char *dir)
{
	i = 0;
	int rspn = 0;
	for (int a=0; a<9; a++)
     ac8:	e2 17       	cp	r30, r18
     aca:	f3 07       	cpc	r31, r19
     acc:	a1 f7       	brne	.-24     	; 0xab6 <sd_fnexist+0x10>
	{
		UDR = exist[a];
		_delay_ms(1);
	}
	for (int b=0; b<len; b++)
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	a9 f0       	breq	.+42     	; 0xafc <sd_fnexist+0x56>
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
	{
		UDR = dir[b];
     ada:	fb 01       	movw	r30, r22
     adc:	e4 0f       	add	r30, r20
     ade:	f5 1f       	adc	r31, r21
     ae0:	40 81       	ld	r20, Z
     ae2:	4c b9       	out	0x0c, r20	; 12
     ae4:	ef ec       	ldi	r30, 0xCF	; 207
     ae6:	f7 e0       	ldi	r31, 0x07	; 7
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <sd_fnexist+0x42>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <sd_fnexist+0x48>
     aee:	00 00       	nop
	for (int a=0; a<9; a++)
	{
		UDR = exist[a];
		_delay_ms(1);
	}
	for (int b=0; b<len; b++)
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	a9 01       	movw	r20, r18
     af6:	28 17       	cp	r18, r24
     af8:	39 07       	cpc	r19, r25
     afa:	79 f7       	brne	.-34     	; 0xada <sd_fnexist+0x34>
	{
		UDR = dir[b];
		_delay_ms(1);
	}
	UDR = 0x0D;
     afc:	8d e0       	ldi	r24, 0x0D	; 13
     afe:	8c b9       	out	0x0c, r24	; 12
     b00:	8f ec       	ldi	r24, 0xCF	; 207
     b02:	97 e0       	ldi	r25, 0x07	; 7
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <sd_fnexist+0x5e>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <sd_fnexist+0x64>
     b0a:	00 00       	nop
	_delay_ms(1);
	UDR = 0x0A;
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	8c b9       	out	0x0c, r24	; 12
     b10:	9f ef       	ldi	r25, 0xFF	; 255
     b12:	a1 ee       	ldi	r26, 0xE1	; 225
     b14:	b4 e0       	ldi	r27, 0x04	; 4
     b16:	91 50       	subi	r25, 0x01	; 1
     b18:	a0 40       	sbci	r26, 0x00	; 0
     b1a:	b0 40       	sbci	r27, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <sd_fnexist+0x70>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <sd_fnexist+0x7a>
     b20:	00 00       	nop
	_delay_ms(200);
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '7')) rspn = 107;		// File or directory not exist
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	80 91 c1 02 	lds	r24, 0x02C1
     b28:	81 33       	cpi	r24, 0x31	; 49
     b2a:	09 f0       	breq	.+2      	; 0xb2e <sd_fnexist+0x88>
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	40 91 c2 02 	lds	r20, 0x02C2
     b32:	31 e0       	ldi	r19, 0x01	; 1
     b34:	80 91 c3 02 	lds	r24, 0x02C3
     b38:	87 33       	cpi	r24, 0x37	; 55
     b3a:	09 f0       	breq	.+2      	; 0xb3e <sd_fnexist+0x98>
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	40 33       	cpi	r20, 0x30	; 48
     b42:	09 f0       	breq	.+2      	; 0xb46 <sd_fnexist+0xa0>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	82 23       	and	r24, r18
     b48:	11 f0       	breq	.+4      	; 0xb4e <sd_fnexist+0xa8>
     b4a:	31 11       	cpse	r19, r1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <sd_fnexist+0xae>
	}
}
int sd_fnexist (unsigned int len , char *dir)
{
	i = 0;
	int rspn = 0;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <sd_fnexist+0xb2>
	}
	UDR = 0x0D;
	_delay_ms(1);
	UDR = 0x0A;
	_delay_ms(200);
	if ((rcv[0] == '1') & (rcv[1] == '0') & (rcv[2] == '7')) rspn = 107;		// File or directory not exist
     b54:	8b e6       	ldi	r24, 0x6B	; 107
     b56:	90 e0       	ldi	r25, 0x00	; 0
	if ((rcv[0] == '1') & (rcv[1] == '2') & (rcv[2] == '7')) rspn = 127;		// File or directory already is exist	
     b58:	23 23       	and	r18, r19
     b5a:	41 f0       	breq	.+16     	; 0xb6c <sd_fnexist+0xc6>
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	42 33       	cpi	r20, 0x32	; 50
     b60:	09 f0       	breq	.+2      	; 0xb64 <sd_fnexist+0xbe>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	22 23       	and	r18, r18
     b66:	11 f0       	breq	.+4      	; 0xb6c <sd_fnexist+0xc6>
     b68:	8f e7       	ldi	r24, 0x7F	; 127
     b6a:	90 e0       	ldi	r25, 0x00	; 0
	i = 0;
     b6c:	10 92 4f 02 	sts	0x024F, r1
     b70:	10 92 4e 02 	sts	0x024E, r1
	return rspn;
}
     b74:	08 95       	ret

00000b76 <sd_new>:
void sd_new (unsigned int len , char *fil)
{
     b76:	e8 e7       	ldi	r30, 0x78	; 120
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	22 e8       	ldi	r18, 0x82	; 130
     b7c:	30 e0       	ldi	r19, 0x00	; 0
	for (int a=0; a<5; a++)
	{
		UDR = new[a];
     b7e:	40 81       	ld	r20, Z
     b80:	32 96       	adiw	r30, 0x02	; 2
     b82:	4c b9       	out	0x0c, r20	; 12
     b84:	af ec       	ldi	r26, 0xCF	; 207
     b86:	b7 e0       	ldi	r27, 0x07	; 7
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <sd_new+0x12>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <sd_new+0x18>
     b8e:	00 00       	nop
	i = 0;
	return rspn;
}
void sd_new (unsigned int len , char *fil)
{
	for (int a=0; a<5; a++)
     b90:	e2 17       	cp	r30, r18
     b92:	f3 07       	cpc	r31, r19
     b94:	a1 f7       	brne	.-24     	; 0xb7e <sd_new+0x8>
	{
		UDR = new[a];
		_delay_ms(1);
	}
	for (int b=0; b<len; b++)
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a9 f0       	breq	.+42     	; 0xbc4 <sd_new+0x4e>
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
	{
		UDR = fil[b];
     ba2:	fb 01       	movw	r30, r22
     ba4:	e4 0f       	add	r30, r20
     ba6:	f5 1f       	adc	r31, r21
     ba8:	40 81       	ld	r20, Z
     baa:	4c b9       	out	0x0c, r20	; 12
     bac:	ef ec       	ldi	r30, 0xCF	; 207
     bae:	f7 e0       	ldi	r31, 0x07	; 7
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <sd_new+0x3a>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <sd_new+0x40>
     bb6:	00 00       	nop
	for (int a=0; a<5; a++)
	{
		UDR = new[a];
		_delay_ms(1);
	}
	for (int b=0; b<len; b++)
     bb8:	2f 5f       	subi	r18, 0xFF	; 255
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	a9 01       	movw	r20, r18
     bbe:	28 17       	cp	r18, r24
     bc0:	39 07       	cpc	r19, r25
     bc2:	79 f7       	brne	.-34     	; 0xba2 <sd_new+0x2c>
	{
		UDR = fil[b];
		_delay_ms(1);
	}
	UDR = 0x0D;
     bc4:	8d e0       	ldi	r24, 0x0D	; 13
     bc6:	8c b9       	out	0x0c, r24	; 12
     bc8:	8f ec       	ldi	r24, 0xCF	; 207
     bca:	97 e0       	ldi	r25, 0x07	; 7
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <sd_new+0x56>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <sd_new+0x5c>
     bd2:	00 00       	nop
	_delay_ms(1);
	UDR = 0x0A;
     bd4:	8a e0       	ldi	r24, 0x0A	; 10
     bd6:	8c b9       	out	0x0c, r24	; 12
     bd8:	af ec       	ldi	r26, 0xCF	; 207
     bda:	b7 e0       	ldi	r27, 0x07	; 7
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <sd_new+0x66>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <sd_new+0x6c>
     be2:	00 00       	nop
     be4:	08 95       	ret

00000be6 <receive>:
#define plc_enable		(PORTC &= ~(1<<7))	// PLC Enable
#define msd_disable		(PORTC |= (1<<6))	// MicroSD Disable
#define msd_enable		(PORTC &= ~(1<<6))	// MicroSD Enable

void receive (void)
{
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
	if (mode != 1) { mode = 1; nrf_config(mode); }
     bea:	80 91 76 00 	lds	r24, 0x0076
     bee:	90 91 77 00 	lds	r25, 0x0077
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	41 f0       	breq	.+16     	; 0xc06 <receive+0x20>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 77 00 	sts	0x0077, r25
     bfe:	80 93 76 00 	sts	0x0076, r24
     c02:	0e 94 8c 02 	call	0x518	; 0x518 <nrf_config>
	if (nrf_state == 1)
     c06:	80 91 52 02 	lds	r24, 0x0252
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	d9 f4       	brne	.+54     	; 0xc44 <receive+0x5e>
	{
		PORTA |= (1<<6);
     c0e:	de 9a       	sbi	0x1b, 6	; 27
		rcve = 1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	90 93 4b 02 	sts	0x024B, r25
     c18:	80 93 4a 02 	sts	0x024A, r24
     c1c:	e2 ed       	ldi	r30, 0xD2	; 210
     c1e:	f2 e0       	ldi	r31, 0x02	; 2
     c20:	a6 e5       	ldi	r26, 0x56	; 86
     c22:	b2 e0       	ldi	r27, 0x02	; 2
     c24:	8c ed       	ldi	r24, 0xDC	; 220
     c26:	92 e0       	ldi	r25, 0x02	; 2
		for (int i=1; i<11; i++)
		{
			bufi[i] = payload[i];
     c28:	21 91       	ld	r18, Z+
     c2a:	2d 93       	st	X+, r18
     c2c:	cf ec       	ldi	r28, 0xCF	; 207
     c2e:	d7 e0       	ldi	r29, 0x07	; 7
     c30:	21 97       	sbiw	r28, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <receive+0x4a>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <receive+0x50>
     c36:	00 00       	nop
	if (mode != 1) { mode = 1; nrf_config(mode); }
	if (nrf_state == 1)
	{
		PORTA |= (1<<6);
		rcve = 1;
		for (int i=1; i<11; i++)
     c38:	e8 17       	cp	r30, r24
     c3a:	f9 07       	cpc	r31, r25
     c3c:	a9 f7       	brne	.-22     	; 0xc28 <receive+0x42>
		{
			bufi[i] = payload[i];
			_delay_ms(1);
		}
		nrf_state = 0;
     c3e:	10 92 52 02 	sts	0x0252, r1
		PORTA &= ~(1<<6);
     c42:	de 98       	cbi	0x1b, 6	; 27
     c44:	8f e1       	ldi	r24, 0x1F	; 31
     c46:	9e e4       	ldi	r25, 0x4E	; 78
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <receive+0x62>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <receive+0x68>
     c4e:	00 00       	nop
	}
	_delay_ms(10);
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <transmit>:
void transmit (void)
{
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
	if (mode != 0) { mode = 0; nrf_config(mode); }
     c5a:	80 91 76 00 	lds	r24, 0x0076
     c5e:	90 91 77 00 	lds	r25, 0x0077
     c62:	89 2b       	or	r24, r25
     c64:	39 f0       	breq	.+14     	; 0xc74 <transmit+0x1e>
     c66:	10 92 77 00 	sts	0x0077, r1
     c6a:	10 92 76 00 	sts	0x0076, r1
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 8c 02 	call	0x518	; 0x518 <nrf_config>
	PORTA |= (1<<7);
     c74:	df 9a       	sbi	0x1b, 7	; 27
     c76:	a3 ea       	ldi	r26, 0xA3	; 163
     c78:	b2 e0       	ldi	r27, 0x02	; 2
     c7a:	e2 ed       	ldi	r30, 0xD2	; 210
     c7c:	f2 e0       	ldi	r31, 0x02	; 2
     c7e:	21 e0       	ldi	r18, 0x01	; 1
	for(int j=1; j<11; j++)
	{
		if (nrf_state != 0)
		{
			sent_actived = 1;
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	50 e0       	ldi	r21, 0x00	; 0
			nrf_state = 0;
		}
		payload[0] = j;
     c84:	c1 ed       	ldi	r28, 0xD1	; 209
     c86:	d2 e0       	ldi	r29, 0x02	; 2
{
	if (mode != 0) { mode = 0; nrf_config(mode); }
	PORTA |= (1<<7);
	for(int j=1; j<11; j++)
	{
		if (nrf_state != 0)
     c88:	30 91 52 02 	lds	r19, 0x0252
     c8c:	33 23       	and	r19, r19
     c8e:	31 f0       	breq	.+12     	; 0xc9c <transmit+0x46>
		{
			sent_actived = 1;
     c90:	50 93 51 02 	sts	0x0251, r21
     c94:	40 93 50 02 	sts	0x0250, r20
			nrf_state = 0;
     c98:	10 92 52 02 	sts	0x0252, r1
		}
		payload[0] = j;
     c9c:	28 83       	st	Y, r18
		payload[j] = bufo[j];
     c9e:	3d 91       	ld	r19, X+
     ca0:	31 93       	st	Z+, r19
     ca2:	8f ec       	ldi	r24, 0xCF	; 207
     ca4:	97 e0       	ldi	r25, 0x07	; 7
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <transmit+0x50>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <transmit+0x56>
     cac:	00 00       	nop
     cae:	2f 5f       	subi	r18, 0xFF	; 255
}
void transmit (void)
{
	if (mode != 0) { mode = 0; nrf_config(mode); }
	PORTA |= (1<<7);
	for(int j=1; j<11; j++)
     cb0:	2b 30       	cpi	r18, 0x0B	; 11
     cb2:	51 f7       	brne	.-44     	; 0xc88 <transmit+0x32>
		}
		payload[0] = j;
		payload[j] = bufo[j];
		_delay_ms(1);
	}
	sent();
     cb4:	0e 94 47 02 	call	0x48e	; 0x48e <sent>
	PORTA &= ~(1<<7);
     cb8:	df 98       	cbi	0x1b, 7	; 27
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <usartsnd>:
void usartsnd (void)
{
	if (eiac != 1)
     cc0:	80 91 1a 02 	lds	r24, 0x021A
     cc4:	90 91 1b 02 	lds	r25, 0x021B
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	09 f4       	brne	.+2      	; 0xcce <usartsnd+0xe>
     ccc:	1a c1       	rjmp	.+564    	; 0xf02 <usartsnd+0x242>
	{
		disp1 = ((dly << 4) | (rsid << 3) | (fin << 2) | (onid << 1) | ofak);
     cce:	20 91 1c 02 	lds	r18, 0x021C
     cd2:	30 91 1d 02 	lds	r19, 0x021D
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	80 91 28 02 	lds	r24, 0x0228
     ce6:	90 91 29 02 	lds	r25, 0x0229
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	82 2b       	or	r24, r18
     cf4:	93 2b       	or	r25, r19
     cf6:	20 91 3e 02 	lds	r18, 0x023E
     cfa:	30 91 3f 02 	lds	r19, 0x023F
     cfe:	82 2b       	or	r24, r18
     d00:	93 2b       	or	r25, r19
     d02:	20 91 38 02 	lds	r18, 0x0238
     d06:	30 91 39 02 	lds	r19, 0x0239
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	82 2b       	or	r24, r18
     d10:	93 2b       	or	r25, r19
     d12:	20 91 b8 02 	lds	r18, 0x02B8
     d16:	40 e1       	ldi	r20, 0x10	; 16
     d18:	24 9f       	mul	r18, r20
     d1a:	90 01       	movw	r18, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	82 2b       	or	r24, r18
     d20:	93 2b       	or	r25, r19
     d22:	90 93 21 02 	sts	0x0221, r25
     d26:	80 93 20 02 	sts	0x0220, r24
		disp2 = ((pg << 4) | tots);
     d2a:	80 91 30 02 	lds	r24, 0x0230
     d2e:	90 91 31 02 	lds	r25, 0x0231
     d32:	82 95       	swap	r24
     d34:	92 95       	swap	r25
     d36:	90 7f       	andi	r25, 0xF0	; 240
     d38:	98 27       	eor	r25, r24
     d3a:	80 7f       	andi	r24, 0xF0	; 240
     d3c:	98 27       	eor	r25, r24
     d3e:	20 91 3c 02 	lds	r18, 0x023C
     d42:	30 91 3d 02 	lds	r19, 0x023D
     d46:	82 2b       	or	r24, r18
     d48:	93 2b       	or	r25, r19
     d4a:	90 93 1f 02 	sts	0x021F, r25
     d4e:	80 93 1e 02 	sts	0x021E, r24
		dsc1 = (dsc & 0xFF); 	
     d52:	80 91 08 02 	lds	r24, 0x0208
     d56:	90 91 09 02 	lds	r25, 0x0209
     d5a:	9c 01       	movw	r18, r24
     d5c:	33 27       	eor	r19, r19
     d5e:	30 93 05 02 	sts	0x0205, r19
     d62:	20 93 04 02 	sts	0x0204, r18
		dsc2 = ((errs << 7) | (mems << 6) | (dsc >> 8));
     d66:	40 91 00 02 	lds	r20, 0x0200
     d6a:	50 91 01 02 	lds	r21, 0x0201
     d6e:	00 24       	eor	r0, r0
     d70:	56 95       	lsr	r21
     d72:	47 95       	ror	r20
     d74:	07 94       	ror	r0
     d76:	56 95       	lsr	r21
     d78:	47 95       	ror	r20
     d7a:	07 94       	ror	r0
     d7c:	54 2f       	mov	r21, r20
     d7e:	40 2d       	mov	r20, r0
     d80:	20 91 fe 01 	lds	r18, 0x01FE
     d84:	30 91 ff 01 	lds	r19, 0x01FF
     d88:	36 95       	lsr	r19
     d8a:	32 2f       	mov	r19, r18
     d8c:	22 27       	eor	r18, r18
     d8e:	37 95       	ror	r19
     d90:	27 95       	ror	r18
     d92:	42 2b       	or	r20, r18
     d94:	53 2b       	or	r21, r19
     d96:	29 2f       	mov	r18, r25
     d98:	33 27       	eor	r19, r19
     d9a:	ca 01       	movw	r24, r20
     d9c:	82 2b       	or	r24, r18
     d9e:	93 2b       	or	r25, r19
     da0:	90 93 03 02 	sts	0x0203, r25
     da4:	80 93 02 02 	sts	0x0202, r24
		//batss = ((bat - 222) / 4);
		UDR = 'C';
     da8:	83 e4       	ldi	r24, 0x43	; 67
     daa:	8c b9       	out	0x0c, r24	; 12
     dac:	8f ec       	ldi	r24, 0xCF	; 207
     dae:	97 e0       	ldi	r25, 0x07	; 7
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <usartsnd+0xf0>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <usartsnd+0xf6>
     db6:	00 00       	nop
		_delay_ms(1);
		UDR = bats;
     db8:	80 91 24 02 	lds	r24, 0x0224
     dbc:	8c b9       	out	0x0c, r24	; 12
     dbe:	8f ec       	ldi	r24, 0xCF	; 207
     dc0:	97 e0       	ldi	r25, 0x07	; 7
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <usartsnd+0x102>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <usartsnd+0x108>
     dc8:	00 00       	nop
		_delay_ms(1);
		UDR = sgn1u;
     dca:	80 91 60 02 	lds	r24, 0x0260
     dce:	8c b9       	out	0x0c, r24	; 12
     dd0:	8f ec       	ldi	r24, 0xCF	; 207
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <usartsnd+0x114>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <usartsnd+0x11a>
     dda:	00 00       	nop
		_delay_ms(1);
		UDR = dig1u;
     ddc:	80 91 bb 02 	lds	r24, 0x02BB
     de0:	8c b9       	out	0x0c, r24	; 12
     de2:	8f ec       	ldi	r24, 0xCF	; 207
     de4:	97 e0       	ldi	r25, 0x07	; 7
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <usartsnd+0x126>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <usartsnd+0x12c>
     dec:	00 00       	nop
		_delay_ms(1);
		UDR = r12u;
     dee:	80 91 b9 02 	lds	r24, 0x02B9
     df2:	8c b9       	out	0x0c, r24	; 12
     df4:	8f ec       	ldi	r24, 0xCF	; 207
     df6:	97 e0       	ldi	r25, 0x07	; 7
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <usartsnd+0x138>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <usartsnd+0x13e>
     dfe:	00 00       	nop
		_delay_ms(1);
		UDR = r13u;
     e00:	80 91 cd 02 	lds	r24, 0x02CD
     e04:	8c b9       	out	0x0c, r24	; 12
     e06:	8f ec       	ldi	r24, 0xCF	; 207
     e08:	97 e0       	ldi	r25, 0x07	; 7
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <usartsnd+0x14a>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <usartsnd+0x150>
     e10:	00 00       	nop
		_delay_ms(1);
		UDR = sgn2u;
     e12:	80 91 10 03 	lds	r24, 0x0310
     e16:	8c b9       	out	0x0c, r24	; 12
     e18:	8f ec       	ldi	r24, 0xCF	; 207
     e1a:	97 e0       	ldi	r25, 0x07	; 7
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <usartsnd+0x15c>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <usartsnd+0x162>
     e22:	00 00       	nop
		_delay_ms(1);
		UDR = dig2u;
     e24:	80 91 fc 02 	lds	r24, 0x02FC
     e28:	8c b9       	out	0x0c, r24	; 12
     e2a:	8f ec       	ldi	r24, 0xCF	; 207
     e2c:	97 e0       	ldi	r25, 0x07	; 7
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <usartsnd+0x16e>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <usartsnd+0x174>
     e34:	00 00       	nop
		_delay_ms(1);
		UDR = r22u;
     e36:	80 91 66 02 	lds	r24, 0x0266
     e3a:	8c b9       	out	0x0c, r24	; 12
     e3c:	8f ec       	ldi	r24, 0xCF	; 207
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <usartsnd+0x180>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <usartsnd+0x186>
     e46:	00 00       	nop
		_delay_ms(1);
		UDR = r23u;
     e48:	80 91 00 03 	lds	r24, 0x0300
     e4c:	8c b9       	out	0x0c, r24	; 12
     e4e:	8f ec       	ldi	r24, 0xCF	; 207
     e50:	97 e0       	ldi	r25, 0x07	; 7
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <usartsnd+0x192>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <usartsnd+0x198>
     e58:	00 00       	nop
		_delay_ms(1);
		UDR = id;
     e5a:	80 91 a0 02 	lds	r24, 0x02A0
     e5e:	8c b9       	out	0x0c, r24	; 12
     e60:	8f ec       	ldi	r24, 0xCF	; 207
     e62:	97 e0       	ldi	r25, 0x07	; 7
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <usartsnd+0x1a4>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <usartsnd+0x1aa>
     e6a:	00 00       	nop
		_delay_ms(1);
		UDR = disp1;
     e6c:	80 91 20 02 	lds	r24, 0x0220
     e70:	8c b9       	out	0x0c, r24	; 12
     e72:	8f ec       	ldi	r24, 0xCF	; 207
     e74:	97 e0       	ldi	r25, 0x07	; 7
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <usartsnd+0x1b6>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <usartsnd+0x1bc>
     e7c:	00 00       	nop
		_delay_ms(1);
		UDR = disp2;
     e7e:	80 91 1e 02 	lds	r24, 0x021E
     e82:	8c b9       	out	0x0c, r24	; 12
     e84:	8f ec       	ldi	r24, 0xCF	; 207
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <usartsnd+0x1c8>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <usartsnd+0x1ce>
     e8e:	00 00       	nop
		_delay_ms(1); 
		UDR = fnc;
     e90:	80 91 60 00 	lds	r24, 0x0060
     e94:	8c b9       	out	0x0c, r24	; 12
     e96:	8f ec       	ldi	r24, 0xCF	; 207
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <usartsnd+0x1da>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <usartsnd+0x1e0>
     ea0:	00 00       	nop
		_delay_ms(1);
		UDR = sdrsp; 
     ea2:	80 91 b6 02 	lds	r24, 0x02B6
     ea6:	8c b9       	out	0x0c, r24	; 12
     ea8:	8f ec       	ldi	r24, 0xCF	; 207
     eaa:	97 e0       	ldi	r25, 0x07	; 7
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <usartsnd+0x1ec>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <usartsnd+0x1f2>
     eb2:	00 00       	nop
		_delay_ms(1);
		UDR = dsc2;  
     eb4:	80 91 02 02 	lds	r24, 0x0202
     eb8:	8c b9       	out	0x0c, r24	; 12
     eba:	8f ec       	ldi	r24, 0xCF	; 207
     ebc:	97 e0       	ldi	r25, 0x07	; 7
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <usartsnd+0x1fe>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <usartsnd+0x204>
     ec4:	00 00       	nop
		_delay_ms(1);
		UDR = dsc1; 
     ec6:	80 91 04 02 	lds	r24, 0x0204
     eca:	8c b9       	out	0x0c, r24	; 12
     ecc:	8f ec       	ldi	r24, 0xCF	; 207
     ece:	97 e0       	ldi	r25, 0x07	; 7
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <usartsnd+0x210>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <usartsnd+0x216>
     ed6:	00 00       	nop
		_delay_ms(1);
		UDR = 'D';
     ed8:	84 e4       	ldi	r24, 0x44	; 68
     eda:	8c b9       	out	0x0c, r24	; 12
     edc:	8f ec       	ldi	r24, 0xCF	; 207
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <usartsnd+0x220>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <usartsnd+0x226>
     ee6:	00 00       	nop
		_delay_ms(1);
		rsid = 0;
     ee8:	10 92 1d 02 	sts	0x021D, r1
     eec:	10 92 1c 02 	sts	0x021C, r1
		usrv = sd_usrcv(); 
     ef0:	80 91 4c 02 	lds	r24, 0x024C
     ef4:	90 91 4d 02 	lds	r25, 0x024D
     ef8:	90 93 23 02 	sts	0x0223, r25
     efc:	80 93 22 02 	sts	0x0222, r24
     f00:	08 95       	ret
     f02:	8f e2       	ldi	r24, 0x2F	; 47
     f04:	95 e7       	ldi	r25, 0x75	; 117
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <usartsnd+0x246>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <usartsnd+0x24c>
     f0c:	00 00       	nop
     f0e:	08 95       	ret

00000f10 <bcksgn>:
	}
	else _delay_ms(15);
}
void bcksgn(void)
{
	lcd_command(0x40);
     f10:	80 e4       	ldi	r24, 0x40	; 64
     f12:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x04);
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x08);
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x1F);
     f22:	8f e1       	ldi	r24, 0x1F	; 31
     f24:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x09);
     f28:	89 e0       	ldi	r24, 0x09	; 9
     f2a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x05);
     f2e:	85 e0       	ldi	r24, 0x05	; 5
     f30:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x01);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x09);
     f3a:	89 e0       	ldi	r24, 0x09	; 9
     f3c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x07);
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_command(0x8F);
     f46:	8f e8       	ldi	r24, 0x8F	; 143
     f48:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x00);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
     f52:	08 95       	ret

00000f54 <entmemsgn>:
}
void entmemsgn(void)
{
	if ((pg == 2) | (pg == 3))
     f54:	80 91 30 02 	lds	r24, 0x0230
     f58:	90 91 31 02 	lds	r25, 0x0231
     f5c:	02 97       	sbiw	r24, 0x02	; 2
     f5e:	02 97       	sbiw	r24, 0x02	; 2
     f60:	08 f5       	brcc	.+66     	; 0xfa4 <entmemsgn+0x50>
	{
		lcd_command(0x48);
     f62:	88 e4       	ldi	r24, 0x48	; 72
     f64:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x01);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x01);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x05);
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x0D);
     f7a:	8d e0       	ldi	r24, 0x0D	; 13
     f7c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1F);
     f80:	8f e1       	ldi	r24, 0x1F	; 31
     f82:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x0C);
     f86:	8c e0       	ldi	r24, 0x0C	; 12
     f88:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x04);
     f8c:	84 e0       	ldi	r24, 0x04	; 4
     f8e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_command(0x80);
     f98:	80 e8       	ldi	r24, 0x80	; 128
     f9a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x01);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	}
	if ((pg == 1) | (pg == 5))
     fa4:	80 91 30 02 	lds	r24, 0x0230
     fa8:	90 91 31 02 	lds	r25, 0x0231
     fac:	8b 7f       	andi	r24, 0xFB	; 251
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	09 f5       	brne	.+66     	; 0xff4 <entmemsgn+0xa0>
	{
		lcd_command(0x48);
     fb2:	88 e4       	ldi	r24, 0x48	; 72
     fb4:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x00);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1C);
     fbe:	8c e1       	ldi	r24, 0x1C	; 28
     fc0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1E);
     fc4:	8e e1       	ldi	r24, 0x1E	; 30
     fc6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1F);
     fca:	8f e1       	ldi	r24, 0x1F	; 31
     fcc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1F);
     fd0:	8f e1       	ldi	r24, 0x1F	; 31
     fd2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1F);
     fd6:	8f e1       	ldi	r24, 0x1F	; 31
     fd8:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1F);
     fdc:	8f e1       	ldi	r24, 0x1F	; 31
     fde:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1F);
     fe2:	8f e1       	ldi	r24, 0x1F	; 31
     fe4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_command(0xDC);
     fe8:	8c ed       	ldi	r24, 0xDC	; 220
     fea:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x01);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
     ff4:	08 95       	ret

00000ff6 <selsgn>:
	}
}
void selsgn(void)
{
	lcd_command(0x50);
     ff6:	80 e5       	ldi	r24, 0x50	; 80
     ff8:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x00);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    1002:	84 e0       	ldi	r24, 0x04	; 4
    1004:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x1F);
    100e:	8f e1       	ldi	r24, 0x1F	; 31
    1010:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x0E);
    1014:	8e e0       	ldi	r24, 0x0E	; 14
    1016:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x00);
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x00);
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_command(0x8A);
    102c:	8a e8       	ldi	r24, 0x8A	; 138
    102e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x02);
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	
	lcd_command(0x58);
    1038:	88 e5       	ldi	r24, 0x58	; 88
    103a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x00);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x00);
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x0E);
    1050:	8e e0       	ldi	r24, 0x0E	; 14
    1052:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x1F);
    1056:	8f e1       	ldi	r24, 0x1F	; 31
    1058:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    105c:	84 e0       	ldi	r24, 0x04	; 4
    105e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x00);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_command(0x85);
    106e:	85 e8       	ldi	r24, 0x85	; 133
    1070:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x03);
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    107a:	08 95       	ret

0000107c <batsgn>:
}
void batsgn(void)
{
	if ((bat > 221) && (bat < 255)) bats = ((bat - 222) / 4);		// DL Battery Scale: Vmax = 3.7v = 254 , Vmin = 3.3v = 222
    107c:	80 91 26 02 	lds	r24, 0x0226
    1080:	90 91 27 02 	lds	r25, 0x0227
    1084:	9c 01       	movw	r18, r24
    1086:	2e 5d       	subi	r18, 0xDE	; 222
    1088:	31 09       	sbc	r19, r1
    108a:	21 32       	cpi	r18, 0x21	; 33
    108c:	31 05       	cpc	r19, r1
    108e:	48 f4       	brcc	.+18     	; 0x10a2 <batsgn+0x26>
    1090:	36 95       	lsr	r19
    1092:	27 95       	ror	r18
    1094:	36 95       	lsr	r19
    1096:	27 95       	ror	r18
    1098:	30 93 25 02 	sts	0x0225, r19
    109c:	20 93 24 02 	sts	0x0224, r18
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <batsgn+0x42>
	else if (bat > 254) bats = 8;
    10a2:	8f 3f       	cpi	r24, 0xFF	; 255
    10a4:	91 05       	cpc	r25, r1
    10a6:	38 f0       	brcs	.+14     	; 0x10b6 <batsgn+0x3a>
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	90 93 25 02 	sts	0x0225, r25
    10b0:	80 93 24 02 	sts	0x0224, r24
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <batsgn+0x42>
	else bats = 0;
    10b6:	10 92 25 02 	sts	0x0225, r1
    10ba:	10 92 24 02 	sts	0x0224, r1
	lcd_command(0x60);
    10be:	80 e6       	ldi	r24, 0x60	; 96
    10c0:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	if (bats > 7) lcd_data(0x09); else lcd_data(0x08);
    10c4:	80 91 24 02 	lds	r24, 0x0224
    10c8:	90 91 25 02 	lds	r25, 0x0225
    10cc:	08 97       	sbiw	r24, 0x08	; 8
    10ce:	20 f0       	brcs	.+8      	; 0x10d8 <batsgn+0x5c>
    10d0:	89 e0       	ldi	r24, 0x09	; 9
    10d2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <batsgn+0x62>
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 6) lcd_data(0x1D); else lcd_data(0x1C);
    10de:	80 91 24 02 	lds	r24, 0x0224
    10e2:	90 91 25 02 	lds	r25, 0x0225
    10e6:	07 97       	sbiw	r24, 0x07	; 7
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <batsgn+0x76>
    10ea:	8d e1       	ldi	r24, 0x1D	; 29
    10ec:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <batsgn+0x7c>
    10f2:	8c e1       	ldi	r24, 0x1C	; 28
    10f4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 5) lcd_data(0x15); else lcd_data(0x14);
    10f8:	80 91 24 02 	lds	r24, 0x0224
    10fc:	90 91 25 02 	lds	r25, 0x0225
    1100:	06 97       	sbiw	r24, 0x06	; 6
    1102:	20 f0       	brcs	.+8      	; 0x110c <batsgn+0x90>
    1104:	85 e1       	ldi	r24, 0x15	; 21
    1106:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <batsgn+0x96>
    110c:	84 e1       	ldi	r24, 0x14	; 20
    110e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 4) lcd_data(0x15); else lcd_data(0x14);
    1112:	80 91 24 02 	lds	r24, 0x0224
    1116:	90 91 25 02 	lds	r25, 0x0225
    111a:	05 97       	sbiw	r24, 0x05	; 5
    111c:	20 f0       	brcs	.+8      	; 0x1126 <batsgn+0xaa>
    111e:	85 e1       	ldi	r24, 0x15	; 21
    1120:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    1124:	03 c0       	rjmp	.+6      	; 0x112c <batsgn+0xb0>
    1126:	84 e1       	ldi	r24, 0x14	; 20
    1128:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 3) lcd_data(0x15); else lcd_data(0x14);
    112c:	80 91 24 02 	lds	r24, 0x0224
    1130:	90 91 25 02 	lds	r25, 0x0225
    1134:	04 97       	sbiw	r24, 0x04	; 4
    1136:	20 f0       	brcs	.+8      	; 0x1140 <batsgn+0xc4>
    1138:	85 e1       	ldi	r24, 0x15	; 21
    113a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <batsgn+0xca>
    1140:	84 e1       	ldi	r24, 0x14	; 20
    1142:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 2) lcd_data(0x15); else lcd_data(0x14);
    1146:	80 91 24 02 	lds	r24, 0x0224
    114a:	90 91 25 02 	lds	r25, 0x0225
    114e:	03 97       	sbiw	r24, 0x03	; 3
    1150:	20 f0       	brcs	.+8      	; 0x115a <batsgn+0xde>
    1152:	85 e1       	ldi	r24, 0x15	; 21
    1154:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <batsgn+0xe4>
    115a:	84 e1       	ldi	r24, 0x14	; 20
    115c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 1) lcd_data(0x15); else lcd_data(0x14);
    1160:	80 91 24 02 	lds	r24, 0x0224
    1164:	90 91 25 02 	lds	r25, 0x0225
    1168:	02 97       	sbiw	r24, 0x02	; 2
    116a:	20 f0       	brcs	.+8      	; 0x1174 <batsgn+0xf8>
    116c:	85 e1       	ldi	r24, 0x15	; 21
    116e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    1172:	03 c0       	rjmp	.+6      	; 0x117a <batsgn+0xfe>
    1174:	84 e1       	ldi	r24, 0x14	; 20
    1176:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	if (bats > 0) lcd_data(0x1D); else lcd_data(0x1C);
    117a:	80 91 24 02 	lds	r24, 0x0224
    117e:	90 91 25 02 	lds	r25, 0x0225
    1182:	89 2b       	or	r24, r25
    1184:	21 f0       	breq	.+8      	; 0x118e <batsgn+0x112>
    1186:	8d e1       	ldi	r24, 0x1D	; 29
    1188:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <batsgn+0x118>
    118e:	8c e1       	ldi	r24, 0x1C	; 28
    1190:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_command(0xDF);
    1194:	8f ed       	ldi	r24, 0xDF	; 223
    1196:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x04);
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    11a0:	08 95       	ret

000011a2 <rsdsgn>:
	
}
void rsdsgn(void)
{
	rsid = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	90 93 1d 02 	sts	0x021D, r25
    11aa:	80 93 1c 02 	sts	0x021C, r24
	lcd_command(0x68);
    11ae:	88 e6       	ldi	r24, 0x68	; 104
    11b0:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x04);
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x06);
    11ba:	86 e0       	ldi	r24, 0x06	; 6
    11bc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x07);
    11c0:	87 e0       	ldi	r24, 0x07	; 7
    11c2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x08);
    11c6:	88 e0       	ldi	r24, 0x08	; 8
    11c8:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x02);
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x1C);
    11d2:	8c e1       	ldi	r24, 0x1C	; 28
    11d4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x0C);
    11d8:	8c e0       	ldi	r24, 0x0C	; 12
    11da:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    11de:	84 e0       	ldi	r24, 0x04	; 4
    11e0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_command(0xDE);
    11e4:	8e ed       	ldi	r24, 0xDE	; 222
    11e6:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x05);
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    11f0:	08 95       	ret

000011f2 <runsgn>:
}
void runsgn(unsigned int sel)
{
	if (sel == 0)
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	49 f4       	brne	.+18     	; 0x1208 <runsgn+0x16>
	{
		lcd_gotoxy(0,3);
    11f6:	63 e0       	ldi	r22, 0x03	; 3
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts(" ");
    11fe:	86 e1       	ldi	r24, 0x16	; 22
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    1206:	08 95       	ret
	}
	if (sel == 1)
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	11 f5       	brne	.+68     	; 0x1252 <runsgn+0x60>
	{
		lcd_command(0x70);
    120e:	80 e7       	ldi	r24, 0x70	; 112
    1210:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x00);
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1C);
    1232:	8c e1       	ldi	r24, 0x1C	; 28
    1234:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1C);
    1238:	8c e1       	ldi	r24, 0x1C	; 28
    123a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1C);
    123e:	8c e1       	ldi	r24, 0x1C	; 28
    1240:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_command(0xD0);
    1244:	80 ed       	ldi	r24, 0xD0	; 208
    1246:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x06);
    124a:	86 e0       	ldi	r24, 0x06	; 6
    124c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    1250:	08 95       	ret
	}
	if (sel == 2)
    1252:	02 97       	sbiw	r24, 0x02	; 2
    1254:	09 f5       	brne	.+66     	; 0x1298 <runsgn+0xa6>
	{
		lcd_command(0x70);
    1256:	80 e7       	ldi	r24, 0x70	; 112
    1258:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x00);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x00);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x10);
    126e:	80 e1       	ldi	r24, 0x10	; 16
    1270:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x18);
    1274:	88 e1       	ldi	r24, 0x18	; 24
    1276:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x1C);
    127a:	8c e1       	ldi	r24, 0x1C	; 28
    127c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x18);
    1280:	88 e1       	ldi	r24, 0x18	; 24
    1282:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_data(0x10);
    1286:	80 e1       	ldi	r24, 0x10	; 16
    1288:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
		lcd_command(0xD0);
    128c:	80 ed       	ldi	r24, 0xD0	; 208
    128e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
		lcd_data(0x06);
    1292:	86 e0       	ldi	r24, 0x06	; 6
    1294:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    1298:	08 95       	ret

0000129a <ledsgn>:
	}
}
void ledsgn(void)
{
	lcd_command(0x78);
    129a:	88 e7       	ldi	r24, 0x78	; 120
    129c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x00);
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x15);
    12ac:	85 e1       	ldi	r24, 0x15	; 21
    12ae:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x0E);
    12b2:	8e e0       	ldi	r24, 0x0E	; 14
    12b4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x0E);
    12b8:	8e e0       	ldi	r24, 0x0E	; 14
    12ba:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x15);
    12be:	85 e1       	ldi	r24, 0x15	; 21
    12c0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x04);
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_data(0x00);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
	lcd_command(0xDD);
    12d0:	8d ed       	ldi	r24, 0xDD	; 221
    12d2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_command>
	lcd_data(0x07);
    12d6:	87 e0       	ldi	r24, 0x07	; 7
    12d8:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_data>
    12dc:	08 95       	ret

000012de <msdfile>:
}
void msdfile(void)
{
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
	if (dlac != 1)
    12ee:	80 91 16 02 	lds	r24, 0x0216
    12f2:	90 91 17 02 	lds	r25, 0x0217
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <msdfile+0x1e>
    12fa:	c5 c0       	rjmp	.+394    	; 0x1486 <msdfile+0x1a8>
	{
		plc_disable; msd_enable;
    12fc:	af 9a       	sbi	0x15, 7	; 21
    12fe:	ae 98       	cbi	0x15, 6	; 21
    1300:	2f ef       	ldi	r18, 0xFF	; 255
    1302:	80 e7       	ldi	r24, 0x70	; 112
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	21 50       	subi	r18, 0x01	; 1
    1308:	80 40       	sbci	r24, 0x00	; 0
    130a:	90 40       	sbci	r25, 0x00	; 0
    130c:	e1 f7       	brne	.-8      	; 0x1306 <msdfile+0x28>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <msdfile+0x32>
    1310:	00 00       	nop
		_delay_ms(100);
		mfs = 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	90 93 0d 02 	sts	0x020D, r25
    131a:	80 93 0c 02 	sts	0x020C, r24
		while (mfs == 1)
		{
			sprintf(fncc , "WDL_%1u.xlt" , fnc);
    131e:	04 ec       	ldi	r16, 0xC4	; 196
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	cd ea       	ldi	r28, 0xAD	; 173
    1324:	d2 e0       	ldi	r29, 0x02	; 2
    1326:	cc 2e       	mov	r12, r28
    1328:	dd 2e       	mov	r13, r29
				sd_new(9 , fncc);
				_delay_ms(200);
				sdrsp = sd_response();
				_delay_ms(100);
				mfs = 0;
				mfe = 1;
    132a:	ee 24       	eor	r14, r14
    132c:	e3 94       	inc	r14
    132e:	f1 2c       	mov	r15, r1
	if (dlac != 1)
	{
		plc_disable; msd_enable;
		_delay_ms(100);
		mfs = 1;
		while (mfs == 1)
    1330:	9b c0       	rjmp	.+310    	; 0x1468 <msdfile+0x18a>
		{
			sprintf(fncc , "WDL_%1u.xlt" , fnc);
    1332:	80 91 61 00 	lds	r24, 0x0061
    1336:	8f 93       	push	r24
    1338:	80 91 60 00 	lds	r24, 0x0060
    133c:	8f 93       	push	r24
    133e:	1f 93       	push	r17
    1340:	0f 93       	push	r16
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    134a:	4a e0       	ldi	r20, 0x0A	; 10
    134c:	62 ef       	ldi	r22, 0xF2	; 242
    134e:	72 e0       	ldi	r23, 0x02	; 2
    1350:	80 91 60 00 	lds	r24, 0x0060
    1354:	90 91 61 00 	lds	r25, 0x0061
    1358:	0e 94 47 18 	call	0x308e	; 0x308e <__itoa_ncheck>
			itoa(fnc,fncd,10); lcd_gotoxy(11,3); lcd_puts(fncd);
    135c:	63 e0       	ldi	r22, 0x03	; 3
    135e:	8b e0       	ldi	r24, 0x0B	; 11
    1360:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    1364:	82 ef       	ldi	r24, 0xF2	; 242
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			fnex = sd_fnexist(9 , fncc);
    136c:	6c 2d       	mov	r22, r12
    136e:	7d 2d       	mov	r23, r13
    1370:	89 e0       	ldi	r24, 0x09	; 9
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 53 05 	call	0xaa6	; 0xaa6 <sd_fnexist>
    1378:	90 93 0f 02 	sts	0x020F, r25
    137c:	80 93 0e 02 	sts	0x020E, r24
    1380:	9f ef       	ldi	r25, 0xFF	; 255
    1382:	21 ee       	ldi	r18, 0xE1	; 225
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	91 50       	subi	r25, 0x01	; 1
    1388:	20 40       	sbci	r18, 0x00	; 0
    138a:	80 40       	sbci	r24, 0x00	; 0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <msdfile+0xa8>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <msdfile+0xb2>
    1390:	00 00       	nop
			_delay_ms(200);
			if (fnex == 107)
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	80 91 0e 02 	lds	r24, 0x020E
    13a2:	90 91 0f 02 	lds	r25, 0x020F
    13a6:	8b 36       	cpi	r24, 0x6B	; 107
    13a8:	91 05       	cpc	r25, r1
    13aa:	31 f5       	brne	.+76     	; 0x13f8 <msdfile+0x11a>
			{
				sd_new(9 , fncc);
    13ac:	6c 2d       	mov	r22, r12
    13ae:	7d 2d       	mov	r23, r13
    13b0:	89 e0       	ldi	r24, 0x09	; 9
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 bb 05 	call	0xb76	; 0xb76 <sd_new>
    13b8:	9f ef       	ldi	r25, 0xFF	; 255
    13ba:	21 ee       	ldi	r18, 0xE1	; 225
    13bc:	84 e0       	ldi	r24, 0x04	; 4
    13be:	91 50       	subi	r25, 0x01	; 1
    13c0:	20 40       	sbci	r18, 0x00	; 0
    13c2:	80 40       	sbci	r24, 0x00	; 0
    13c4:	e1 f7       	brne	.-8      	; 0x13be <msdfile+0xe0>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <msdfile+0xea>
    13c8:	00 00       	nop
				_delay_ms(200);
				sdrsp = sd_response();
    13ca:	0e 94 35 03 	call	0x66a	; 0x66a <sd_response>
    13ce:	90 93 b7 02 	sts	0x02B7, r25
    13d2:	80 93 b6 02 	sts	0x02B6, r24
    13d6:	9f ef       	ldi	r25, 0xFF	; 255
    13d8:	20 e7       	ldi	r18, 0x70	; 112
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	91 50       	subi	r25, 0x01	; 1
    13de:	20 40       	sbci	r18, 0x00	; 0
    13e0:	80 40       	sbci	r24, 0x00	; 0
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <msdfile+0xfe>
    13e4:	00 c0       	rjmp	.+0      	; 0x13e6 <msdfile+0x108>
    13e6:	00 00       	nop
				_delay_ms(100);
				mfs = 0;
    13e8:	10 92 0d 02 	sts	0x020D, r1
    13ec:	10 92 0c 02 	sts	0x020C, r1
				mfe = 1;
    13f0:	f0 92 0b 02 	sts	0x020B, r15
    13f4:	e0 92 0a 02 	sts	0x020A, r14
			}
			if (fnex == 127) fnc++;
    13f8:	80 91 0e 02 	lds	r24, 0x020E
    13fc:	90 91 0f 02 	lds	r25, 0x020F
    1400:	8f 37       	cpi	r24, 0x7F	; 127
    1402:	91 05       	cpc	r25, r1
    1404:	49 f4       	brne	.+18     	; 0x1418 <msdfile+0x13a>
    1406:	80 91 60 00 	lds	r24, 0x0060
    140a:	90 91 61 00 	lds	r25, 0x0061
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	90 93 61 00 	sts	0x0061, r25
    1414:	80 93 60 00 	sts	0x0060, r24
			sd_open(9 , fncc);          //////////////
    1418:	6c 2d       	mov	r22, r12
    141a:	7d 2d       	mov	r23, r13
    141c:	89 e0       	ldi	r24, 0x09	; 9
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 a6 04 	call	0x94c	; 0x94c <sd_open>
    1424:	9f ef       	ldi	r25, 0xFF	; 255
    1426:	20 e7       	ldi	r18, 0x70	; 112
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	91 50       	subi	r25, 0x01	; 1
    142c:	20 40       	sbci	r18, 0x00	; 0
    142e:	80 40       	sbci	r24, 0x00	; 0
    1430:	e1 f7       	brne	.-8      	; 0x142a <msdfile+0x14c>
    1432:	00 c0       	rjmp	.+0      	; 0x1434 <msdfile+0x156>
    1434:	00 00       	nop
			_delay_ms(100);             //////////////
			sdrsp = sd_response();
    1436:	0e 94 35 03 	call	0x66a	; 0x66a <sd_response>
    143a:	90 93 b7 02 	sts	0x02B7, r25
    143e:	80 93 b6 02 	sts	0x02B6, r24
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	20 e7       	ldi	r18, 0x70	; 112
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	91 50       	subi	r25, 0x01	; 1
    144a:	20 40       	sbci	r18, 0x00	; 0
    144c:	80 40       	sbci	r24, 0x00	; 0
    144e:	e1 f7       	brne	.-8      	; 0x1448 <msdfile+0x16a>
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <msdfile+0x174>
    1452:	00 00       	nop
			_delay_ms(100);
			if (sdrsp != 0) mfs = 0;
    1454:	80 91 b6 02 	lds	r24, 0x02B6
    1458:	90 91 b7 02 	lds	r25, 0x02B7
    145c:	89 2b       	or	r24, r25
    145e:	21 f0       	breq	.+8      	; 0x1468 <msdfile+0x18a>
    1460:	10 92 0d 02 	sts	0x020D, r1
    1464:	10 92 0c 02 	sts	0x020C, r1
	if (dlac != 1)
	{
		plc_disable; msd_enable;
		_delay_ms(100);
		mfs = 1;
		while (mfs == 1)
    1468:	80 91 0c 02 	lds	r24, 0x020C
    146c:	90 91 0d 02 	lds	r25, 0x020D
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	09 f4       	brne	.+2      	; 0x1476 <msdfile+0x198>
    1474:	5e cf       	rjmp	.-324    	; 0x1332 <msdfile+0x54>
			_delay_ms(100);             //////////////
			sdrsp = sd_response();
			_delay_ms(100);
			if (sdrsp != 0) mfs = 0;
		}
		plc_enable; msd_disable;
    1476:	af 98       	cbi	0x15, 7	; 21
    1478:	ae 9a       	sbi	0x15, 6	; 21
		dsc = 1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	90 93 09 02 	sts	0x0209, r25
    1482:	80 93 08 02 	sts	0x0208, r24
	}
}
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	08 95       	ret

00001498 <msddata>:
void msddata(void)
{
	if (sgn1u == 0) sprintf(tmp1,"+%2u.%4u",dig1u,dec1u);
    1498:	80 91 60 02 	lds	r24, 0x0260
    149c:	90 91 61 02 	lds	r25, 0x0261
    14a0:	89 2b       	or	r24, r25
    14a2:	f1 f4       	brne	.+60     	; 0x14e0 <msddata+0x48>
    14a4:	80 91 9f 02 	lds	r24, 0x029F
    14a8:	8f 93       	push	r24
    14aa:	80 91 9e 02 	lds	r24, 0x029E
    14ae:	8f 93       	push	r24
    14b0:	80 91 bc 02 	lds	r24, 0x02BC
    14b4:	8f 93       	push	r24
    14b6:	80 91 bb 02 	lds	r24, 0x02BB
    14ba:	8f 93       	push	r24
    14bc:	80 ed       	ldi	r24, 0xD0	; 208
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9f 93       	push	r25
    14c2:	8f 93       	push	r24
    14c4:	86 e0       	ldi	r24, 0x06	; 6
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	9f 93       	push	r25
    14ca:	8f 93       	push	r24
    14cc:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    14d0:	8d b7       	in	r24, 0x3d	; 61
    14d2:	9e b7       	in	r25, 0x3e	; 62
    14d4:	08 96       	adiw	r24, 0x08	; 8
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	9e bf       	out	0x3e, r25	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	8d bf       	out	0x3d, r24	; 61
	if (sgn1u == 1) sprintf(tmp1,"-%2u.%4u",dig1u,dec1u);
    14e0:	80 91 60 02 	lds	r24, 0x0260
    14e4:	90 91 61 02 	lds	r25, 0x0261
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f4       	brne	.+60     	; 0x1528 <msddata+0x90>
    14ec:	80 91 9f 02 	lds	r24, 0x029F
    14f0:	8f 93       	push	r24
    14f2:	80 91 9e 02 	lds	r24, 0x029E
    14f6:	8f 93       	push	r24
    14f8:	80 91 bc 02 	lds	r24, 0x02BC
    14fc:	8f 93       	push	r24
    14fe:	80 91 bb 02 	lds	r24, 0x02BB
    1502:	8f 93       	push	r24
    1504:	89 ed       	ldi	r24, 0xD9	; 217
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9f 93       	push	r25
    150a:	8f 93       	push	r24
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	9f 93       	push	r25
    1512:	8f 93       	push	r24
    1514:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    1518:	8d b7       	in	r24, 0x3d	; 61
    151a:	9e b7       	in	r25, 0x3e	; 62
    151c:	08 96       	adiw	r24, 0x08	; 8
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	9e bf       	out	0x3e, r25	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	8d bf       	out	0x3d, r24	; 61
	if (sgn2u == 0) sprintf(tmp2,"+%2u.%4u",dig2u,dec2u);
    1528:	80 91 10 03 	lds	r24, 0x0310
    152c:	90 91 11 03 	lds	r25, 0x0311
    1530:	89 2b       	or	r24, r25
    1532:	f1 f4       	brne	.+60     	; 0x1570 <msddata+0xd8>
    1534:	80 91 c0 02 	lds	r24, 0x02C0
    1538:	8f 93       	push	r24
    153a:	80 91 bf 02 	lds	r24, 0x02BF
    153e:	8f 93       	push	r24
    1540:	80 91 fd 02 	lds	r24, 0x02FD
    1544:	8f 93       	push	r24
    1546:	80 91 fc 02 	lds	r24, 0x02FC
    154a:	8f 93       	push	r24
    154c:	80 ed       	ldi	r24, 0xD0	; 208
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9f 93       	push	r25
    1552:	8f 93       	push	r24
    1554:	86 e9       	ldi	r24, 0x96	; 150
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	9f 93       	push	r25
    155a:	8f 93       	push	r24
    155c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    1560:	8d b7       	in	r24, 0x3d	; 61
    1562:	9e b7       	in	r25, 0x3e	; 62
    1564:	08 96       	adiw	r24, 0x08	; 8
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	9e bf       	out	0x3e, r25	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	8d bf       	out	0x3d, r24	; 61
	if (sgn2u == 1) sprintf(tmp2,"-%2u.%4u",dig2u,dec2u);
    1570:	80 91 10 03 	lds	r24, 0x0310
    1574:	90 91 11 03 	lds	r25, 0x0311
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f4       	brne	.+60     	; 0x15b8 <msddata+0x120>
    157c:	80 91 c0 02 	lds	r24, 0x02C0
    1580:	8f 93       	push	r24
    1582:	80 91 bf 02 	lds	r24, 0x02BF
    1586:	8f 93       	push	r24
    1588:	80 91 fd 02 	lds	r24, 0x02FD
    158c:	8f 93       	push	r24
    158e:	80 91 fc 02 	lds	r24, 0x02FC
    1592:	8f 93       	push	r24
    1594:	89 ed       	ldi	r24, 0xD9	; 217
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9f 93       	push	r25
    159a:	8f 93       	push	r24
    159c:	86 e9       	ldi	r24, 0x96	; 150
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	9f 93       	push	r25
    15a2:	8f 93       	push	r24
    15a4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    15a8:	8d b7       	in	r24, 0x3d	; 61
    15aa:	9e b7       	in	r25, 0x3e	; 62
    15ac:	08 96       	adiw	r24, 0x08	; 8
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	9e bf       	out	0x3e, r25	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	8d bf       	out	0x3d, r24	; 61
	if (tmp1[1] == ' ') tmp1[1] = '0';
    15b8:	80 91 07 03 	lds	r24, 0x0307
    15bc:	80 32       	cpi	r24, 0x20	; 32
    15be:	19 f4       	brne	.+6      	; 0x15c6 <msddata+0x12e>
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	80 93 07 03 	sts	0x0307, r24
	if (tmp1[4] == ' ') tmp1[4] = '0';
    15c6:	80 91 0a 03 	lds	r24, 0x030A
    15ca:	80 32       	cpi	r24, 0x20	; 32
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <msddata+0x13c>
    15ce:	80 e3       	ldi	r24, 0x30	; 48
    15d0:	80 93 0a 03 	sts	0x030A, r24
	if (tmp1[5] == ' ') tmp1[5] = '0';
    15d4:	80 91 0b 03 	lds	r24, 0x030B
    15d8:	80 32       	cpi	r24, 0x20	; 32
    15da:	19 f4       	brne	.+6      	; 0x15e2 <msddata+0x14a>
    15dc:	80 e3       	ldi	r24, 0x30	; 48
    15de:	80 93 0b 03 	sts	0x030B, r24
	if (tmp1[6] == ' ') tmp1[6] = '0';
    15e2:	80 91 0c 03 	lds	r24, 0x030C
    15e6:	80 32       	cpi	r24, 0x20	; 32
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <msddata+0x158>
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	80 93 0c 03 	sts	0x030C, r24
	if (tmp1[7] == ' ') tmp1[7] = '0';
    15f0:	80 91 0d 03 	lds	r24, 0x030D
    15f4:	80 32       	cpi	r24, 0x20	; 32
    15f6:	19 f4       	brne	.+6      	; 0x15fe <msddata+0x166>
    15f8:	80 e3       	ldi	r24, 0x30	; 48
    15fa:	80 93 0d 03 	sts	0x030D, r24
	if (tmp2[1] == ' ') tmp2[1] = '0';
    15fe:	80 91 97 02 	lds	r24, 0x0297
    1602:	80 32       	cpi	r24, 0x20	; 32
    1604:	19 f4       	brne	.+6      	; 0x160c <msddata+0x174>
    1606:	80 e3       	ldi	r24, 0x30	; 48
    1608:	80 93 97 02 	sts	0x0297, r24
	if (tmp2[4] == ' ') tmp2[4] = '0';
    160c:	80 91 9a 02 	lds	r24, 0x029A
    1610:	80 32       	cpi	r24, 0x20	; 32
    1612:	19 f4       	brne	.+6      	; 0x161a <msddata+0x182>
    1614:	80 e3       	ldi	r24, 0x30	; 48
    1616:	80 93 9a 02 	sts	0x029A, r24
	if (tmp2[5] == ' ') tmp2[5] = '0';
    161a:	80 91 9b 02 	lds	r24, 0x029B
    161e:	80 32       	cpi	r24, 0x20	; 32
    1620:	19 f4       	brne	.+6      	; 0x1628 <msddata+0x190>
    1622:	80 e3       	ldi	r24, 0x30	; 48
    1624:	80 93 9b 02 	sts	0x029B, r24
	if (tmp2[6] == ' ') tmp2[6] = '0';
    1628:	80 91 9c 02 	lds	r24, 0x029C
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	19 f4       	brne	.+6      	; 0x1636 <msddata+0x19e>
    1630:	80 e3       	ldi	r24, 0x30	; 48
    1632:	80 93 9c 02 	sts	0x029C, r24
	if (tmp2[7] == ' ') tmp2[7] = '0';	
    1636:	80 91 9d 02 	lds	r24, 0x029D
    163a:	80 32       	cpi	r24, 0x20	; 32
    163c:	19 f4       	brne	.+6      	; 0x1644 <msddata+0x1ac>
    163e:	80 e3       	ldi	r24, 0x30	; 48
    1640:	80 93 9d 02 	sts	0x029D, r24
	if (dlst == 1)
    1644:	80 91 12 02 	lds	r24, 0x0212
    1648:	90 91 13 02 	lds	r25, 0x0213
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	09 f0       	breq	.+2      	; 0x1652 <msddata+0x1ba>
    1650:	a0 c0       	rjmp	.+320    	; 0x1792 <msddata+0x2fa>
    1652:	4a e0       	ldi	r20, 0x0A	; 10
    1654:	61 e8       	ldi	r22, 0x81	; 129
    1656:	72 e0       	ldi	r23, 0x02	; 2
    1658:	80 91 08 02 	lds	r24, 0x0208
    165c:	90 91 09 02 	lds	r25, 0x0209
    1660:	0e 94 47 18 	call	0x308e	; 0x308e <__itoa_ncheck>
		da1[5]  = tmp1[0];     da1[6]  = tmp1[1]; da1[7]  = tmp1[2];     da1[8]  = tmp1[3];      da1[9]  = tmp1[4]; da1[10]  = tmp1[5]; da1[11]  = tmp1[6]; da1[12]  = tmp1[7]; 
		da2[0] = 0x09;		
		da2[1]  = tmp2[0];     da2[2]  = tmp2[1]; da2[3]  = tmp2[2];     da2[4]  = tmp2[3];      da2[5]  = tmp2[4]; da2[6]   = tmp2[5]; da2[7]   = tmp2[6]; da2[8]   = tmp2[7];	
		da2[9] = 0x0D; da2[10] = 0x0A;*/	
		
		da1[0]  = dscc[0]; 
    1664:	80 91 81 02 	lds	r24, 0x0281
    1668:	80 93 6a 02 	sts	0x026A, r24
		da1[1]  = dscc[1]; 
    166c:	80 91 82 02 	lds	r24, 0x0282
    1670:	80 93 6b 02 	sts	0x026B, r24
		da1[2]  = dscc[2]; 
    1674:	80 91 83 02 	lds	r24, 0x0283
    1678:	80 93 6c 02 	sts	0x026C, r24
		da1[3]  = dscc[3];
    167c:	80 91 84 02 	lds	r24, 0x0284
    1680:	80 93 6d 02 	sts	0x026D, r24
		da1[4]  = 0x09;
    1684:	89 e0       	ldi	r24, 0x09	; 9
    1686:	80 93 6e 02 	sts	0x026E, r24
		da1[5]  = tmp1[0];     
    168a:	90 91 06 03 	lds	r25, 0x0306
    168e:	90 93 6f 02 	sts	0x026F, r25
		da1[6]  = tmp1[1]; 
    1692:	90 91 07 03 	lds	r25, 0x0307
    1696:	90 93 70 02 	sts	0x0270, r25
		da1[7]  = tmp1[2];     
    169a:	90 91 08 03 	lds	r25, 0x0308
    169e:	90 93 71 02 	sts	0x0271, r25
		da1[8]  = tmp1[3];      
    16a2:	90 91 09 03 	lds	r25, 0x0309
    16a6:	90 93 72 02 	sts	0x0272, r25
		da1[9]  = tmp1[4]; 
    16aa:	90 91 0a 03 	lds	r25, 0x030A
    16ae:	90 93 73 02 	sts	0x0273, r25
		da1[10] = tmp1[5]; 
    16b2:	90 91 0b 03 	lds	r25, 0x030B
    16b6:	90 93 74 02 	sts	0x0274, r25
		da1[11] = tmp1[6]; 
    16ba:	90 91 0c 03 	lds	r25, 0x030C
    16be:	90 93 75 02 	sts	0x0275, r25
		da1[12] = tmp1[7];
    16c2:	90 91 0d 03 	lds	r25, 0x030D
    16c6:	90 93 76 02 	sts	0x0276, r25
		da1[13] = 0x09;
    16ca:	80 93 77 02 	sts	0x0277, r24
		da1[14] = tmp2[0];
    16ce:	80 91 96 02 	lds	r24, 0x0296
    16d2:	80 93 78 02 	sts	0x0278, r24
		da1[15] = tmp2[0];
    16d6:	80 93 79 02 	sts	0x0279, r24
		da1[16] = tmp2[1]; 
    16da:	80 91 97 02 	lds	r24, 0x0297
    16de:	80 93 7a 02 	sts	0x027A, r24
		da1[17] = tmp2[2];     
    16e2:	80 91 98 02 	lds	r24, 0x0298
    16e6:	80 93 7b 02 	sts	0x027B, r24
		da1[18] = tmp2[3];      
    16ea:	80 91 99 02 	lds	r24, 0x0299
    16ee:	80 93 7c 02 	sts	0x027C, r24
		da1[19] = tmp2[4]; 
    16f2:	80 91 9a 02 	lds	r24, 0x029A
    16f6:	80 93 7d 02 	sts	0x027D, r24
		da1[20] = tmp2[5]; 
    16fa:	80 91 9b 02 	lds	r24, 0x029B
    16fe:	80 93 7e 02 	sts	0x027E, r24
		da1[21] = tmp2[6]; 
    1702:	80 91 9c 02 	lds	r24, 0x029C
    1706:	80 93 7f 02 	sts	0x027F, r24
		da1[22] = tmp2[7];
    170a:	80 91 9d 02 	lds	r24, 0x029D
    170e:	80 93 80 02 	sts	0x0280, r24
		//da1[23] = 0x0D; 
		//da1[24] = 0x0A;
		
		
		plc_disable; msd_enable;
    1712:	af 9a       	sbi	0x15, 7	; 21
    1714:	ae 98       	cbi	0x15, 6	; 21
    1716:	9f e7       	ldi	r25, 0x7F	; 127
    1718:	28 e3       	ldi	r18, 0x38	; 56
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	91 50       	subi	r25, 0x01	; 1
    171e:	20 40       	sbci	r18, 0x00	; 0
    1720:	80 40       	sbci	r24, 0x00	; 0
    1722:	e1 f7       	brne	.-8      	; 0x171c <msddata+0x284>
    1724:	00 c0       	rjmp	.+0      	; 0x1726 <msddata+0x28e>
    1726:	00 00       	nop
		_delay_ms(50);
		if (mfe == 1)
    1728:	80 91 0a 02 	lds	r24, 0x020A
    172c:	90 91 0b 02 	lds	r25, 0x020B
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	21 f5       	brne	.+72     	; 0x177c <msddata+0x2e4>
		{
			//sd_open(9 , fncc);
			//_delay_ms(50);
			//sdrsp = sd_response();
			//_delay_ms(50);
			if (sdrsp == 0)
    1734:	80 91 b6 02 	lds	r24, 0x02B6
    1738:	90 91 b7 02 	lds	r25, 0x02B7
    173c:	89 2b       	or	r24, r25
    173e:	f1 f4       	brne	.+60     	; 0x177c <msddata+0x2e4>
				sd_append(11 , da2);
				_delay_ms(100);
				sdrsp = sd_response();
				_delay_ms(50);*/
				
				sd_append(23 , da1);
    1740:	6a e6       	ldi	r22, 0x6A	; 106
    1742:	72 e0       	ldi	r23, 0x02	; 2
    1744:	87 e1       	ldi	r24, 0x17	; 23
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 de 04 	call	0x9bc	; 0x9bc <sd_append>
    174c:	9f e7       	ldi	r25, 0x7F	; 127
    174e:	28 e3       	ldi	r18, 0x38	; 56
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	91 50       	subi	r25, 0x01	; 1
    1754:	20 40       	sbci	r18, 0x00	; 0
    1756:	80 40       	sbci	r24, 0x00	; 0
    1758:	e1 f7       	brne	.-8      	; 0x1752 <msddata+0x2ba>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <msddata+0x2c4>
    175c:	00 00       	nop
				_delay_ms(50);
				sdrsp = sd_response();
    175e:	0e 94 35 03 	call	0x66a	; 0x66a <sd_response>
    1762:	90 93 b7 02 	sts	0x02B7, r25
    1766:	80 93 b6 02 	sts	0x02B6, r24
    176a:	9f e7       	ldi	r25, 0x7F	; 127
    176c:	28 e3       	ldi	r18, 0x38	; 56
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	91 50       	subi	r25, 0x01	; 1
    1772:	20 40       	sbci	r18, 0x00	; 0
    1774:	80 40       	sbci	r24, 0x00	; 0
    1776:	e1 f7       	brne	.-8      	; 0x1770 <msddata+0x2d8>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <msddata+0x2e2>
    177a:	00 00       	nop
				_delay_ms(50);					
			}
		}
		plc_enable; msd_disable;
    177c:	af 98       	cbi	0x15, 7	; 21
    177e:	ae 9a       	sbi	0x15, 6	; 21
		dsc++;
    1780:	80 91 08 02 	lds	r24, 0x0208
    1784:	90 91 09 02 	lds	r25, 0x0209
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	90 93 09 02 	sts	0x0209, r25
    178e:	80 93 08 02 	sts	0x0208, r24
    1792:	08 95       	ret

00001794 <interface>:
	}
}

void interface (void)
{
	if (pg == 0)									// Home
    1794:	80 91 30 02 	lds	r24, 0x0230
    1798:	90 91 31 02 	lds	r25, 0x0231
    179c:	89 2b       	or	r24, r25
    179e:	09 f0       	breq	.+2      	; 0x17a2 <interface+0xe>
    17a0:	48 c0       	rjmp	.+144    	; 0x1832 <interface+0x9e>
	{
		lcd_clrscr();
    17a2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		lcd_home();
    17a6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_home>
		lcd_puts("Run         Sett");
    17aa:	82 ee       	ldi	r24, 0xE2	; 226
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(5,2);
    17b2:	62 e0       	ldi	r22, 0x02	; 2
    17b4:	85 e0       	ldi	r24, 0x05	; 5
    17b6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("WDL v3");	
    17ba:	83 ef       	ldi	r24, 0xF3	; 243
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			//lcd_puts(ch1);
			//lcd_gotoxy(4,3);
			//lcd_puts(ch2);	
			//lcd_gotoxy(8,3);
			//lcd_puts(dscc);
		if (onid == 1) runsgn(2);
    17c2:	80 91 38 02 	lds	r24, 0x0238
    17c6:	90 91 39 02 	lds	r25, 0x0239
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <interface+0x42>
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (ofak == 1) runsgn(1);
    17d6:	80 91 3e 02 	lds	r24, 0x023E
    17da:	90 91 3f 02 	lds	r25, 0x023F
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	21 f4       	brne	.+8      	; 0x17ea <interface+0x56>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if ((PINA & (1<<0)) || (usrv == 1)) {pg = 2; usrv = 0; _delay_ms(pdly);}  
    17ea:	c8 99       	sbic	0x19, 0	; 25
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <interface+0x66>
    17ee:	80 91 22 02 	lds	r24, 0x0222
    17f2:	90 91 23 02 	lds	r25, 0x0223
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	99 f4       	brne	.+38     	; 0x1820 <interface+0x8c>
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	90 93 31 02 	sts	0x0231, r25
    1802:	80 93 30 02 	sts	0x0230, r24
    1806:	10 92 23 02 	sts	0x0223, r1
    180a:	10 92 22 02 	sts	0x0222, r1
    180e:	2f ef       	ldi	r18, 0xFF	; 255
    1810:	81 ee       	ldi	r24, 0xE1	; 225
    1812:	94 e0       	ldi	r25, 0x04	; 4
    1814:	21 50       	subi	r18, 0x01	; 1
    1816:	80 40       	sbci	r24, 0x00	; 0
    1818:	90 40       	sbci	r25, 0x00	; 0
    181a:	e1 f7       	brne	.-8      	; 0x1814 <interface+0x80>
    181c:	00 c0       	rjmp	.+0      	; 0x181e <interface+0x8a>
    181e:	00 00       	nop
    1820:	2f ef       	ldi	r18, 0xFF	; 255
    1822:	80 e7       	ldi	r24, 0x70	; 112
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	80 40       	sbci	r24, 0x00	; 0
    182a:	90 40       	sbci	r25, 0x00	; 0
    182c:	e1 f7       	brne	.-8      	; 0x1826 <interface+0x92>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <interface+0x9c>
    1830:	00 00       	nop
		_delay_ms
	}
	if (pg == 1)									// Run
    1832:	80 91 30 02 	lds	r24, 0x0230
    1836:	90 91 31 02 	lds	r25, 0x0231
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	09 f0       	breq	.+2      	; 0x1840 <interface+0xac>
    183e:	02 c1       	rjmp	.+516    	; 0x1a44 <interface+0x2b0>
	{
		lcd_clrscr();
    1840:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		lcd_home();
    1844:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_home>
		lcd_puts("Stop        Fin.");
    1848:	8a ef       	ldi	r24, 0xFA	; 250
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(0,1);
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("T1:");
    1858:	8b e0       	ldi	r24, 0x0B	; 11
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(3,1);
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts(tmp1);		// String in msddata				
    1868:	86 e0       	ldi	r24, 0x06	; 6
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(0,2);							
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("T2:");
    1878:	8f e0       	ldi	r24, 0x0F	; 15
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(3,2);
    1880:	62 e0       	ldi	r22, 0x02	; 2
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts(tmp2);		// String in msddata
    1888:	86 e9       	ldi	r24, 0x96	; 150
    188a:	92 e0       	ldi	r25, 0x02	; 2
    188c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (dlst == 1) {lcd_gotoxy(8,3); lcd_puts(dscc);}	
    1890:	80 91 12 02 	lds	r24, 0x0212
    1894:	90 91 13 02 	lds	r25, 0x0213
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	41 f4       	brne	.+16     	; 0x18ac <interface+0x118>
    189c:	63 e0       	ldi	r22, 0x03	; 3
    189e:	88 e0       	ldi	r24, 0x08	; 8
    18a0:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    18a4:	81 e8       	ldi	r24, 0x81	; 129
    18a6:	92 e0       	ldi	r25, 0x02	; 2
    18a8:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (dlst == 0) {lcd_gotoxy(8,3); lcd_puts("    "); mems = 0;}	
    18ac:	80 91 12 02 	lds	r24, 0x0212
    18b0:	90 91 13 02 	lds	r25, 0x0213
    18b4:	89 2b       	or	r24, r25
    18b6:	61 f4       	brne	.+24     	; 0x18d0 <interface+0x13c>
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	88 e0       	ldi	r24, 0x08	; 8
    18bc:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    18c0:	83 e1       	ldi	r24, 0x13	; 19
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    18c8:	10 92 01 02 	sts	0x0201, r1
    18cc:	10 92 00 02 	sts	0x0200, r1
		batsgn();
    18d0:	0e 94 3e 08 	call	0x107c	; 0x107c <batsgn>
		//itoa(bat,ch1,10); lcd_gotoxy(11,3); lcd_puts(ch1);
		if (onid == 1) runsgn(2);
    18d4:	80 91 38 02 	lds	r24, 0x0238
    18d8:	90 91 39 02 	lds	r25, 0x0239
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	21 f4       	brne	.+8      	; 0x18e8 <interface+0x154>
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (ofak == 1) runsgn(1);
    18e8:	80 91 3e 02 	lds	r24, 0x023E
    18ec:	90 91 3f 02 	lds	r25, 0x023F
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	21 f4       	brne	.+8      	; 0x18fc <interface+0x168>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if ((redi.rem == (reon[dly] - 1)) && (onst == 1)) {rsdsgn(); onid = 0; runsgn(0);}
    18fc:	e0 91 b8 02 	lds	r30, 0x02B8
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	ee 59       	subi	r30, 0x9E	; 158
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	20 91 64 02 	lds	r18, 0x0264
    1914:	30 91 65 02 	lds	r19, 0x0265
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	81 f4       	brne	.+32     	; 0x193e <interface+0x1aa>
    191e:	80 91 46 02 	lds	r24, 0x0246
    1922:	90 91 47 02 	lds	r25, 0x0247
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	51 f4       	brne	.+20     	; 0x193e <interface+0x1aa>
    192a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rsdsgn>
    192e:	10 92 39 02 	sts	0x0239, r1
    1932:	10 92 38 02 	sts	0x0238, r1
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (((PINA & (1<<0)) && (fin == 0) && (pt3 == 0)) || ((usrv == 1) && (fin == 0) && (pt3 == 0)))	{fin = 1; pt3 = 1; fcs1 = 1; usrv = 0; _delay_ms(10);}
    193e:	c8 99       	sbic	0x19, 0	; 25
    1940:	06 c0       	rjmp	.+12     	; 0x194e <interface+0x1ba>
    1942:	80 91 22 02 	lds	r24, 0x0222
    1946:	90 91 23 02 	lds	r25, 0x0223
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	21 f5       	brne	.+72     	; 0x1996 <interface+0x202>
    194e:	80 91 28 02 	lds	r24, 0x0228
    1952:	90 91 29 02 	lds	r25, 0x0229
    1956:	89 2b       	or	r24, r25
    1958:	f1 f4       	brne	.+60     	; 0x1996 <interface+0x202>
    195a:	80 91 2a 02 	lds	r24, 0x022A
    195e:	90 91 2b 02 	lds	r25, 0x022B
    1962:	89 2b       	or	r24, r25
    1964:	c1 f4       	brne	.+48     	; 0x1996 <interface+0x202>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	90 93 29 02 	sts	0x0229, r25
    196e:	80 93 28 02 	sts	0x0228, r24
    1972:	90 93 2b 02 	sts	0x022B, r25
    1976:	80 93 2a 02 	sts	0x022A, r24
    197a:	90 93 37 02 	sts	0x0237, r25
    197e:	80 93 36 02 	sts	0x0236, r24
    1982:	10 92 23 02 	sts	0x0223, r1
    1986:	10 92 22 02 	sts	0x0222, r1
    198a:	8f e1       	ldi	r24, 0x1F	; 31
    198c:	9e e4       	ldi	r25, 0x4E	; 78
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <interface+0x1fa>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <interface+0x200>
    1994:	00 00       	nop
		if (((PINA & (1<<0)) == 0)/* || ((pt3 == 1) && (usrv == 0))*/) pt3 = 0;
    1996:	c8 99       	sbic	0x19, 0	; 25
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <interface+0x20e>
    199a:	10 92 2b 02 	sts	0x022B, r1
    199e:	10 92 2a 02 	sts	0x022A, r1
		if (((PINA & (1<<0)) && (fin == 1) && (pt3 == 0)) || ((usrv == 1) && (fin == 1) && (pt3 == 0)))	{fin = 0; pt3 = 1; fcs1 = 1; usrv = 0; _delay_ms(10);}
    19a2:	c8 99       	sbic	0x19, 0	; 25
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <interface+0x21e>
    19a6:	80 91 22 02 	lds	r24, 0x0222
    19aa:	90 91 23 02 	lds	r25, 0x0223
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	21 f5       	brne	.+72     	; 0x19fa <interface+0x266>
    19b2:	80 91 28 02 	lds	r24, 0x0228
    19b6:	90 91 29 02 	lds	r25, 0x0229
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f4       	brne	.+60     	; 0x19fa <interface+0x266>
    19be:	80 91 2a 02 	lds	r24, 0x022A
    19c2:	90 91 2b 02 	lds	r25, 0x022B
    19c6:	89 2b       	or	r24, r25
    19c8:	c1 f4       	brne	.+48     	; 0x19fa <interface+0x266>
    19ca:	10 92 29 02 	sts	0x0229, r1
    19ce:	10 92 28 02 	sts	0x0228, r1
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	90 93 2b 02 	sts	0x022B, r25
    19da:	80 93 2a 02 	sts	0x022A, r24
    19de:	90 93 37 02 	sts	0x0237, r25
    19e2:	80 93 36 02 	sts	0x0236, r24
    19e6:	10 92 23 02 	sts	0x0223, r1
    19ea:	10 92 22 02 	sts	0x0222, r1
    19ee:	8f e1       	ldi	r24, 0x1F	; 31
    19f0:	9e e4       	ldi	r25, 0x4E	; 78
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <interface+0x25e>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <interface+0x264>
    19f8:	00 00       	nop
		if (((PINA & (1<<0)) == 0)/* || ((pt3 == 1) && (usrv == 0))*/) pt3 = 0;						
    19fa:	c8 99       	sbic	0x19, 0	; 25
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <interface+0x272>
    19fe:	10 92 2b 02 	sts	0x022B, r1
    1a02:	10 92 2a 02 	sts	0x022A, r1
		if (fin == 1) ledsgn();		
    1a06:	80 91 28 02 	lds	r24, 0x0228
    1a0a:	90 91 29 02 	lds	r25, 0x0229
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <interface+0x282>
    1a12:	0e 94 4d 09 	call	0x129a	; 0x129a <ledsgn>
		if (dlst == 1) {entmemsgn(); mems = 1;}
    1a16:	80 91 12 02 	lds	r24, 0x0212
    1a1a:	90 91 13 02 	lds	r25, 0x0213
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	41 f4       	brne	.+16     	; 0x1a32 <interface+0x29e>
    1a22:	0e 94 aa 07 	call	0xf54	; 0xf54 <entmemsgn>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	90 93 01 02 	sts	0x0201, r25
    1a2e:	80 93 00 02 	sts	0x0200, r24
    1a32:	9f ef       	ldi	r25, 0xFF	; 255
    1a34:	20 e7       	ldi	r18, 0x70	; 112
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	91 50       	subi	r25, 0x01	; 1
    1a3a:	20 40       	sbci	r18, 0x00	; 0
    1a3c:	80 40       	sbci	r24, 0x00	; 0
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <interface+0x2a4>
    1a40:	00 c0       	rjmp	.+0      	; 0x1a42 <interface+0x2ae>
    1a42:	00 00       	nop
		_delay_ms(100);
	}
	if (pg == 2)									// Sett
    1a44:	80 91 30 02 	lds	r24, 0x0230
    1a48:	90 91 31 02 	lds	r25, 0x0231
    1a4c:	02 97       	sbiw	r24, 0x02	; 2
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <interface+0x2be>
    1a50:	58 c2       	rjmp	.+1200   	; 0x1f02 <interface+0x76e>
	{
		lcd_clrscr();
    1a52:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		bcksgn();
    1a56:	0e 94 88 07 	call	0xf10	; 0xf10 <bcksgn>
		entmemsgn();
    1a5a:	0e 94 aa 07 	call	0xf54	; 0xf54 <entmemsgn>
		selsgn();
    1a5e:	0e 94 fb 07 	call	0xff6	; 0xff6 <selsgn>
		if ((pt1 == 0) | (pt1 == 1) | (pt1 == 2))
    1a62:	80 91 2e 02 	lds	r24, 0x022E
    1a66:	90 91 2f 02 	lds	r25, 0x022F
    1a6a:	03 97       	sbiw	r24, 0x03	; 3
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <interface+0x2dc>
    1a6e:	d9 c0       	rjmp	.+434    	; 0x1c22 <interface+0x48e>
		{
			lcd_gotoxy(1,1);
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("Interval");
    1a78:	88 e1       	ldi	r24, 0x18	; 24
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,2);
    1a80:	62 e0       	ldi	r22, 0x02	; 2
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("Finder");
    1a88:	81 e2       	ldi	r24, 0x21	; 33
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,3);
    1a90:	63 e0       	ldi	r22, 0x03	; 3
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("ID");
    1a98:	88 e2       	ldi	r24, 0x28	; 40
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (pt1 == 0)
    1aa0:	80 91 2e 02 	lds	r24, 0x022E
    1aa4:	90 91 2f 02 	lds	r25, 0x022F
    1aa8:	89 2b       	or	r24, r25
    1aaa:	19 f5       	brne	.+70     	; 0x1af2 <interface+0x35e>
			{
				lcd_gotoxy(0,1);
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    1ab4:	8b e2       	ldi	r24, 0x2B	; 43
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {pg = 3; usrv = 0; _delay_ms(pdly);}
    1abc:	cb 99       	sbic	0x19, 3	; 25
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <interface+0x338>
    1ac0:	80 91 22 02 	lds	r24, 0x0222
    1ac4:	90 91 23 02 	lds	r25, 0x0223
    1ac8:	04 97       	sbiw	r24, 0x04	; 4
    1aca:	99 f4       	brne	.+38     	; 0x1af2 <interface+0x35e>
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	90 93 31 02 	sts	0x0231, r25
    1ad4:	80 93 30 02 	sts	0x0230, r24
    1ad8:	10 92 23 02 	sts	0x0223, r1
    1adc:	10 92 22 02 	sts	0x0222, r1
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	21 ee       	ldi	r18, 0xE1	; 225
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	91 50       	subi	r25, 0x01	; 1
    1ae8:	20 40       	sbci	r18, 0x00	; 0
    1aea:	80 40       	sbci	r24, 0x00	; 0
    1aec:	e1 f7       	brne	.-8      	; 0x1ae6 <interface+0x352>
    1aee:	00 c0       	rjmp	.+0      	; 0x1af0 <interface+0x35c>
    1af0:	00 00       	nop
			}
			if (pt1 == 1)
    1af2:	80 91 2e 02 	lds	r24, 0x022E
    1af6:	90 91 2f 02 	lds	r25, 0x022F
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <interface+0x36c>
    1afe:	68 c0       	rjmp	.+208    	; 0x1bd0 <interface+0x43c>
			{
				lcd_gotoxy(0,2);
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    1b08:	8b e2       	ldi	r24, 0x2B	; 43
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if (((PINA & (1<<3)) && (fin == 0) && (pt3 == 0)) || ((usrv == 4) && (fin == 0) && (pt3 == 0)))	{fin = 1; pt3 = 1; fcs2 = 1; usrv = 0;}
    1b10:	cb 99       	sbic	0x19, 3	; 25
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <interface+0x38c>
    1b14:	80 91 22 02 	lds	r24, 0x0222
    1b18:	90 91 23 02 	lds	r25, 0x0223
    1b1c:	04 97       	sbiw	r24, 0x04	; 4
    1b1e:	f1 f4       	brne	.+60     	; 0x1b5c <interface+0x3c8>
    1b20:	80 91 28 02 	lds	r24, 0x0228
    1b24:	90 91 29 02 	lds	r25, 0x0229
    1b28:	89 2b       	or	r24, r25
    1b2a:	c1 f4       	brne	.+48     	; 0x1b5c <interface+0x3c8>
    1b2c:	80 91 2a 02 	lds	r24, 0x022A
    1b30:	90 91 2b 02 	lds	r25, 0x022B
    1b34:	89 2b       	or	r24, r25
    1b36:	91 f4       	brne	.+36     	; 0x1b5c <interface+0x3c8>
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	90 93 29 02 	sts	0x0229, r25
    1b40:	80 93 28 02 	sts	0x0228, r24
    1b44:	90 93 2b 02 	sts	0x022B, r25
    1b48:	80 93 2a 02 	sts	0x022A, r24
    1b4c:	90 93 35 02 	sts	0x0235, r25
    1b50:	80 93 34 02 	sts	0x0234, r24
    1b54:	10 92 23 02 	sts	0x0223, r1
    1b58:	10 92 22 02 	sts	0x0222, r1
				if (((PINA & (1<<3)) == 0) /*|| ((pt3 == 1) && (usrv == 0))*/) pt3 = 0;
    1b5c:	cb 99       	sbic	0x19, 3	; 25
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <interface+0x3d4>
    1b60:	10 92 2b 02 	sts	0x022B, r1
    1b64:	10 92 2a 02 	sts	0x022A, r1
				if (((PINA & (1<<3)) && (fin == 1) && (pt3 == 0)) || ((usrv == 4) && (fin == 1) && (pt3 == 0)))	{fin = 0; pt3 = 1; fcs2 = 1; usrv = 0;}
    1b68:	cb 99       	sbic	0x19, 3	; 25
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <interface+0x3e4>
    1b6c:	80 91 22 02 	lds	r24, 0x0222
    1b70:	90 91 23 02 	lds	r25, 0x0223
    1b74:	04 97       	sbiw	r24, 0x04	; 4
    1b76:	f1 f4       	brne	.+60     	; 0x1bb4 <interface+0x420>
    1b78:	80 91 28 02 	lds	r24, 0x0228
    1b7c:	90 91 29 02 	lds	r25, 0x0229
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	c1 f4       	brne	.+48     	; 0x1bb4 <interface+0x420>
    1b84:	80 91 2a 02 	lds	r24, 0x022A
    1b88:	90 91 2b 02 	lds	r25, 0x022B
    1b8c:	89 2b       	or	r24, r25
    1b8e:	91 f4       	brne	.+36     	; 0x1bb4 <interface+0x420>
    1b90:	10 92 29 02 	sts	0x0229, r1
    1b94:	10 92 28 02 	sts	0x0228, r1
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	90 93 2b 02 	sts	0x022B, r25
    1ba0:	80 93 2a 02 	sts	0x022A, r24
    1ba4:	90 93 35 02 	sts	0x0235, r25
    1ba8:	80 93 34 02 	sts	0x0234, r24
    1bac:	10 92 23 02 	sts	0x0223, r1
    1bb0:	10 92 22 02 	sts	0x0222, r1
				if (((PINA & (1<<3)) == 0)/* || ((pt3 == 1) && (usrv == 0))*/) pt3 = 0;
    1bb4:	cb 99       	sbic	0x19, 3	; 25
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <interface+0x42c>
    1bb8:	10 92 2b 02 	sts	0x022B, r1
    1bbc:	10 92 2a 02 	sts	0x022A, r1
				if (fin == 1) ledsgn();
    1bc0:	80 91 28 02 	lds	r24, 0x0228
    1bc4:	90 91 29 02 	lds	r25, 0x0229
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <interface+0x43c>
    1bcc:	0e 94 4d 09 	call	0x129a	; 0x129a <ledsgn>
			}
			if (pt1 == 2)
    1bd0:	80 91 2e 02 	lds	r24, 0x022E
    1bd4:	90 91 2f 02 	lds	r25, 0x022F
    1bd8:	02 97       	sbiw	r24, 0x02	; 2
    1bda:	19 f5       	brne	.+70     	; 0x1c22 <interface+0x48e>
			{
				lcd_gotoxy(0,3);
    1bdc:	63 e0       	ldi	r22, 0x03	; 3
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    1be4:	8b e2       	ldi	r24, 0x2B	; 43
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {pg = 4; usrv = 0; _delay_ms(pdly);}
    1bec:	cb 99       	sbic	0x19, 3	; 25
    1bee:	06 c0       	rjmp	.+12     	; 0x1bfc <interface+0x468>
    1bf0:	80 91 22 02 	lds	r24, 0x0222
    1bf4:	90 91 23 02 	lds	r25, 0x0223
    1bf8:	04 97       	sbiw	r24, 0x04	; 4
    1bfa:	99 f4       	brne	.+38     	; 0x1c22 <interface+0x48e>
    1bfc:	84 e0       	ldi	r24, 0x04	; 4
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	90 93 31 02 	sts	0x0231, r25
    1c04:	80 93 30 02 	sts	0x0230, r24
    1c08:	10 92 23 02 	sts	0x0223, r1
    1c0c:	10 92 22 02 	sts	0x0222, r1
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	21 ee       	ldi	r18, 0xE1	; 225
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	91 50       	subi	r25, 0x01	; 1
    1c18:	20 40       	sbci	r18, 0x00	; 0
    1c1a:	80 40       	sbci	r24, 0x00	; 0
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <interface+0x482>
    1c1e:	00 c0       	rjmp	.+0      	; 0x1c20 <interface+0x48c>
    1c20:	00 00       	nop
			}
		}
		if ((pt1 == 3) | (pt1 == 4))
    1c22:	80 91 2e 02 	lds	r24, 0x022E
    1c26:	90 91 2f 02 	lds	r25, 0x022F
    1c2a:	03 97       	sbiw	r24, 0x03	; 3
    1c2c:	02 97       	sbiw	r24, 0x02	; 2
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <interface+0x49e>
    1c30:	f4 c0       	rjmp	.+488    	; 0x1e1a <interface+0x686>
		{
			lcd_gotoxy(1,1);
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("ID");
    1c3a:	88 e2       	ldi	r24, 0x28	; 40
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,2);
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("Interface");
    1c4a:	8d e2       	ldi	r24, 0x2D	; 45
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,3);
    1c52:	63 e0       	ldi	r22, 0x03	; 3
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("Data Log");
    1c5a:	87 e3       	ldi	r24, 0x37	; 55
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (pt1 == 3)
    1c62:	80 91 2e 02 	lds	r24, 0x022E
    1c66:	90 91 2f 02 	lds	r25, 0x022F
    1c6a:	03 97       	sbiw	r24, 0x03	; 3
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <interface+0x4dc>
    1c6e:	4b c0       	rjmp	.+150    	; 0x1d06 <interface+0x572>
			{
				lcd_gotoxy(0,2);
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    1c78:	8b e2       	ldi	r24, 0x2B	; 43
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				eiac = eeprom_read_byte(&eeiac);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__eerd_byte_m16a>
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	90 93 1b 02 	sts	0x021B, r25
    1c8e:	80 93 1a 02 	sts	0x021A, r24
				if ((PINA & (1<<3)) && (eiac != 1) && (pt4 == 0))	{eeprom_write_byte(&eeiac, 1); pt4 = 1;}
    1c92:	cb 9b       	sbis	0x19, 3	; 25
    1c94:	13 c0       	rjmp	.+38     	; 0x1cbc <interface+0x528>
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	89 f0       	breq	.+34     	; 0x1cbc <interface+0x528>
    1c9a:	80 91 18 02 	lds	r24, 0x0218
    1c9e:	90 91 19 02 	lds	r25, 0x0219
    1ca2:	89 2b       	or	r24, r25
    1ca4:	59 f4       	brne	.+22     	; 0x1cbc <interface+0x528>
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	90 93 19 02 	sts	0x0219, r25
    1cb8:	80 93 18 02 	sts	0x0218, r24
				if ((PINA & (1<<3)) == 0) pt4 = 0;
    1cbc:	cb 99       	sbic	0x19, 3	; 25
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <interface+0x534>
    1cc0:	10 92 19 02 	sts	0x0219, r1
    1cc4:	10 92 18 02 	sts	0x0218, r1
				if ((PINA & (1<<3)) && (eiac == 1) && (pt4 == 0))	{eeprom_write_byte(&eeiac, 0); pt4 = 1;}
    1cc8:	cb 9b       	sbis	0x19, 3	; 25
    1cca:	17 c0       	rjmp	.+46     	; 0x1cfa <interface+0x566>
    1ccc:	80 91 1a 02 	lds	r24, 0x021A
    1cd0:	90 91 1b 02 	lds	r25, 0x021B
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	89 f4       	brne	.+34     	; 0x1cfa <interface+0x566>
    1cd8:	80 91 18 02 	lds	r24, 0x0218
    1cdc:	90 91 19 02 	lds	r25, 0x0219
    1ce0:	89 2b       	or	r24, r25
    1ce2:	59 f4       	brne	.+22     	; 0x1cfa <interface+0x566>
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	90 93 19 02 	sts	0x0219, r25
    1cf6:	80 93 18 02 	sts	0x0218, r24
				if ((PINA & (1<<3)) == 0) pt4 = 0;	
    1cfa:	cb 99       	sbic	0x19, 3	; 25
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <interface+0x572>
    1cfe:	10 92 19 02 	sts	0x0219, r1
    1d02:	10 92 18 02 	sts	0x0218, r1
			}
			if (pt1 == 4)
    1d06:	80 91 2e 02 	lds	r24, 0x022E
    1d0a:	90 91 2f 02 	lds	r25, 0x022F
    1d0e:	04 97       	sbiw	r24, 0x04	; 4
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <interface+0x580>
    1d12:	4b c0       	rjmp	.+150    	; 0x1daa <interface+0x616>
			{
				lcd_gotoxy(0,3);
    1d14:	63 e0       	ldi	r22, 0x03	; 3
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    1d1c:	8b e2       	ldi	r24, 0x2B	; 43
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				dlac = eeprom_read_byte(&edlac);
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__eerd_byte_m16a>
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	90 93 17 02 	sts	0x0217, r25
    1d32:	80 93 16 02 	sts	0x0216, r24
				if ((PINA & (1<<3)) && (dlac != 1) && (pt5 == 0))	{eeprom_write_byte(&edlac, 1); pt5 = 1;}
    1d36:	cb 9b       	sbis	0x19, 3	; 25
    1d38:	13 c0       	rjmp	.+38     	; 0x1d60 <interface+0x5cc>
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	89 f0       	breq	.+34     	; 0x1d60 <interface+0x5cc>
    1d3e:	80 91 14 02 	lds	r24, 0x0214
    1d42:	90 91 15 02 	lds	r25, 0x0215
    1d46:	89 2b       	or	r24, r25
    1d48:	59 f4       	brne	.+22     	; 0x1d60 <interface+0x5cc>
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	90 93 15 02 	sts	0x0215, r25
    1d5c:	80 93 14 02 	sts	0x0214, r24
				if ((PINA & (1<<3)) == 0) pt5 = 0;
    1d60:	cb 99       	sbic	0x19, 3	; 25
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <interface+0x5d8>
    1d64:	10 92 15 02 	sts	0x0215, r1
    1d68:	10 92 14 02 	sts	0x0214, r1
				if ((PINA & (1<<3)) && (dlac == 1) && (pt5 == 0))	{eeprom_write_byte(&edlac, 0); pt5 = 1;}
    1d6c:	cb 9b       	sbis	0x19, 3	; 25
    1d6e:	17 c0       	rjmp	.+46     	; 0x1d9e <interface+0x60a>
    1d70:	80 91 16 02 	lds	r24, 0x0216
    1d74:	90 91 17 02 	lds	r25, 0x0217
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	89 f4       	brne	.+34     	; 0x1d9e <interface+0x60a>
    1d7c:	80 91 14 02 	lds	r24, 0x0214
    1d80:	90 91 15 02 	lds	r25, 0x0215
    1d84:	89 2b       	or	r24, r25
    1d86:	59 f4       	brne	.+22     	; 0x1d9e <interface+0x60a>
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	90 93 15 02 	sts	0x0215, r25
    1d9a:	80 93 14 02 	sts	0x0214, r24
				if ((PINA & (1<<3)) == 0) pt5 = 0;
    1d9e:	cb 99       	sbic	0x19, 3	; 25
    1da0:	04 c0       	rjmp	.+8      	; 0x1daa <interface+0x616>
    1da2:	10 92 15 02 	sts	0x0215, r1
    1da6:	10 92 14 02 	sts	0x0214, r1
			}
			if (eiac == 1) {lcd_gotoxy(11,2); lcd_puts("Off");}
    1daa:	80 91 1a 02 	lds	r24, 0x021A
    1dae:	90 91 1b 02 	lds	r25, 0x021B
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	41 f4       	brne	.+16     	; 0x1dc6 <interface+0x632>
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	8b e0       	ldi	r24, 0x0B	; 11
    1dba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    1dbe:	80 e4       	ldi	r24, 0x40	; 64
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (eiac == 0) {lcd_gotoxy(11,2); lcd_puts("On");}
    1dc6:	80 91 1a 02 	lds	r24, 0x021A
    1dca:	90 91 1b 02 	lds	r25, 0x021B
    1dce:	89 2b       	or	r24, r25
    1dd0:	41 f4       	brne	.+16     	; 0x1de2 <interface+0x64e>
    1dd2:	62 e0       	ldi	r22, 0x02	; 2
    1dd4:	8b e0       	ldi	r24, 0x0B	; 11
    1dd6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    1dda:	84 e4       	ldi	r24, 0x44	; 68
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (dlac == 1) {lcd_gotoxy(11,3); lcd_puts("Off");}
    1de2:	80 91 16 02 	lds	r24, 0x0216
    1de6:	90 91 17 02 	lds	r25, 0x0217
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	41 f4       	brne	.+16     	; 0x1dfe <interface+0x66a>
    1dee:	63 e0       	ldi	r22, 0x03	; 3
    1df0:	8b e0       	ldi	r24, 0x0B	; 11
    1df2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    1df6:	80 e4       	ldi	r24, 0x40	; 64
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (dlac == 0) {lcd_gotoxy(11,3); lcd_puts("On");}
    1dfe:	80 91 16 02 	lds	r24, 0x0216
    1e02:	90 91 17 02 	lds	r25, 0x0217
    1e06:	89 2b       	or	r24, r25
    1e08:	41 f4       	brne	.+16     	; 0x1e1a <interface+0x686>
    1e0a:	63 e0       	ldi	r22, 0x03	; 3
    1e0c:	8b e0       	ldi	r24, 0x0B	; 11
    1e0e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    1e12:	84 e4       	ldi	r24, 0x44	; 68
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    1e1a:	9f ef       	ldi	r25, 0xFF	; 255
    1e1c:	20 e7       	ldi	r18, 0x70	; 112
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	91 50       	subi	r25, 0x01	; 1
    1e22:	20 40       	sbci	r18, 0x00	; 0
    1e24:	80 40       	sbci	r24, 0x00	; 0
    1e26:	e1 f7       	brne	.-8      	; 0x1e20 <interface+0x68c>
    1e28:	00 c0       	rjmp	.+0      	; 0x1e2a <interface+0x696>
    1e2a:	00 00       	nop
		}
		_delay_ms(100);
		if ((PINA & (1<<1)) || (usrv == 2)) {pt1++; usrv = 0; _delay_ms(pdly);}
    1e2c:	c9 99       	sbic	0x19, 1	; 25
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <interface+0x6a8>
    1e30:	80 91 22 02 	lds	r24, 0x0222
    1e34:	90 91 23 02 	lds	r25, 0x0223
    1e38:	02 97       	sbiw	r24, 0x02	; 2
    1e3a:	b1 f4       	brne	.+44     	; 0x1e68 <interface+0x6d4>
    1e3c:	80 91 2e 02 	lds	r24, 0x022E
    1e40:	90 91 2f 02 	lds	r25, 0x022F
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	90 93 2f 02 	sts	0x022F, r25
    1e4a:	80 93 2e 02 	sts	0x022E, r24
    1e4e:	10 92 23 02 	sts	0x0223, r1
    1e52:	10 92 22 02 	sts	0x0222, r1
    1e56:	9f ef       	ldi	r25, 0xFF	; 255
    1e58:	21 ee       	ldi	r18, 0xE1	; 225
    1e5a:	84 e0       	ldi	r24, 0x04	; 4
    1e5c:	91 50       	subi	r25, 0x01	; 1
    1e5e:	20 40       	sbci	r18, 0x00	; 0
    1e60:	80 40       	sbci	r24, 0x00	; 0
    1e62:	e1 f7       	brne	.-8      	; 0x1e5c <interface+0x6c8>
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <interface+0x6d2>
    1e66:	00 00       	nop
		if (pt1 > 4) pt1 = 0;
    1e68:	80 91 2e 02 	lds	r24, 0x022E
    1e6c:	90 91 2f 02 	lds	r25, 0x022F
    1e70:	05 97       	sbiw	r24, 0x05	; 5
    1e72:	24 f0       	brlt	.+8      	; 0x1e7c <interface+0x6e8>
    1e74:	10 92 2f 02 	sts	0x022F, r1
    1e78:	10 92 2e 02 	sts	0x022E, r1
		if ((PINA & (1<<2)) || (usrv == 3)) {pt1--; usrv = 0; _delay_ms(pdly);}
    1e7c:	ca 99       	sbic	0x19, 2	; 25
    1e7e:	06 c0       	rjmp	.+12     	; 0x1e8c <interface+0x6f8>
    1e80:	80 91 22 02 	lds	r24, 0x0222
    1e84:	90 91 23 02 	lds	r25, 0x0223
    1e88:	03 97       	sbiw	r24, 0x03	; 3
    1e8a:	b1 f4       	brne	.+44     	; 0x1eb8 <interface+0x724>
    1e8c:	80 91 2e 02 	lds	r24, 0x022E
    1e90:	90 91 2f 02 	lds	r25, 0x022F
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	90 93 2f 02 	sts	0x022F, r25
    1e9a:	80 93 2e 02 	sts	0x022E, r24
    1e9e:	10 92 23 02 	sts	0x0223, r1
    1ea2:	10 92 22 02 	sts	0x0222, r1
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	21 ee       	ldi	r18, 0xE1	; 225
    1eaa:	84 e0       	ldi	r24, 0x04	; 4
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	20 40       	sbci	r18, 0x00	; 0
    1eb0:	80 40       	sbci	r24, 0x00	; 0
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <interface+0x718>
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <interface+0x722>
    1eb6:	00 00       	nop
		if (pt1 < 0) pt1 = 4;
    1eb8:	80 91 2e 02 	lds	r24, 0x022E
    1ebc:	90 91 2f 02 	lds	r25, 0x022F
    1ec0:	99 23       	and	r25, r25
    1ec2:	34 f4       	brge	.+12     	; 0x1ed0 <interface+0x73c>
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	90 93 2f 02 	sts	0x022F, r25
    1ecc:	80 93 2e 02 	sts	0x022E, r24
		if ((PINA & (1<<0)) || (usrv == 1)) {pg = 0; usrv = 0; _delay_ms(pdly);}
    1ed0:	c8 99       	sbic	0x19, 0	; 25
    1ed2:	06 c0       	rjmp	.+12     	; 0x1ee0 <interface+0x74c>
    1ed4:	80 91 22 02 	lds	r24, 0x0222
    1ed8:	90 91 23 02 	lds	r25, 0x0223
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	89 f4       	brne	.+34     	; 0x1f02 <interface+0x76e>
    1ee0:	10 92 31 02 	sts	0x0231, r1
    1ee4:	10 92 30 02 	sts	0x0230, r1
    1ee8:	10 92 23 02 	sts	0x0223, r1
    1eec:	10 92 22 02 	sts	0x0222, r1
    1ef0:	9f ef       	ldi	r25, 0xFF	; 255
    1ef2:	21 ee       	ldi	r18, 0xE1	; 225
    1ef4:	84 e0       	ldi	r24, 0x04	; 4
    1ef6:	91 50       	subi	r25, 0x01	; 1
    1ef8:	20 40       	sbci	r18, 0x00	; 0
    1efa:	80 40       	sbci	r24, 0x00	; 0
    1efc:	e1 f7       	brne	.-8      	; 0x1ef6 <interface+0x762>
    1efe:	00 c0       	rjmp	.+0      	; 0x1f00 <interface+0x76c>
    1f00:	00 00       	nop
	}
	if (pg == 3)									// Interval
    1f02:	80 91 30 02 	lds	r24, 0x0230
    1f06:	90 91 31 02 	lds	r25, 0x0231
    1f0a:	03 97       	sbiw	r24, 0x03	; 3
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <interface+0x77c>
    1f0e:	bb c1       	rjmp	.+886    	; 0x2286 <interface+0xaf2>
	{
		lcd_clrscr();
    1f10:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		lcd_gotoxy(11,3);
    1f14:	63 e0       	ldi	r22, 0x03	; 3
    1f16:	8b e0       	ldi	r24, 0x0B	; 11
    1f18:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		dly = eeprom_read_byte(&eedly);
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__eerd_byte_m16a>
    1f24:	80 93 b8 02 	sts	0x02B8, r24
		if (dly == 0) lcd_puts("(2s )");
    1f28:	81 11       	cpse	r24, r1
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <interface+0x7a0>
    1f2c:	87 e4       	ldi	r24, 0x47	; 71
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (dly == 1) lcd_puts("(5s )");
    1f34:	80 91 b8 02 	lds	r24, 0x02B8
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <interface+0x7b0>
    1f3c:	8d e4       	ldi	r24, 0x4D	; 77
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (dly == 2) lcd_puts("(10s)");
    1f44:	80 91 b8 02 	lds	r24, 0x02B8
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	21 f4       	brne	.+8      	; 0x1f54 <interface+0x7c0>
    1f4c:	83 e5       	ldi	r24, 0x53	; 83
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (dly == 3) lcd_puts("(30s)");
    1f54:	80 91 b8 02 	lds	r24, 0x02B8
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <interface+0x7d0>
    1f5c:	89 e5       	ldi	r24, 0x59	; 89
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (dly == 4) lcd_puts("(1m )");
    1f64:	80 91 b8 02 	lds	r24, 0x02B8
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <interface+0x7e0>
    1f6c:	8f e5       	ldi	r24, 0x5F	; 95
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if ((pt2 == 0) | (pt2 == 1) | (pt2 == 2))
    1f74:	80 91 2c 02 	lds	r24, 0x022C
    1f78:	90 91 2d 02 	lds	r25, 0x022D
    1f7c:	03 97       	sbiw	r24, 0x03	; 3
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <interface+0x7ee>
    1f80:	96 c0       	rjmp	.+300    	; 0x20ae <interface+0x91a>
		{
			bcksgn();
    1f82:	0e 94 88 07 	call	0xf10	; 0xf10 <bcksgn>
			entmemsgn();
    1f86:	0e 94 aa 07 	call	0xf54	; 0xf54 <entmemsgn>
			selsgn();
    1f8a:	0e 94 fb 07 	call	0xff6	; 0xff6 <selsgn>
			lcd_gotoxy(1,1);
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("2s");
    1f96:	85 e6       	ldi	r24, 0x65	; 101
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,2);
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("5s");
    1fa6:	88 e6       	ldi	r24, 0x68	; 104
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,3);
    1fae:	63 e0       	ldi	r22, 0x03	; 3
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("10s");
    1fb6:	8b e6       	ldi	r24, 0x6B	; 107
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (pt2 == 0)
    1fbe:	80 91 2c 02 	lds	r24, 0x022C
    1fc2:	90 91 2d 02 	lds	r25, 0x022D
    1fc6:	89 2b       	or	r24, r25
    1fc8:	11 f5       	brne	.+68     	; 0x200e <interface+0x87a>
			{
				lcd_gotoxy(0,1);
    1fca:	61 e0       	ldi	r22, 0x01	; 1
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    1fd2:	8b e2       	ldi	r24, 0x2B	; 43
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {eeprom_write_byte(&eedly, 0); usrv = 0; _delay_ms(pdly);}
    1fda:	cb 99       	sbic	0x19, 3	; 25
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <interface+0x856>
    1fde:	80 91 22 02 	lds	r24, 0x0222
    1fe2:	90 91 23 02 	lds	r25, 0x0223
    1fe6:	04 97       	sbiw	r24, 0x04	; 4
    1fe8:	91 f4       	brne	.+36     	; 0x200e <interface+0x87a>
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    1ff4:	10 92 23 02 	sts	0x0223, r1
    1ff8:	10 92 22 02 	sts	0x0222, r1
    1ffc:	9f ef       	ldi	r25, 0xFF	; 255
    1ffe:	21 ee       	ldi	r18, 0xE1	; 225
    2000:	84 e0       	ldi	r24, 0x04	; 4
    2002:	91 50       	subi	r25, 0x01	; 1
    2004:	20 40       	sbci	r18, 0x00	; 0
    2006:	80 40       	sbci	r24, 0x00	; 0
    2008:	e1 f7       	brne	.-8      	; 0x2002 <interface+0x86e>
    200a:	00 c0       	rjmp	.+0      	; 0x200c <interface+0x878>
    200c:	00 00       	nop
			}
			if (pt2 == 1)
    200e:	80 91 2c 02 	lds	r24, 0x022C
    2012:	90 91 2d 02 	lds	r25, 0x022D
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	11 f5       	brne	.+68     	; 0x205e <interface+0x8ca>
			{
				lcd_gotoxy(0,2);
    201a:	62 e0       	ldi	r22, 0x02	; 2
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    2022:	8b e2       	ldi	r24, 0x2B	; 43
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {eeprom_write_byte(&eedly, 1); usrv = 0; _delay_ms(pdly);}
    202a:	cb 99       	sbic	0x19, 3	; 25
    202c:	06 c0       	rjmp	.+12     	; 0x203a <interface+0x8a6>
    202e:	80 91 22 02 	lds	r24, 0x0222
    2032:	90 91 23 02 	lds	r25, 0x0223
    2036:	04 97       	sbiw	r24, 0x04	; 4
    2038:	91 f4       	brne	.+36     	; 0x205e <interface+0x8ca>
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    2044:	10 92 23 02 	sts	0x0223, r1
    2048:	10 92 22 02 	sts	0x0222, r1
    204c:	9f ef       	ldi	r25, 0xFF	; 255
    204e:	21 ee       	ldi	r18, 0xE1	; 225
    2050:	84 e0       	ldi	r24, 0x04	; 4
    2052:	91 50       	subi	r25, 0x01	; 1
    2054:	20 40       	sbci	r18, 0x00	; 0
    2056:	80 40       	sbci	r24, 0x00	; 0
    2058:	e1 f7       	brne	.-8      	; 0x2052 <interface+0x8be>
    205a:	00 c0       	rjmp	.+0      	; 0x205c <interface+0x8c8>
    205c:	00 00       	nop
			}
			if (pt2 == 2)
    205e:	80 91 2c 02 	lds	r24, 0x022C
    2062:	90 91 2d 02 	lds	r25, 0x022D
    2066:	02 97       	sbiw	r24, 0x02	; 2
    2068:	11 f5       	brne	.+68     	; 0x20ae <interface+0x91a>
			{
				lcd_gotoxy(0,3);
    206a:	63 e0       	ldi	r22, 0x03	; 3
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    2072:	8b e2       	ldi	r24, 0x2B	; 43
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {eeprom_write_byte(&eedly, 2); usrv = 0; _delay_ms(pdly);}
    207a:	cb 99       	sbic	0x19, 3	; 25
    207c:	06 c0       	rjmp	.+12     	; 0x208a <interface+0x8f6>
    207e:	80 91 22 02 	lds	r24, 0x0222
    2082:	90 91 23 02 	lds	r25, 0x0223
    2086:	04 97       	sbiw	r24, 0x04	; 4
    2088:	91 f4       	brne	.+36     	; 0x20ae <interface+0x91a>
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    2094:	10 92 23 02 	sts	0x0223, r1
    2098:	10 92 22 02 	sts	0x0222, r1
    209c:	9f ef       	ldi	r25, 0xFF	; 255
    209e:	21 ee       	ldi	r18, 0xE1	; 225
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	20 40       	sbci	r18, 0x00	; 0
    20a6:	80 40       	sbci	r24, 0x00	; 0
    20a8:	e1 f7       	brne	.-8      	; 0x20a2 <interface+0x90e>
    20aa:	00 c0       	rjmp	.+0      	; 0x20ac <interface+0x918>
    20ac:	00 00       	nop
			}
		}
		if ((pt2 == 3) | (pt2 == 4))
    20ae:	80 91 2c 02 	lds	r24, 0x022C
    20b2:	90 91 2d 02 	lds	r25, 0x022D
    20b6:	03 97       	sbiw	r24, 0x03	; 3
    20b8:	02 97       	sbiw	r24, 0x02	; 2
    20ba:	08 f0       	brcs	.+2      	; 0x20be <interface+0x92a>
    20bc:	6e c0       	rjmp	.+220    	; 0x219a <interface+0xa06>
		{
			bcksgn();
    20be:	0e 94 88 07 	call	0xf10	; 0xf10 <bcksgn>
			entmemsgn();
    20c2:	0e 94 aa 07 	call	0xf54	; 0xf54 <entmemsgn>
			selsgn();
    20c6:	0e 94 fb 07 	call	0xff6	; 0xff6 <selsgn>
			lcd_gotoxy(1,1);
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("10s");
    20d2:	8b e6       	ldi	r24, 0x6B	; 107
    20d4:	91 e0       	ldi	r25, 0x01	; 1
    20d6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,2);
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("30s");
    20e2:	8f e6       	ldi	r24, 0x6F	; 111
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,3);
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("1m");
    20f2:	83 e7       	ldi	r24, 0x73	; 115
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			if (pt2 == 3)
    20fa:	80 91 2c 02 	lds	r24, 0x022C
    20fe:	90 91 2d 02 	lds	r25, 0x022D
    2102:	03 97       	sbiw	r24, 0x03	; 3
    2104:	11 f5       	brne	.+68     	; 0x214a <interface+0x9b6>
			{
				lcd_gotoxy(0,2);
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    210e:	8b e2       	ldi	r24, 0x2B	; 43
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {eeprom_write_byte(&eedly, 3); usrv = 0; _delay_ms(pdly);}
    2116:	cb 99       	sbic	0x19, 3	; 25
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <interface+0x992>
    211a:	80 91 22 02 	lds	r24, 0x0222
    211e:	90 91 23 02 	lds	r25, 0x0223
    2122:	04 97       	sbiw	r24, 0x04	; 4
    2124:	91 f4       	brne	.+36     	; 0x214a <interface+0x9b6>
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    2130:	10 92 23 02 	sts	0x0223, r1
    2134:	10 92 22 02 	sts	0x0222, r1
    2138:	9f ef       	ldi	r25, 0xFF	; 255
    213a:	21 ee       	ldi	r18, 0xE1	; 225
    213c:	84 e0       	ldi	r24, 0x04	; 4
    213e:	91 50       	subi	r25, 0x01	; 1
    2140:	20 40       	sbci	r18, 0x00	; 0
    2142:	80 40       	sbci	r24, 0x00	; 0
    2144:	e1 f7       	brne	.-8      	; 0x213e <interface+0x9aa>
    2146:	00 c0       	rjmp	.+0      	; 0x2148 <interface+0x9b4>
    2148:	00 00       	nop
			}
			if (pt2 == 4)
    214a:	80 91 2c 02 	lds	r24, 0x022C
    214e:	90 91 2d 02 	lds	r25, 0x022D
    2152:	04 97       	sbiw	r24, 0x04	; 4
    2154:	11 f5       	brne	.+68     	; 0x219a <interface+0xa06>
			{
				lcd_gotoxy(0,3);
    2156:	63 e0       	ldi	r22, 0x03	; 3
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
				lcd_puts(">");
    215e:	8b e2       	ldi	r24, 0x2B	; 43
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
				if ((PINA & (1<<3)) || (usrv == 4)) {eeprom_write_byte(&eedly, 4); usrv = 0; _delay_ms(pdly);}
    2166:	cb 99       	sbic	0x19, 3	; 25
    2168:	06 c0       	rjmp	.+12     	; 0x2176 <interface+0x9e2>
    216a:	80 91 22 02 	lds	r24, 0x0222
    216e:	90 91 23 02 	lds	r25, 0x0223
    2172:	04 97       	sbiw	r24, 0x04	; 4
    2174:	91 f4       	brne	.+36     	; 0x219a <interface+0xa06>
    2176:	64 e0       	ldi	r22, 0x04	; 4
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__eewr_byte_m16a>
    2180:	10 92 23 02 	sts	0x0223, r1
    2184:	10 92 22 02 	sts	0x0222, r1
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	21 ee       	ldi	r18, 0xE1	; 225
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	91 50       	subi	r25, 0x01	; 1
    2190:	20 40       	sbci	r18, 0x00	; 0
    2192:	80 40       	sbci	r24, 0x00	; 0
    2194:	e1 f7       	brne	.-8      	; 0x218e <interface+0x9fa>
    2196:	00 c0       	rjmp	.+0      	; 0x2198 <interface+0xa04>
    2198:	00 00       	nop
			}
		}
		if ((PINA & (1<<1)) || (usrv == 2)) {pt2++; usrv = 0; _delay_ms(pdly);}
    219a:	c9 99       	sbic	0x19, 1	; 25
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <interface+0xa16>
    219e:	80 91 22 02 	lds	r24, 0x0222
    21a2:	90 91 23 02 	lds	r25, 0x0223
    21a6:	02 97       	sbiw	r24, 0x02	; 2
    21a8:	b1 f4       	brne	.+44     	; 0x21d6 <interface+0xa42>
    21aa:	80 91 2c 02 	lds	r24, 0x022C
    21ae:	90 91 2d 02 	lds	r25, 0x022D
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	90 93 2d 02 	sts	0x022D, r25
    21b8:	80 93 2c 02 	sts	0x022C, r24
    21bc:	10 92 23 02 	sts	0x0223, r1
    21c0:	10 92 22 02 	sts	0x0222, r1
    21c4:	9f ef       	ldi	r25, 0xFF	; 255
    21c6:	21 ee       	ldi	r18, 0xE1	; 225
    21c8:	84 e0       	ldi	r24, 0x04	; 4
    21ca:	91 50       	subi	r25, 0x01	; 1
    21cc:	20 40       	sbci	r18, 0x00	; 0
    21ce:	80 40       	sbci	r24, 0x00	; 0
    21d0:	e1 f7       	brne	.-8      	; 0x21ca <interface+0xa36>
    21d2:	00 c0       	rjmp	.+0      	; 0x21d4 <interface+0xa40>
    21d4:	00 00       	nop
		if (pt2 > 4) pt2 = 0;
    21d6:	80 91 2c 02 	lds	r24, 0x022C
    21da:	90 91 2d 02 	lds	r25, 0x022D
    21de:	05 97       	sbiw	r24, 0x05	; 5
    21e0:	24 f0       	brlt	.+8      	; 0x21ea <interface+0xa56>
    21e2:	10 92 2d 02 	sts	0x022D, r1
    21e6:	10 92 2c 02 	sts	0x022C, r1
		if ((PINA & (1<<2)) || (usrv == 3)) {pt2--; usrv = 0; _delay_ms(pdly);}
    21ea:	ca 99       	sbic	0x19, 2	; 25
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <interface+0xa66>
    21ee:	80 91 22 02 	lds	r24, 0x0222
    21f2:	90 91 23 02 	lds	r25, 0x0223
    21f6:	03 97       	sbiw	r24, 0x03	; 3
    21f8:	b1 f4       	brne	.+44     	; 0x2226 <interface+0xa92>
    21fa:	80 91 2c 02 	lds	r24, 0x022C
    21fe:	90 91 2d 02 	lds	r25, 0x022D
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	90 93 2d 02 	sts	0x022D, r25
    2208:	80 93 2c 02 	sts	0x022C, r24
    220c:	10 92 23 02 	sts	0x0223, r1
    2210:	10 92 22 02 	sts	0x0222, r1
    2214:	9f ef       	ldi	r25, 0xFF	; 255
    2216:	21 ee       	ldi	r18, 0xE1	; 225
    2218:	84 e0       	ldi	r24, 0x04	; 4
    221a:	91 50       	subi	r25, 0x01	; 1
    221c:	20 40       	sbci	r18, 0x00	; 0
    221e:	80 40       	sbci	r24, 0x00	; 0
    2220:	e1 f7       	brne	.-8      	; 0x221a <interface+0xa86>
    2222:	00 c0       	rjmp	.+0      	; 0x2224 <interface+0xa90>
    2224:	00 00       	nop
		if (pt2 < 0) pt2 = 4;
    2226:	80 91 2c 02 	lds	r24, 0x022C
    222a:	90 91 2d 02 	lds	r25, 0x022D
    222e:	99 23       	and	r25, r25
    2230:	34 f4       	brge	.+12     	; 0x223e <interface+0xaaa>
    2232:	84 e0       	ldi	r24, 0x04	; 4
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	90 93 2d 02 	sts	0x022D, r25
    223a:	80 93 2c 02 	sts	0x022C, r24
		if ((PINA & (1<<0)) || (usrv == 1)) {pg = 2; usrv = 0; _delay_ms(pdly);}
    223e:	c8 99       	sbic	0x19, 0	; 25
    2240:	06 c0       	rjmp	.+12     	; 0x224e <interface+0xaba>
    2242:	80 91 22 02 	lds	r24, 0x0222
    2246:	90 91 23 02 	lds	r25, 0x0223
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	99 f4       	brne	.+38     	; 0x2274 <interface+0xae0>
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	90 93 31 02 	sts	0x0231, r25
    2256:	80 93 30 02 	sts	0x0230, r24
    225a:	10 92 23 02 	sts	0x0223, r1
    225e:	10 92 22 02 	sts	0x0222, r1
    2262:	9f ef       	ldi	r25, 0xFF	; 255
    2264:	21 ee       	ldi	r18, 0xE1	; 225
    2266:	84 e0       	ldi	r24, 0x04	; 4
    2268:	91 50       	subi	r25, 0x01	; 1
    226a:	20 40       	sbci	r18, 0x00	; 0
    226c:	80 40       	sbci	r24, 0x00	; 0
    226e:	e1 f7       	brne	.-8      	; 0x2268 <interface+0xad4>
    2270:	00 c0       	rjmp	.+0      	; 0x2272 <interface+0xade>
    2272:	00 00       	nop
    2274:	9f ef       	ldi	r25, 0xFF	; 255
    2276:	20 e7       	ldi	r18, 0x70	; 112
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	91 50       	subi	r25, 0x01	; 1
    227c:	20 40       	sbci	r18, 0x00	; 0
    227e:	80 40       	sbci	r24, 0x00	; 0
    2280:	e1 f7       	brne	.-8      	; 0x227a <interface+0xae6>
    2282:	00 c0       	rjmp	.+0      	; 0x2284 <interface+0xaf0>
    2284:	00 00       	nop
		_delay_ms(100);
	}
	if (pg == 4)									// ID
    2286:	80 91 30 02 	lds	r24, 0x0230
    228a:	90 91 31 02 	lds	r25, 0x0231
    228e:	04 97       	sbiw	r24, 0x04	; 4
    2290:	09 f0       	breq	.+2      	; 0x2294 <interface+0xb00>
    2292:	41 c0       	rjmp	.+130    	; 0x2316 <interface+0xb82>
    2294:	4a e0       	ldi	r20, 0x0A	; 10
    2296:	62 e1       	ldi	r22, 0x12	; 18
    2298:	73 e0       	ldi	r23, 0x03	; 3
    229a:	80 91 a0 02 	lds	r24, 0x02A0
    229e:	90 91 a1 02 	lds	r25, 0x02A1
    22a2:	0e 94 47 18 	call	0x308e	; 0x308e <__itoa_ncheck>
	{
		itoa(id, cid, 10);
		lcd_clrscr();
    22a6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		bcksgn();
    22aa:	0e 94 88 07 	call	0xf10	; 0xf10 <bcksgn>
		lcd_gotoxy(0,2);
    22ae:	62 e0       	ldi	r22, 0x02	; 2
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("ID:");
    22b6:	86 e7       	ldi	r24, 0x76	; 118
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(3,2);
    22be:	62 e0       	ldi	r22, 0x02	; 2
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts(cid);
    22c6:	82 e1       	ldi	r24, 0x12	; 18
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if ((PINA & (1<<0)) || (usrv == 1)) {pg = 2; usrv = 0; _delay_ms(pdly);}
    22ce:	c8 99       	sbic	0x19, 0	; 25
    22d0:	06 c0       	rjmp	.+12     	; 0x22de <interface+0xb4a>
    22d2:	80 91 22 02 	lds	r24, 0x0222
    22d6:	90 91 23 02 	lds	r25, 0x0223
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	99 f4       	brne	.+38     	; 0x2304 <interface+0xb70>
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	90 93 31 02 	sts	0x0231, r25
    22e6:	80 93 30 02 	sts	0x0230, r24
    22ea:	10 92 23 02 	sts	0x0223, r1
    22ee:	10 92 22 02 	sts	0x0222, r1
    22f2:	9f ef       	ldi	r25, 0xFF	; 255
    22f4:	21 ee       	ldi	r18, 0xE1	; 225
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	91 50       	subi	r25, 0x01	; 1
    22fa:	20 40       	sbci	r18, 0x00	; 0
    22fc:	80 40       	sbci	r24, 0x00	; 0
    22fe:	e1 f7       	brne	.-8      	; 0x22f8 <interface+0xb64>
    2300:	00 c0       	rjmp	.+0      	; 0x2302 <interface+0xb6e>
    2302:	00 00       	nop
    2304:	9f ef       	ldi	r25, 0xFF	; 255
    2306:	20 e7       	ldi	r18, 0x70	; 112
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	91 50       	subi	r25, 0x01	; 1
    230c:	20 40       	sbci	r18, 0x00	; 0
    230e:	80 40       	sbci	r24, 0x00	; 0
    2310:	e1 f7       	brne	.-8      	; 0x230a <interface+0xb76>
    2312:	00 c0       	rjmp	.+0      	; 0x2314 <interface+0xb80>
    2314:	00 00       	nop
		_delay_ms(100);
	}
	if (pg == 5)									// Stop
    2316:	80 91 30 02 	lds	r24, 0x0230
    231a:	90 91 31 02 	lds	r25, 0x0231
    231e:	05 97       	sbiw	r24, 0x05	; 5
    2320:	09 f0       	breq	.+2      	; 0x2324 <interface+0xb90>
    2322:	08 c1       	rjmp	.+528    	; 0x2534 <interface+0xda0>
	{
		lcd_clrscr();
    2324:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		lcd_home();
    2328:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_home>
		lcd_puts("Run DL");
    232c:	8a e7       	ldi	r24, 0x7A	; 122
    232e:	91 e0       	ldi	r25, 0x01	; 1
    2330:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		bcksgn();
    2334:	0e 94 88 07 	call	0xf10	; 0xf10 <bcksgn>
		lcd_gotoxy(0,1);
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("T1: --");
    2340:	81 e8       	ldi	r24, 0x81	; 129
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(0,2);
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("T2: --");
    2350:	88 e8       	ldi	r24, 0x88	; 136
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (onid == 1) runsgn(2);
    2358:	80 91 38 02 	lds	r24, 0x0238
    235c:	90 91 39 02 	lds	r25, 0x0239
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	21 f4       	brne	.+8      	; 0x236c <interface+0xbd8>
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (ofak == 1) runsgn(1);
    236c:	80 91 3e 02 	lds	r24, 0x023E
    2370:	90 91 3f 02 	lds	r25, 0x023F
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	21 f4       	brne	.+8      	; 0x2380 <interface+0xbec>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (ofid == 1) {rsdsgn(); onid = 0; runsgn(0);}
    2380:	80 91 3a 02 	lds	r24, 0x023A
    2384:	90 91 3b 02 	lds	r25, 0x023B
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	51 f4       	brne	.+20     	; 0x23a0 <interface+0xc0c>
    238c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rsdsgn>
    2390:	10 92 39 02 	sts	0x0239, r1
    2394:	10 92 38 02 	sts	0x0238, r1
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (dlst == 1) {entmemsgn(); mems = 1;}
    23a0:	80 91 12 02 	lds	r24, 0x0212
    23a4:	90 91 13 02 	lds	r25, 0x0213
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	41 f4       	brne	.+16     	; 0x23bc <interface+0xc28>
    23ac:	0e 94 aa 07 	call	0xf54	; 0xf54 <entmemsgn>
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	90 93 01 02 	sts	0x0201, r25
    23b8:	80 93 00 02 	sts	0x0200, r24
		if (dlst == 0) mems = 0;	
    23bc:	80 91 12 02 	lds	r24, 0x0212
    23c0:	90 91 13 02 	lds	r25, 0x0213
    23c4:	89 2b       	or	r24, r25
    23c6:	21 f4       	brne	.+8      	; 0x23d0 <interface+0xc3c>
    23c8:	10 92 01 02 	sts	0x0201, r1
    23cc:	10 92 00 02 	sts	0x0200, r1
    23d0:	9f ef       	ldi	r25, 0xFF	; 255
    23d2:	20 e7       	ldi	r18, 0x70	; 112
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	91 50       	subi	r25, 0x01	; 1
    23d8:	20 40       	sbci	r18, 0x00	; 0
    23da:	80 40       	sbci	r24, 0x00	; 0
    23dc:	e1 f7       	brne	.-8      	; 0x23d6 <interface+0xc42>
    23de:	00 c0       	rjmp	.+0      	; 0x23e0 <interface+0xc4c>
    23e0:	00 00       	nop
		_delay_ms(100);
		ofid = 0;
    23e2:	10 92 3b 02 	sts	0x023B, r1
    23e6:	10 92 3a 02 	sts	0x023A, r1
		if (ofid == 0) {lcd_gotoxy(14,3); lcd_puts(" ");}
    23ea:	63 e0       	ldi	r22, 0x03	; 3
    23ec:	8e e0       	ldi	r24, 0x0E	; 14
    23ee:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    23f2:	86 e1       	ldi	r24, 0x16	; 22
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if ((PINA & (1<<0)) || (usrv == 1)) {pg = 0; usrv = 0; _delay_ms(pdly);}
    23fa:	c8 99       	sbic	0x19, 0	; 25
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <interface+0xc76>
    23fe:	80 91 22 02 	lds	r24, 0x0222
    2402:	90 91 23 02 	lds	r25, 0x0223
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	89 f4       	brne	.+34     	; 0x242c <interface+0xc98>
    240a:	10 92 31 02 	sts	0x0231, r1
    240e:	10 92 30 02 	sts	0x0230, r1
    2412:	10 92 23 02 	sts	0x0223, r1
    2416:	10 92 22 02 	sts	0x0222, r1
    241a:	9f ef       	ldi	r25, 0xFF	; 255
    241c:	21 ee       	ldi	r18, 0xE1	; 225
    241e:	84 e0       	ldi	r24, 0x04	; 4
    2420:	91 50       	subi	r25, 0x01	; 1
    2422:	20 40       	sbci	r18, 0x00	; 0
    2424:	80 40       	sbci	r24, 0x00	; 0
    2426:	e1 f7       	brne	.-8      	; 0x2420 <interface+0xc8c>
    2428:	00 c0       	rjmp	.+0      	; 0x242a <interface+0xc96>
    242a:	00 00       	nop
			
		if (((PINA & (1<<2)) && (dlac != 1) && (dlst == 0) && (pt6 == 0)) || ((usrv == 3) && (dlst == 0) && (pt6 == 0)))	{dlst = 1; pt6 = 1; usrv = 0; erak = 0; msdfile(); _delay_ms(pdly);}
    242c:	ca 9b       	sbis	0x19, 2	; 25
    242e:	06 c0       	rjmp	.+12     	; 0x243c <interface+0xca8>
    2430:	80 91 16 02 	lds	r24, 0x0216
    2434:	90 91 17 02 	lds	r25, 0x0217
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	31 f4       	brne	.+12     	; 0x2448 <interface+0xcb4>
    243c:	80 91 22 02 	lds	r24, 0x0222
    2440:	90 91 23 02 	lds	r25, 0x0223
    2444:	03 97       	sbiw	r24, 0x03	; 3
    2446:	49 f5       	brne	.+82     	; 0x249a <interface+0xd06>
    2448:	80 91 12 02 	lds	r24, 0x0212
    244c:	90 91 13 02 	lds	r25, 0x0213
    2450:	89 2b       	or	r24, r25
    2452:	19 f5       	brne	.+70     	; 0x249a <interface+0xd06>
    2454:	80 91 10 02 	lds	r24, 0x0210
    2458:	90 91 11 02 	lds	r25, 0x0211
    245c:	89 2b       	or	r24, r25
    245e:	e9 f4       	brne	.+58     	; 0x249a <interface+0xd06>
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	90 93 13 02 	sts	0x0213, r25
    2468:	80 93 12 02 	sts	0x0212, r24
    246c:	90 93 11 02 	sts	0x0211, r25
    2470:	80 93 10 02 	sts	0x0210, r24
    2474:	10 92 23 02 	sts	0x0223, r1
    2478:	10 92 22 02 	sts	0x0222, r1
    247c:	10 92 fd 01 	sts	0x01FD, r1
    2480:	10 92 fc 01 	sts	0x01FC, r1
    2484:	0e 94 6f 09 	call	0x12de	; 0x12de <msdfile>
    2488:	9f ef       	ldi	r25, 0xFF	; 255
    248a:	21 ee       	ldi	r18, 0xE1	; 225
    248c:	84 e0       	ldi	r24, 0x04	; 4
    248e:	91 50       	subi	r25, 0x01	; 1
    2490:	20 40       	sbci	r18, 0x00	; 0
    2492:	80 40       	sbci	r24, 0x00	; 0
    2494:	e1 f7       	brne	.-8      	; 0x248e <interface+0xcfa>
    2496:	00 c0       	rjmp	.+0      	; 0x2498 <interface+0xd04>
    2498:	00 00       	nop
		if (((PINA & (1<<2)) == 0)  && (dlac != 1)) pt6 = 0;
    249a:	ca 99       	sbic	0x19, 2	; 25
    249c:	0a c0       	rjmp	.+20     	; 0x24b2 <interface+0xd1e>
    249e:	80 91 16 02 	lds	r24, 0x0216
    24a2:	90 91 17 02 	lds	r25, 0x0217
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	21 f0       	breq	.+8      	; 0x24b2 <interface+0xd1e>
    24aa:	10 92 11 02 	sts	0x0211, r1
    24ae:	10 92 10 02 	sts	0x0210, r1
		if (((PINA & (1<<2)) && (dlac != 1) && (dlst == 1) && (pt6 == 0)) || ((usrv == 3) && (dlst == 1) && (pt6 == 0)))	{dlst = 0; pt6 = 1; usrv = 0; fnc = 1;   _delay_ms(pdly);}
    24b2:	ca 9b       	sbis	0x19, 2	; 25
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <interface+0xd2e>
    24b6:	80 91 16 02 	lds	r24, 0x0216
    24ba:	90 91 17 02 	lds	r25, 0x0217
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	31 f4       	brne	.+12     	; 0x24ce <interface+0xd3a>
    24c2:	80 91 22 02 	lds	r24, 0x0222
    24c6:	90 91 23 02 	lds	r25, 0x0223
    24ca:	03 97       	sbiw	r24, 0x03	; 3
    24cc:	39 f5       	brne	.+78     	; 0x251c <interface+0xd88>
    24ce:	80 91 12 02 	lds	r24, 0x0212
    24d2:	90 91 13 02 	lds	r25, 0x0213
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	09 f5       	brne	.+66     	; 0x251c <interface+0xd88>
    24da:	80 91 10 02 	lds	r24, 0x0210
    24de:	90 91 11 02 	lds	r25, 0x0211
    24e2:	89 2b       	or	r24, r25
    24e4:	d9 f4       	brne	.+54     	; 0x251c <interface+0xd88>
    24e6:	10 92 13 02 	sts	0x0213, r1
    24ea:	10 92 12 02 	sts	0x0212, r1
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	90 93 11 02 	sts	0x0211, r25
    24f6:	80 93 10 02 	sts	0x0210, r24
    24fa:	10 92 23 02 	sts	0x0223, r1
    24fe:	10 92 22 02 	sts	0x0222, r1
    2502:	90 93 61 00 	sts	0x0061, r25
    2506:	80 93 60 00 	sts	0x0060, r24
    250a:	9f ef       	ldi	r25, 0xFF	; 255
    250c:	21 ee       	ldi	r18, 0xE1	; 225
    250e:	84 e0       	ldi	r24, 0x04	; 4
    2510:	91 50       	subi	r25, 0x01	; 1
    2512:	20 40       	sbci	r18, 0x00	; 0
    2514:	80 40       	sbci	r24, 0x00	; 0
    2516:	e1 f7       	brne	.-8      	; 0x2510 <interface+0xd7c>
    2518:	00 c0       	rjmp	.+0      	; 0x251a <interface+0xd86>
    251a:	00 00       	nop
		if (((PINA & (1<<2)) == 0)  && (dlac != 1)) pt6 = 0;
    251c:	ca 99       	sbic	0x19, 2	; 25
    251e:	0a c0       	rjmp	.+20     	; 0x2534 <interface+0xda0>
    2520:	80 91 16 02 	lds	r24, 0x0216
    2524:	90 91 17 02 	lds	r25, 0x0217
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	21 f0       	breq	.+8      	; 0x2534 <interface+0xda0>
    252c:	10 92 11 02 	sts	0x0211, r1
    2530:	10 92 10 02 	sts	0x0210, r1
	}
	if (pg == 6)									// Error - Timeout
    2534:	80 91 30 02 	lds	r24, 0x0230
    2538:	90 91 31 02 	lds	r25, 0x0231
    253c:	06 97       	sbiw	r24, 0x06	; 6
    253e:	09 f0       	breq	.+2      	; 0x2542 <interface+0xdae>
    2540:	d7 c0       	rjmp	.+430    	; 0x26f0 <interface+0xf5c>
	{
		lcd_clrscr();
    2542:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		lcd_home();
    2546:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_home>
		lcd_puts("Retry      Reset");
    254a:	8f e8       	ldi	r24, 0x8F	; 143
    254c:	91 e0       	ldi	r25, 0x01	; 1
    254e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(5,2);
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	85 e0       	ldi	r24, 0x05	; 5
    2556:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("ERROR!");
    255a:	80 ea       	ldi	r24, 0xA0	; 160
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (tots == 1) {lcd_gotoxy(0,3); lcd_puts("Receive Timeout."); onst = 0; _delay_ms(pdly);}
    2562:	80 91 3c 02 	lds	r24, 0x023C
    2566:	90 91 3d 02 	lds	r25, 0x023D
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	a9 f4       	brne	.+42     	; 0x2598 <interface+0xe04>
    256e:	63 e0       	ldi	r22, 0x03	; 3
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    2576:	87 ea       	ldi	r24, 0xA7	; 167
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    257e:	10 92 47 02 	sts	0x0247, r1
    2582:	10 92 46 02 	sts	0x0246, r1
    2586:	9f ef       	ldi	r25, 0xFF	; 255
    2588:	21 ee       	ldi	r18, 0xE1	; 225
    258a:	84 e0       	ldi	r24, 0x04	; 4
    258c:	91 50       	subi	r25, 0x01	; 1
    258e:	20 40       	sbci	r18, 0x00	; 0
    2590:	80 40       	sbci	r24, 0x00	; 0
    2592:	e1 f7       	brne	.-8      	; 0x258c <interface+0xdf8>
    2594:	00 c0       	rjmp	.+0      	; 0x2596 <interface+0xe02>
    2596:	00 00       	nop
		if (tots == 2) {lcd_gotoxy(0,3); lcd_puts("Off Ack Timeout."); ofhl = 0; _delay_ms(pdly);}
    2598:	80 91 3c 02 	lds	r24, 0x023C
    259c:	90 91 3d 02 	lds	r25, 0x023D
    25a0:	02 97       	sbiw	r24, 0x02	; 2
    25a2:	a9 f4       	brne	.+42     	; 0x25ce <interface+0xe3a>
    25a4:	63 e0       	ldi	r22, 0x03	; 3
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    25ac:	88 eb       	ldi	r24, 0xB8	; 184
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    25b4:	10 92 43 02 	sts	0x0243, r1
    25b8:	10 92 42 02 	sts	0x0242, r1
    25bc:	9f ef       	ldi	r25, 0xFF	; 255
    25be:	21 ee       	ldi	r18, 0xE1	; 225
    25c0:	84 e0       	ldi	r24, 0x04	; 4
    25c2:	91 50       	subi	r25, 0x01	; 1
    25c4:	20 40       	sbci	r18, 0x00	; 0
    25c6:	80 40       	sbci	r24, 0x00	; 0
    25c8:	e1 f7       	brne	.-8      	; 0x25c2 <interface+0xe2e>
    25ca:	00 c0       	rjmp	.+0      	; 0x25cc <interface+0xe38>
    25cc:	00 00       	nop
		if ((PINA & (1<<0)) || (usrv == 1)) {cnt1 = 0; cnt2 = 0; pg = 0; usrv = 0; _delay_ms(pdly);}
    25ce:	c8 99       	sbic	0x19, 0	; 25
    25d0:	06 c0       	rjmp	.+12     	; 0x25de <interface+0xe4a>
    25d2:	80 91 22 02 	lds	r24, 0x0222
    25d6:	90 91 23 02 	lds	r25, 0x0223
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	c9 f4       	brne	.+50     	; 0x2610 <interface+0xe7c>
    25de:	10 92 49 02 	sts	0x0249, r1
    25e2:	10 92 48 02 	sts	0x0248, r1
    25e6:	10 92 41 02 	sts	0x0241, r1
    25ea:	10 92 40 02 	sts	0x0240, r1
    25ee:	10 92 31 02 	sts	0x0231, r1
    25f2:	10 92 30 02 	sts	0x0230, r1
    25f6:	10 92 23 02 	sts	0x0223, r1
    25fa:	10 92 22 02 	sts	0x0222, r1
    25fe:	9f ef       	ldi	r25, 0xFF	; 255
    2600:	21 ee       	ldi	r18, 0xE1	; 225
    2602:	84 e0       	ldi	r24, 0x04	; 4
    2604:	91 50       	subi	r25, 0x01	; 1
    2606:	20 40       	sbci	r18, 0x00	; 0
    2608:	80 40       	sbci	r24, 0x00	; 0
    260a:	e1 f7       	brne	.-8      	; 0x2604 <interface+0xe70>
    260c:	00 c0       	rjmp	.+0      	; 0x260e <interface+0xe7a>
    260e:	00 00       	nop
		if (((PINA & (1<<3)) && (tots == 1)) || ((usrv == 4) && (tots == 1))) {rerv = 1; usrv = 0; _delay_ms(pdly);}
    2610:	cb 99       	sbic	0x19, 3	; 25
    2612:	06 c0       	rjmp	.+12     	; 0x2620 <interface+0xe8c>
    2614:	80 91 22 02 	lds	r24, 0x0222
    2618:	90 91 23 02 	lds	r25, 0x0223
    261c:	04 97       	sbiw	r24, 0x04	; 4
    261e:	c9 f4       	brne	.+50     	; 0x2652 <interface+0xebe>
    2620:	80 91 3c 02 	lds	r24, 0x023C
    2624:	90 91 3d 02 	lds	r25, 0x023D
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	99 f4       	brne	.+38     	; 0x2652 <interface+0xebe>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	90 93 33 02 	sts	0x0233, r25
    2634:	80 93 32 02 	sts	0x0232, r24
    2638:	10 92 23 02 	sts	0x0223, r1
    263c:	10 92 22 02 	sts	0x0222, r1
    2640:	9f ef       	ldi	r25, 0xFF	; 255
    2642:	21 ee       	ldi	r18, 0xE1	; 225
    2644:	84 e0       	ldi	r24, 0x04	; 4
    2646:	91 50       	subi	r25, 0x01	; 1
    2648:	20 40       	sbci	r18, 0x00	; 0
    264a:	80 40       	sbci	r24, 0x00	; 0
    264c:	e1 f7       	brne	.-8      	; 0x2646 <interface+0xeb2>
    264e:	00 c0       	rjmp	.+0      	; 0x2650 <interface+0xebc>
    2650:	00 00       	nop
		if (((rerv == 1) && ((PINA & (1<<3)) == 0)) || ((rerv == 1) && (usrv == 0))) {cnt1 = 0; pg = 1; onst = 1; tots = 0; rerv = 0;}
    2652:	80 91 32 02 	lds	r24, 0x0232
    2656:	90 91 33 02 	lds	r25, 0x0233
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f4       	brne	.+60     	; 0x269a <interface+0xf06>
    265e:	cb 9b       	sbis	0x19, 3	; 25
    2660:	06 c0       	rjmp	.+12     	; 0x266e <interface+0xeda>
    2662:	80 91 22 02 	lds	r24, 0x0222
    2666:	90 91 23 02 	lds	r25, 0x0223
    266a:	89 2b       	or	r24, r25
    266c:	b1 f4       	brne	.+44     	; 0x269a <interface+0xf06>
    266e:	10 92 49 02 	sts	0x0249, r1
    2672:	10 92 48 02 	sts	0x0248, r1
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	90 93 31 02 	sts	0x0231, r25
    267e:	80 93 30 02 	sts	0x0230, r24
    2682:	90 93 47 02 	sts	0x0247, r25
    2686:	80 93 46 02 	sts	0x0246, r24
    268a:	10 92 3d 02 	sts	0x023D, r1
    268e:	10 92 3c 02 	sts	0x023C, r1
    2692:	10 92 33 02 	sts	0x0233, r1
    2696:	10 92 32 02 	sts	0x0232, r1
		if (((PINA & (1<<3)) && (tots == 2)) || ((usrv == 4) && (tots == 2))) {cnt2 = 0; pg = 5; ofhl = 1; usrv = 0; _delay_ms(pdly);}
    269a:	cb 99       	sbic	0x19, 3	; 25
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <interface+0xf16>
    269e:	80 91 22 02 	lds	r24, 0x0222
    26a2:	90 91 23 02 	lds	r25, 0x0223
    26a6:	04 97       	sbiw	r24, 0x04	; 4
    26a8:	19 f5       	brne	.+70     	; 0x26f0 <interface+0xf5c>
    26aa:	80 91 3c 02 	lds	r24, 0x023C
    26ae:	90 91 3d 02 	lds	r25, 0x023D
    26b2:	02 97       	sbiw	r24, 0x02	; 2
    26b4:	e9 f4       	brne	.+58     	; 0x26f0 <interface+0xf5c>
    26b6:	10 92 41 02 	sts	0x0241, r1
    26ba:	10 92 40 02 	sts	0x0240, r1
    26be:	85 e0       	ldi	r24, 0x05	; 5
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	90 93 31 02 	sts	0x0231, r25
    26c6:	80 93 30 02 	sts	0x0230, r24
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	90 93 43 02 	sts	0x0243, r25
    26d2:	80 93 42 02 	sts	0x0242, r24
    26d6:	10 92 23 02 	sts	0x0223, r1
    26da:	10 92 22 02 	sts	0x0222, r1
    26de:	9f ef       	ldi	r25, 0xFF	; 255
    26e0:	21 ee       	ldi	r18, 0xE1	; 225
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	91 50       	subi	r25, 0x01	; 1
    26e6:	20 40       	sbci	r18, 0x00	; 0
    26e8:	80 40       	sbci	r24, 0x00	; 0
    26ea:	e1 f7       	brne	.-8      	; 0x26e4 <interface+0xf50>
    26ec:	00 c0       	rjmp	.+0      	; 0x26ee <interface+0xf5a>
    26ee:	00 00       	nop
	}
	if (pg == 7)									// Error - MicroSD
    26f0:	80 91 30 02 	lds	r24, 0x0230
    26f4:	90 91 31 02 	lds	r25, 0x0231
    26f8:	07 97       	sbiw	r24, 0x07	; 7
    26fa:	09 f0       	breq	.+2      	; 0x26fe <interface+0xf6a>
    26fc:	63 c1       	rjmp	.+710    	; 0x29c4 <interface+0x1230>
	{
		lcd_clrscr();
    26fe:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
		lcd_gotoxy(1,2);
    2702:	62 e0       	ldi	r22, 0x02	; 2
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
		lcd_puts("MicroSD Error!");
    270a:	89 ec       	ldi	r24, 0xC9	; 201
    270c:	91 e0       	ldi	r25, 0x01	; 1
    270e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		if (cnex != 1)
    2712:	80 91 fa 01 	lds	r24, 0x01FA
    2716:	90 91 fb 01 	lds	r25, 0x01FB
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	29 f1       	breq	.+74     	; 0x2768 <interface+0xfd4>
		{
			lcd_home();
    271e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_home>
			lcd_puts("Rst  Rsp");
    2722:	88 ed       	ldi	r24, 0xD8	; 216
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(1,3);
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("Code:");
    2732:	81 ee       	ldi	r24, 0xE1	; 225
    2734:	91 e0       	ldi	r25, 0x01	; 1
    2736:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
			lcd_gotoxy(6,3);
    273a:	63 e0       	ldi	r22, 0x03	; 3
    273c:	86 e0       	ldi	r24, 0x06	; 6
    273e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    2742:	4a e0       	ldi	r20, 0x0A	; 10
    2744:	6b e8       	ldi	r22, 0x8B	; 139
    2746:	72 e0       	ldi	r23, 0x02	; 2
    2748:	80 91 b6 02 	lds	r24, 0x02B6
    274c:	90 91 b7 02 	lds	r25, 0x02B7
    2750:	0e 94 47 18 	call	0x308e	; 0x308e <__itoa_ncheck>
			itoa(sdrsp, sdrpc, 10);
			lcd_puts(sdrpc);
    2754:	8b e8       	ldi	r24, 0x8B	; 139
    2756:	92 e0       	ldi	r25, 0x02	; 2
    2758:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		}
		if (cnex == 1)
    275c:	80 91 fa 01 	lds	r24, 0x01FA
    2760:	90 91 fb 01 	lds	r25, 0x01FB
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	61 f4       	brne	.+24     	; 0x2780 <interface+0xfec>
		{
			onst = 0;
    2768:	10 92 47 02 	sts	0x0247, r1
    276c:	10 92 46 02 	sts	0x0246, r1
			lcd_gotoxy(1,3);
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
			lcd_puts("Counter > 9999");
    2778:	87 ee       	ldi	r24, 0xE7	; 231
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		}
		bcksgn();
    2780:	0e 94 88 07 	call	0xf10	; 0xf10 <bcksgn>
		if (onid == 1) runsgn(2);
    2784:	80 91 38 02 	lds	r24, 0x0238
    2788:	90 91 39 02 	lds	r25, 0x0239
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	21 f4       	brne	.+8      	; 0x2798 <interface+0x1004>
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (ofak == 1) runsgn(1);
    2798:	80 91 3e 02 	lds	r24, 0x023E
    279c:	90 91 3f 02 	lds	r25, 0x023F
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	21 f4       	brne	.+8      	; 0x27ac <interface+0x1018>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
		if (ofid == 1) {rsdsgn(); onid = 0; runsgn(0);}
    27ac:	80 91 3a 02 	lds	r24, 0x023A
    27b0:	90 91 3b 02 	lds	r25, 0x023B
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	51 f4       	brne	.+20     	; 0x27cc <interface+0x1038>
    27b8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rsdsgn>
    27bc:	10 92 39 02 	sts	0x0239, r1
    27c0:	10 92 38 02 	sts	0x0238, r1
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <runsgn>
    27cc:	9f ef       	ldi	r25, 0xFF	; 255
    27ce:	20 e7       	ldi	r18, 0x70	; 112
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	91 50       	subi	r25, 0x01	; 1
    27d4:	20 40       	sbci	r18, 0x00	; 0
    27d6:	80 40       	sbci	r24, 0x00	; 0
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <interface+0x103e>
    27da:	00 c0       	rjmp	.+0      	; 0x27dc <interface+0x1048>
    27dc:	00 00       	nop
		_delay_ms(100);	
		//onst = 0;
		dlst = 0;
    27de:	10 92 13 02 	sts	0x0213, r1
    27e2:	10 92 12 02 	sts	0x0212, r1
		if ((PINA & (1<<0)) || (usrv == 1)) {usrv = 0; erak = 1; dsc = 0; cnex = 0; pg = 0; _delay_ms(pdly);}
    27e6:	c8 99       	sbic	0x19, 0	; 25
    27e8:	06 c0       	rjmp	.+12     	; 0x27f6 <interface+0x1062>
    27ea:	80 91 22 02 	lds	r24, 0x0222
    27ee:	90 91 23 02 	lds	r25, 0x0223
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f9 f4       	brne	.+62     	; 0x2834 <interface+0x10a0>
    27f6:	10 92 23 02 	sts	0x0223, r1
    27fa:	10 92 22 02 	sts	0x0222, r1
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	90 93 fd 01 	sts	0x01FD, r25
    2806:	80 93 fc 01 	sts	0x01FC, r24
    280a:	10 92 09 02 	sts	0x0209, r1
    280e:	10 92 08 02 	sts	0x0208, r1
    2812:	10 92 fb 01 	sts	0x01FB, r1
    2816:	10 92 fa 01 	sts	0x01FA, r1
    281a:	10 92 31 02 	sts	0x0231, r1
    281e:	10 92 30 02 	sts	0x0230, r1
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	21 ee       	ldi	r18, 0xE1	; 225
    2826:	84 e0       	ldi	r24, 0x04	; 4
    2828:	91 50       	subi	r25, 0x01	; 1
    282a:	20 40       	sbci	r18, 0x00	; 0
    282c:	80 40       	sbci	r24, 0x00	; 0
    282e:	e1 f7       	brne	.-8      	; 0x2828 <interface+0x1094>
    2830:	00 c0       	rjmp	.+0      	; 0x2832 <interface+0x109e>
    2832:	00 00       	nop
		if (cnex != 1)
    2834:	80 91 fa 01 	lds	r24, 0x01FA
    2838:	90 91 fb 01 	lds	r25, 0x01FB
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	09 f4       	brne	.+2      	; 0x2842 <interface+0x10ae>
    2840:	c1 c0       	rjmp	.+386    	; 0x29c4 <interface+0x1230>
		{
			if (onst == 1) {onhl = 1; onst = 0;}
    2842:	80 91 46 02 	lds	r24, 0x0246
    2846:	90 91 47 02 	lds	r25, 0x0247
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	51 f4       	brne	.+20     	; 0x2862 <interface+0x10ce>
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	90 93 f7 01 	sts	0x01F7, r25
    2856:	80 93 f6 01 	sts	0x01F6, r24
    285a:	10 92 47 02 	sts	0x0247, r1
    285e:	10 92 46 02 	sts	0x0246, r1
			if ((PINA & (1<<2)) || (usrv == 3))
    2862:	ca 99       	sbic	0x19, 2	; 25
    2864:	06 c0       	rjmp	.+12     	; 0x2872 <interface+0x10de>
    2866:	80 91 22 02 	lds	r24, 0x0222
    286a:	90 91 23 02 	lds	r25, 0x0223
    286e:	03 97       	sbiw	r24, 0x03	; 3
    2870:	b9 f4       	brne	.+46     	; 0x28a0 <interface+0x110c>
			{
				usrv = 0;
    2872:	10 92 23 02 	sts	0x0223, r1
    2876:	10 92 22 02 	sts	0x0222, r1
				plc_disable; msd_enable;
    287a:	af 9a       	sbi	0x15, 7	; 21
    287c:	ae 98       	cbi	0x15, 6	; 21
				sdrsp = sd_response();
    287e:	0e 94 35 03 	call	0x66a	; 0x66a <sd_response>
    2882:	90 93 b7 02 	sts	0x02B7, r25
    2886:	80 93 b6 02 	sts	0x02B6, r24
    288a:	9f ef       	ldi	r25, 0xFF	; 255
    288c:	24 e3       	ldi	r18, 0x34	; 52
    288e:	8c e0       	ldi	r24, 0x0C	; 12
    2890:	91 50       	subi	r25, 0x01	; 1
    2892:	20 40       	sbci	r18, 0x00	; 0
    2894:	80 40       	sbci	r24, 0x00	; 0
    2896:	e1 f7       	brne	.-8      	; 0x2890 <interface+0x10fc>
    2898:	00 c0       	rjmp	.+0      	; 0x289a <interface+0x1106>
    289a:	00 00       	nop
				_delay_ms(500);
				plc_enable; msd_disable;
    289c:	af 98       	cbi	0x15, 7	; 21
    289e:	ae 9a       	sbi	0x15, 6	; 21
			}
			if ((PINA & (1<<3)) || (usrv == 4))
    28a0:	cb 99       	sbic	0x19, 3	; 25
    28a2:	06 c0       	rjmp	.+12     	; 0x28b0 <interface+0x111c>
    28a4:	80 91 22 02 	lds	r24, 0x0222
    28a8:	90 91 23 02 	lds	r25, 0x0223
    28ac:	04 97       	sbiw	r24, 0x04	; 4
    28ae:	79 f4       	brne	.+30     	; 0x28ce <interface+0x113a>
			{
				usrv = 0;
    28b0:	10 92 23 02 	sts	0x0223, r1
    28b4:	10 92 22 02 	sts	0x0222, r1
				sd_rset;
    28b8:	ad 98       	cbi	0x15, 5	; 21
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	21 ee       	ldi	r18, 0xE1	; 225
    28be:	84 e0       	ldi	r24, 0x04	; 4
    28c0:	91 50       	subi	r25, 0x01	; 1
    28c2:	20 40       	sbci	r18, 0x00	; 0
    28c4:	80 40       	sbci	r24, 0x00	; 0
    28c6:	e1 f7       	brne	.-8      	; 0x28c0 <interface+0x112c>
    28c8:	00 c0       	rjmp	.+0      	; 0x28ca <interface+0x1136>
    28ca:	00 00       	nop
				_delay_ms(200);
				sd_set;
    28cc:	ad 9a       	sbi	0x15, 5	; 21
			}				
			if ((onhl == 1) && (cnte > 20))							// Auto Reset
    28ce:	80 91 f6 01 	lds	r24, 0x01F6
    28d2:	90 91 f7 01 	lds	r25, 0x01F7
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	09 f0       	breq	.+2      	; 0x28dc <interface+0x1148>
    28da:	6b c0       	rjmp	.+214    	; 0x29b2 <interface+0x121e>
    28dc:	80 91 f8 01 	lds	r24, 0x01F8
    28e0:	90 91 f9 01 	lds	r25, 0x01F9
    28e4:	45 97       	sbiw	r24, 0x15	; 21
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <interface+0x1156>
    28e8:	64 c0       	rjmp	.+200    	; 0x29b2 <interface+0x121e>
			{
				sd_rset;
    28ea:	ad 98       	cbi	0x15, 5	; 21
    28ec:	9f ef       	ldi	r25, 0xFF	; 255
    28ee:	21 ee       	ldi	r18, 0xE1	; 225
    28f0:	84 e0       	ldi	r24, 0x04	; 4
    28f2:	91 50       	subi	r25, 0x01	; 1
    28f4:	20 40       	sbci	r18, 0x00	; 0
    28f6:	80 40       	sbci	r24, 0x00	; 0
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <interface+0x115e>
    28fa:	00 c0       	rjmp	.+0      	; 0x28fc <interface+0x1168>
    28fc:	00 00       	nop
				_delay_ms(200);
				sd_set;
    28fe:	ad 9a       	sbi	0x15, 5	; 21
    2900:	9f e7       	ldi	r25, 0x7F	; 127
    2902:	28 e3       	ldi	r18, 0x38	; 56
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	91 50       	subi	r25, 0x01	; 1
    2908:	20 40       	sbci	r18, 0x00	; 0
    290a:	80 40       	sbci	r24, 0x00	; 0
    290c:	e1 f7       	brne	.-8      	; 0x2906 <interface+0x1172>
    290e:	00 c0       	rjmp	.+0      	; 0x2910 <interface+0x117c>
    2910:	00 00       	nop
				_delay_ms(50);
				plc_disable; msd_enable;
    2912:	af 9a       	sbi	0x15, 7	; 21
    2914:	ae 98       	cbi	0x15, 6	; 21
    2916:	9f e7       	ldi	r25, 0x7F	; 127
    2918:	28 e3       	ldi	r18, 0x38	; 56
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	91 50       	subi	r25, 0x01	; 1
    291e:	20 40       	sbci	r18, 0x00	; 0
    2920:	80 40       	sbci	r24, 0x00	; 0
    2922:	e1 f7       	brne	.-8      	; 0x291c <interface+0x1188>
    2924:	00 c0       	rjmp	.+0      	; 0x2926 <interface+0x1192>
    2926:	00 00       	nop
				_delay_ms(50);
				sdrsp = sd_response();
    2928:	0e 94 35 03 	call	0x66a	; 0x66a <sd_response>
    292c:	90 93 b7 02 	sts	0x02B7, r25
    2930:	80 93 b6 02 	sts	0x02B6, r24
    2934:	9f e7       	ldi	r25, 0x7F	; 127
    2936:	28 e3       	ldi	r18, 0x38	; 56
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	91 50       	subi	r25, 0x01	; 1
    293c:	20 40       	sbci	r18, 0x00	; 0
    293e:	80 40       	sbci	r24, 0x00	; 0
    2940:	e1 f7       	brne	.-8      	; 0x293a <interface+0x11a6>
    2942:	00 c0       	rjmp	.+0      	; 0x2944 <interface+0x11b0>
    2944:	00 00       	nop
				_delay_ms(50);
				plc_enable; msd_disable;
    2946:	af 98       	cbi	0x15, 7	; 21
    2948:	ae 9a       	sbi	0x15, 6	; 21
				lcd_gotoxy(6,3);
    294a:	63 e0       	ldi	r22, 0x03	; 3
    294c:	86 e0       	ldi	r24, 0x06	; 6
    294e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_gotoxy>
    2952:	4a e0       	ldi	r20, 0x0A	; 10
    2954:	6b e8       	ldi	r22, 0x8B	; 139
    2956:	72 e0       	ldi	r23, 0x02	; 2
    2958:	80 91 b6 02 	lds	r24, 0x02B6
    295c:	90 91 b7 02 	lds	r25, 0x02B7
    2960:	0e 94 47 18 	call	0x308e	; 0x308e <__itoa_ncheck>
				itoa(sdrsp, sdrpc, 10);
				lcd_puts(sdrpc);
    2964:	8b e8       	ldi	r24, 0x8B	; 139
    2966:	92 e0       	ldi	r25, 0x02	; 2
    2968:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    296c:	9f e7       	ldi	r25, 0x7F	; 127
    296e:	28 e3       	ldi	r18, 0x38	; 56
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	91 50       	subi	r25, 0x01	; 1
    2974:	20 40       	sbci	r18, 0x00	; 0
    2976:	80 40       	sbci	r24, 0x00	; 0
    2978:	e1 f7       	brne	.-8      	; 0x2972 <interface+0x11de>
    297a:	00 c0       	rjmp	.+0      	; 0x297c <interface+0x11e8>
    297c:	00 00       	nop
				_delay_ms(50);
				cnte = 0;
    297e:	10 92 f9 01 	sts	0x01F9, r1
    2982:	10 92 f8 01 	sts	0x01F8, r1
				if (sd_err == 0)
    2986:	9c 99       	sbic	0x13, 4	; 19
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <interface+0x121e>
				{
					cnte = 0;
					msdfile();
    298a:	0e 94 6f 09 	call	0x12de	; 0x12de <msdfile>
					onst = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	90 93 47 02 	sts	0x0247, r25
    2996:	80 93 46 02 	sts	0x0246, r24
					dlst = 1;
    299a:	90 93 13 02 	sts	0x0213, r25
    299e:	80 93 12 02 	sts	0x0212, r24
					onhl = 0;
    29a2:	10 92 f7 01 	sts	0x01F7, r1
    29a6:	10 92 f6 01 	sts	0x01F6, r1
					pg = 1;
    29aa:	90 93 31 02 	sts	0x0231, r25
    29ae:	80 93 30 02 	sts	0x0230, r24
				}
			}
			cnte++;
    29b2:	80 91 f8 01 	lds	r24, 0x01F8
    29b6:	90 91 f9 01 	lds	r25, 0x01F9
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	90 93 f9 01 	sts	0x01F9, r25
    29c0:	80 93 f8 01 	sts	0x01F8, r24
    29c4:	08 95       	ret

000029c6 <main>:
		}
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void)
{
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <main+0x6>
    29cc:	1f 92       	push	r1
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    29d2:	88 e9       	ldi	r24, 0x98	; 152
    29d4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    29d6:	86 e8       	ldi	r24, 0x86	; 134
    29d8:	80 bd       	out	0x20, r24	; 32
	UBRRL = 51; // 9600 @ 8MHz
    29da:	83 e3       	ldi	r24, 0x33	; 51
    29dc:	89 b9       	out	0x09, r24	; 9
	DDRA = 0b11000000;
    29de:	80 ec       	ldi	r24, 0xC0	; 192
    29e0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b11100000;
    29e2:	80 ee       	ldi	r24, 0xE0	; 224
    29e4:	84 bb       	out	0x14, r24	; 20
	nrf_config(mode);
    29e6:	80 91 76 00 	lds	r24, 0x0076
    29ea:	0e 94 8c 02 	call	0x518	; 0x518 <nrf_config>
	lcd_init(LCD_DISP_ON);
    29ee:	8c e0       	ldi	r24, 0x0C	; 12
    29f0:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_init>
	dly = eeprom_read_byte(&eedly);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__eerd_byte_m16a>
    29fc:	80 93 b8 02 	sts	0x02B8, r24
	eiac = eeprom_read_byte(&eeiac);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__eerd_byte_m16a>
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	90 93 1b 02 	sts	0x021B, r25
    2a0e:	80 93 1a 02 	sts	0x021A, r24
	dlac = eeprom_read_byte(&edlac);
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__eerd_byte_m16a>
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	90 93 17 02 	sts	0x0217, r25
    2a20:	80 93 16 02 	sts	0x0216, r24
	sei();
    2a24:	78 94       	sei
	PORTA |= (1<<6);
    2a26:	de 9a       	sbi	0x1b, 6	; 27
	PORTA |= (1<<7);
    2a28:	df 9a       	sbi	0x1b, 7	; 27
    2a2a:	2f ef       	ldi	r18, 0xFF	; 255
    2a2c:	60 e7       	ldi	r22, 0x70	; 112
    2a2e:	72 e0       	ldi	r23, 0x02	; 2
    2a30:	21 50       	subi	r18, 0x01	; 1
    2a32:	60 40       	sbci	r22, 0x00	; 0
    2a34:	70 40       	sbci	r23, 0x00	; 0
    2a36:	e1 f7       	brne	.-8      	; 0x2a30 <main+0x6a>
    2a38:	00 c0       	rjmp	.+0      	; 0x2a3a <main+0x74>
    2a3a:	00 00       	nop
	_delay_ms(100);
	PORTA &= ~(1<<6);
    2a3c:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~(1<<7);
    2a3e:	df 98       	cbi	0x1b, 7	; 27
	sd_init();	
    2a40:	0e 94 33 03 	call	0x666	; 0x666 <sd_init>
	plc_enable; 
    2a44:	af 98       	cbi	0x15, 7	; 21
	msd_disable;
    2a46:	ae 9a       	sbi	0x15, 6	; 21
			 ((pg == 5) && (usrv == 4)) )
		{
			pg = 1;
			onst = 1;
			usrv = 0;
			bufo[1]  = 'N';
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	f3 ea       	ldi	r31, 0xA3	; 163
    2a4c:	6f 2e       	mov	r6, r31
    2a4e:	f2 e0       	ldi	r31, 0x02	; 2
    2a50:	7f 2e       	mov	r7, r31
    2a52:	f0 2d       	mov	r31, r0
			bufo[2]  = fin;
    2a54:	0f 2e       	mov	r0, r31
    2a56:	f4 ea       	ldi	r31, 0xA4	; 164
    2a58:	4f 2e       	mov	r4, r31
    2a5a:	f2 e0       	ldi	r31, 0x02	; 2
    2a5c:	5f 2e       	mov	r5, r31
    2a5e:	f0 2d       	mov	r31, r0
    2a60:	08 e2       	ldi	r16, 0x28	; 40
    2a62:	12 e0       	ldi	r17, 0x02	; 2
			bufo[3]  = dly;
    2a64:	0f 2e       	mov	r0, r31
    2a66:	f5 ea       	ldi	r31, 0xA5	; 165
    2a68:	cf 2e       	mov	r12, r31
    2a6a:	f2 e0       	ldi	r31, 0x02	; 2
    2a6c:	df 2e       	mov	r13, r31
    2a6e:	f0 2d       	mov	r31, r0
			bufo[4]  = 'N';
    2a70:	0f 2e       	mov	r0, r31
    2a72:	f6 ea       	ldi	r31, 0xA6	; 166
    2a74:	ef 2e       	mov	r14, r31
    2a76:	f2 e0       	ldi	r31, 0x02	; 2
    2a78:	ff 2e       	mov	r15, r31
    2a7a:	f0 2d       	mov	r31, r0
			bufo[5]  = 'N';
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	f7 ea       	ldi	r31, 0xA7	; 167
    2a80:	af 2e       	mov	r10, r31
    2a82:	f2 e0       	ldi	r31, 0x02	; 2
    2a84:	bf 2e       	mov	r11, r31
    2a86:	f0 2d       	mov	r31, r0
	sd_init();	
	plc_enable; 
	msd_disable;
	while(1)
	{
		interface();
    2a88:	0e 94 ca 0b 	call	0x1794	; 0x1794 <interface>
		receive();
    2a8c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <receive>
		if(onst == 1) cnt1++;
    2a90:	80 91 46 02 	lds	r24, 0x0246
    2a94:	90 91 47 02 	lds	r25, 0x0247
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	49 f4       	brne	.+18     	; 0x2aae <main+0xe8>
    2a9c:	80 91 48 02 	lds	r24, 0x0248
    2aa0:	90 91 49 02 	lds	r25, 0x0249
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	90 93 49 02 	sts	0x0249, r25
    2aaa:	80 93 48 02 	sts	0x0248, r24
		//_delay_ms(10);
		usartsnd();													// Write Data to USART & 15ms Delay
    2aae:	0e 94 60 06 	call	0xcc0	; 0xcc0 <usartsnd>
		if (rcve == 1)												// Receive...
    2ab2:	80 91 4a 02 	lds	r24, 0x024A
    2ab6:	90 91 4b 02 	lds	r25, 0x024B
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <main+0xfa>
    2abe:	e8 c0       	rjmp	.+464    	; 0x2c90 <main+0x2ca>
		{
			//usartsnd();												// Write Data to USART									
			if ((bufi[1] == 'A') &&  (bufi[10] == 'B'))				// Receive & Decode Data
    2ac0:	a6 e5       	ldi	r26, 0x56	; 86
    2ac2:	b2 e0       	ldi	r27, 0x02	; 2
    2ac4:	8c 91       	ld	r24, X
    2ac6:	81 34       	cpi	r24, 0x41	; 65
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <main+0x106>
    2aca:	b7 c0       	rjmp	.+366    	; 0x2c3a <main+0x274>
    2acc:	80 91 5f 02 	lds	r24, 0x025F
    2ad0:	82 34       	cpi	r24, 0x42	; 66
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <main+0x110>
    2ad4:	d9 c0       	rjmp	.+434    	; 0x2c88 <main+0x2c2>
			{
				cnt1 = 0;
    2ad6:	10 92 49 02 	sts	0x0249, r1
    2ada:	10 92 48 02 	sts	0x0248, r1
				onid = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	90 93 39 02 	sts	0x0239, r25
    2ae6:	80 93 38 02 	sts	0x0238, r24
				r11 = bufi[2]; 
    2aea:	80 90 57 02 	lds	r8, 0x0257
    2aee:	e8 2d       	mov	r30, r8
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	f0 93 d0 02 	sts	0x02D0, r31
    2af6:	e0 93 cf 02 	sts	0x02CF, r30
				r12 = bufi[3];
    2afa:	40 91 58 02 	lds	r20, 0x0258
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	50 93 05 03 	sts	0x0305, r21
    2b04:	40 93 04 03 	sts	0x0304, r20
				r13 = bufi[4];
    2b08:	20 91 59 02 	lds	r18, 0x0259
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	30 93 19 03 	sts	0x0319, r19
    2b12:	20 93 18 03 	sts	0x0318, r18
				bat = bufi[5];
    2b16:	80 91 5a 02 	lds	r24, 0x025A
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	90 93 27 02 	sts	0x0227, r25
    2b20:	80 93 26 02 	sts	0x0226, r24
				r21 = bufi[6];
    2b24:	90 90 5b 02 	lds	r9, 0x025B
    2b28:	69 2d       	mov	r22, r9
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	70 93 94 02 	sts	0x0294, r23
    2b30:	60 93 93 02 	sts	0x0293, r22
				r22 = bufi[7];
    2b34:	80 91 5c 02 	lds	r24, 0x025C
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	90 93 ff 02 	sts	0x02FF, r25
    2b3e:	80 93 fe 02 	sts	0x02FE, r24
				r23 = bufi[8];
    2b42:	a0 91 5d 02 	lds	r26, 0x025D
    2b46:	2a 2e       	mov	r2, r26
    2b48:	31 2c       	mov	r3, r1
    2b4a:	30 92 01 03 	sts	0x0301, r3
    2b4e:	20 92 00 03 	sts	0x0300, r2
    2b52:	30 92 0f 03 	sts	0x030F, r3
    2b56:	20 92 0e 03 	sts	0x030E, r2
				id  = bufi[9];							
    2b5a:	a0 91 5e 02 	lds	r26, 0x025E
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	b0 93 a1 02 	sts	0x02A1, r27
    2b64:	a0 93 a0 02 	sts	0x02A0, r26
				sgn1 = (r11 >> 7);
    2b68:	df 01       	movw	r26, r30
    2b6a:	aa 0f       	add	r26, r26
    2b6c:	ab 2f       	mov	r26, r27
    2b6e:	aa 1f       	adc	r26, r26
    2b70:	bb 0b       	sbc	r27, r27
    2b72:	b1 95       	neg	r27
    2b74:	b0 93 92 02 	sts	0x0292, r27
    2b78:	a0 93 91 02 	sts	0x0291, r26
				dig1 = (r11 & 0b1111111);
    2b7c:	e8 2d       	mov	r30, r8
    2b7e:	ef 77       	andi	r30, 0x7F	; 127
    2b80:	2e 2e       	mov	r2, r30
    2b82:	31 2c       	mov	r3, r1
    2b84:	30 92 bc 02 	sts	0x02BC, r3
    2b88:	20 92 bb 02 	sts	0x02BB, r2
    2b8c:	30 92 69 02 	sts	0x0269, r3
    2b90:	20 92 68 02 	sts	0x0268, r2
				dec1 = ((r12 << 8) | r13);				
    2b94:	34 2e       	mov	r3, r20
    2b96:	22 24       	eor	r2, r2
    2b98:	f1 01       	movw	r30, r2
    2b9a:	e2 2b       	or	r30, r18
    2b9c:	f3 2b       	or	r31, r19
    2b9e:	f0 93 9f 02 	sts	0x029F, r31
    2ba2:	e0 93 9e 02 	sts	0x029E, r30
    2ba6:	f0 93 1b 03 	sts	0x031B, r31
    2baa:	e0 93 1a 03 	sts	0x031A, r30
				sgn2 = (r21 >> 7);
    2bae:	fb 01       	movw	r30, r22
    2bb0:	ee 0f       	add	r30, r30
    2bb2:	ef 2f       	mov	r30, r31
    2bb4:	ee 1f       	adc	r30, r30
    2bb6:	ff 0b       	sbc	r31, r31
    2bb8:	f1 95       	neg	r31
    2bba:	f0 93 be 02 	sts	0x02BE, r31
    2bbe:	e0 93 bd 02 	sts	0x02BD, r30
				dig2 = (r21 & 0b1111111);
    2bc2:	69 2d       	mov	r22, r9
    2bc4:	6f 77       	andi	r22, 0x7F	; 127
    2bc6:	26 2e       	mov	r2, r22
    2bc8:	31 2c       	mov	r3, r1
    2bca:	30 92 03 03 	sts	0x0303, r3
    2bce:	20 92 02 03 	sts	0x0302, r2
				dec2 = ((r22 << 8) | r23);	
    2bd2:	98 2e       	mov	r9, r24
    2bd4:	88 24       	eor	r8, r8
    2bd6:	60 91 00 03 	lds	r22, 0x0300
    2bda:	70 91 01 03 	lds	r23, 0x0301
    2bde:	86 2a       	or	r8, r22
    2be0:	97 2a       	or	r9, r23
    2be2:	90 92 c0 02 	sts	0x02C0, r9
    2be6:	80 92 bf 02 	sts	0x02BF, r8
    2bea:	90 92 cc 02 	sts	0x02CC, r9
    2bee:	80 92 cb 02 	sts	0x02CB, r8
				sgn1u = sgn1;
    2bf2:	b0 93 61 02 	sts	0x0261, r27
    2bf6:	a0 93 60 02 	sts	0x0260, r26
				dig1u = dig1;
				r12u  = r12;
    2bfa:	50 93 ba 02 	sts	0x02BA, r21
    2bfe:	40 93 b9 02 	sts	0x02B9, r20
				r13u  = r13;
    2c02:	30 93 ce 02 	sts	0x02CE, r19
    2c06:	20 93 cd 02 	sts	0x02CD, r18
				sgn2u = sgn2;
    2c0a:	f0 93 11 03 	sts	0x0311, r31
    2c0e:	e0 93 10 03 	sts	0x0310, r30
				dig2u = dig2;
    2c12:	30 92 fd 02 	sts	0x02FD, r3
    2c16:	20 92 fc 02 	sts	0x02FC, r2
				r22u  = r22;
    2c1a:	90 93 67 02 	sts	0x0267, r25
    2c1e:	80 93 66 02 	sts	0x0266, r24
				r23u  =	r23;
				dec1u = dec1;
				dec2u = dec2;	
				rcve = 0;
    2c22:	10 92 4b 02 	sts	0x024B, r1
    2c26:	10 92 4a 02 	sts	0x024A, r1
				if (onst == 1) msddata();
    2c2a:	80 91 46 02 	lds	r24, 0x0246
    2c2e:	90 91 47 02 	lds	r25, 0x0247
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <main+0x274>
    2c36:	0e 94 4c 0a 	call	0x1498	; 0x1498 <msddata>
			}
			if ((bufi[1] == 'K') && (bufi[10] == 'K'))				// Receive Off Acknowledge
    2c3a:	a6 e5       	ldi	r26, 0x56	; 86
    2c3c:	b2 e0       	ldi	r27, 0x02	; 2
    2c3e:	8c 91       	ld	r24, X
    2c40:	8b 34       	cpi	r24, 0x4B	; 75
    2c42:	11 f5       	brne	.+68     	; 0x2c88 <main+0x2c2>
    2c44:	80 91 5f 02 	lds	r24, 0x025F
    2c48:	8b 34       	cpi	r24, 0x4B	; 75
    2c4a:	f1 f4       	brne	.+60     	; 0x2c88 <main+0x2c2>
			{
				ofak = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	90 93 3f 02 	sts	0x023F, r25
    2c54:	80 93 3e 02 	sts	0x023E, r24
				ofhl = 0;
    2c58:	10 92 43 02 	sts	0x0243, r1
    2c5c:	10 92 42 02 	sts	0x0242, r1
				cnt2 = 0;
    2c60:	10 92 41 02 	sts	0x0241, r1
    2c64:	10 92 40 02 	sts	0x0240, r1
				ofid = 0;
    2c68:	10 92 3b 02 	sts	0x023B, r1
    2c6c:	10 92 3a 02 	sts	0x023A, r1
				onid = 0;
    2c70:	10 92 39 02 	sts	0x0239, r1
    2c74:	10 92 38 02 	sts	0x0238, r1
				rcve = 0;
    2c78:	10 92 4b 02 	sts	0x024B, r1
    2c7c:	10 92 4a 02 	sts	0x024A, r1
			}
			if ((bufi[1] != 'K') | (bufi[10] != 'K')) ofak = 0;
    2c80:	80 91 5f 02 	lds	r24, 0x025F
    2c84:	8b 34       	cpi	r24, 0x4B	; 75
    2c86:	21 f0       	breq	.+8      	; 0x2c90 <main+0x2ca>
    2c88:	10 92 3f 02 	sts	0x023F, r1
    2c8c:	10 92 3e 02 	sts	0x023E, r1
		}
		if ( ((pg == 0) && (PINA & (1<<3))) ||					// Send On Command
    2c90:	80 91 30 02 	lds	r24, 0x0230
    2c94:	90 91 31 02 	lds	r25, 0x0231
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	19 f4       	brne	.+6      	; 0x2ca2 <main+0x2dc>
    2c9c:	cb 99       	sbic	0x19, 3	; 25
    2c9e:	35 c0       	rjmp	.+106    	; 0x2d0a <main+0x344>
    2ca0:	23 c0       	rjmp	.+70     	; 0x2ce8 <main+0x322>
    2ca2:	85 30       	cpi	r24, 0x05	; 5
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	19 f4       	brne	.+6      	; 0x2cae <main+0x2e8>
		     ((pg == 5) && (PINA & (1<<3))) ||
    2ca8:	cb 99       	sbic	0x19, 3	; 25
    2caa:	2f c0       	rjmp	.+94     	; 0x2d0a <main+0x344>
    2cac:	26 c0       	rjmp	.+76     	; 0x2cfa <main+0x334>
    2cae:	81 30       	cpi	r24, 0x01	; 1
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	d1 f4       	brne	.+52     	; 0x2ce8 <main+0x322>
		     ((pg == 1) && (redi.rem == (reon[dly] - 1)) && (onst == 1)) ||
    2cb4:	e0 91 b8 02 	lds	r30, 0x02B8
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	ee 0f       	add	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	ee 59       	subi	r30, 0x9E	; 158
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	20 91 64 02 	lds	r18, 0x0264
    2ccc:	30 91 65 02 	lds	r19, 0x0265
    2cd0:	28 17       	cp	r18, r24
    2cd2:	39 07       	cpc	r19, r25
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <main+0x312>
    2cd6:	4b c0       	rjmp	.+150    	; 0x2d6e <main+0x3a8>
    2cd8:	80 91 46 02 	lds	r24, 0x0246
    2cdc:	90 91 47 02 	lds	r25, 0x0247
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <main+0x320>
    2ce4:	44 c0       	rjmp	.+136    	; 0x2d6e <main+0x3a8>
    2ce6:	11 c0       	rjmp	.+34     	; 0x2d0a <main+0x344>
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	39 f4       	brne	.+14     	; 0x2cfa <main+0x334>
			 ((pg == 0) && (usrv == 4)) ||
    2cec:	80 91 22 02 	lds	r24, 0x0222
    2cf0:	90 91 23 02 	lds	r25, 0x0223
    2cf4:	04 97       	sbiw	r24, 0x04	; 4
    2cf6:	d9 f5       	brne	.+118    	; 0x2d6e <main+0x3a8>
    2cf8:	08 c0       	rjmp	.+16     	; 0x2d0a <main+0x344>
    2cfa:	05 97       	sbiw	r24, 0x05	; 5
    2cfc:	c1 f5       	brne	.+112    	; 0x2d6e <main+0x3a8>
			 ((pg == 5) && (usrv == 4)) )
    2cfe:	80 91 22 02 	lds	r24, 0x0222
    2d02:	90 91 23 02 	lds	r25, 0x0223
    2d06:	04 97       	sbiw	r24, 0x04	; 4
    2d08:	91 f5       	brne	.+100    	; 0x2d6e <main+0x3a8>
		{
			pg = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	90 93 31 02 	sts	0x0231, r25
    2d12:	80 93 30 02 	sts	0x0230, r24
			onst = 1;
    2d16:	90 93 47 02 	sts	0x0247, r25
    2d1a:	80 93 46 02 	sts	0x0246, r24
			usrv = 0;
    2d1e:	10 92 23 02 	sts	0x0223, r1
    2d22:	10 92 22 02 	sts	0x0222, r1
			bufo[1]  = 'N';
    2d26:	8e e4       	ldi	r24, 0x4E	; 78
    2d28:	f3 01       	movw	r30, r6
    2d2a:	80 83       	st	Z, r24
			bufo[2]  = fin;
    2d2c:	d8 01       	movw	r26, r16
    2d2e:	9c 91       	ld	r25, X
    2d30:	f2 01       	movw	r30, r4
    2d32:	90 83       	st	Z, r25
			bufo[3]  = dly;
    2d34:	90 91 b8 02 	lds	r25, 0x02B8
    2d38:	d6 01       	movw	r26, r12
    2d3a:	9c 93       	st	X, r25
			bufo[4]  = 'N';
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	80 83       	st	Z, r24
			bufo[5]  = 'N';
    2d40:	d5 01       	movw	r26, r10
    2d42:	8c 93       	st	X, r24
			bufo[6]  = 'N';
    2d44:	80 93 a8 02 	sts	0x02A8, r24
			bufo[7]  = 'N';
    2d48:	80 93 a9 02 	sts	0x02A9, r24
			bufo[8]  = 'N';
    2d4c:	80 93 aa 02 	sts	0x02AA, r24
			bufo[9]  = 'N';
    2d50:	80 93 ab 02 	sts	0x02AB, r24
			bufo[10] = 'N';
    2d54:	80 93 ac 02 	sts	0x02AC, r24
			transmit();
    2d58:	0e 94 2b 06 	call	0xc56	; 0xc56 <transmit>
    2d5c:	bf ef       	ldi	r27, 0xFF	; 255
    2d5e:	e0 e7       	ldi	r30, 0x70	; 112
    2d60:	f2 e0       	ldi	r31, 0x02	; 2
    2d62:	b1 50       	subi	r27, 0x01	; 1
    2d64:	e0 40       	sbci	r30, 0x00	; 0
    2d66:	f0 40       	sbci	r31, 0x00	; 0
    2d68:	e1 f7       	brne	.-8      	; 0x2d62 <main+0x39c>
    2d6a:	00 c0       	rjmp	.+0      	; 0x2d6c <main+0x3a6>
    2d6c:	00 00       	nop
			_delay_ms(100);
		}
		if (fcs1 == 1)
    2d6e:	80 91 36 02 	lds	r24, 0x0236
    2d72:	90 91 37 02 	lds	r25, 0x0237
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <main+0x3b6>
    2d7a:	41 c0       	rjmp	.+130    	; 0x2dfe <main+0x438>
    2d7c:	6a e0       	ldi	r22, 0x0A	; 10
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
		{
			for (int i=0; i<10; i++)
			{
				bufo[1]  = 'N';
    2d80:	0f 2e       	mov	r0, r31
    2d82:	fe e4       	ldi	r31, 0x4E	; 78
    2d84:	9f 2e       	mov	r9, r31
    2d86:	f0 2d       	mov	r31, r0
				bufo[2]  = fin;
				bufo[3]  = dly;
				bufo[4]  = 'N';
				bufo[5]  = 'N';
				bufo[6]  = 'N';
				bufo[7]  = 'N';
    2d88:	0f 2e       	mov	r0, r31
    2d8a:	f9 ea       	ldi	r31, 0xA9	; 169
    2d8c:	2f 2e       	mov	r2, r31
    2d8e:	f2 e0       	ldi	r31, 0x02	; 2
    2d90:	3f 2e       	mov	r3, r31
    2d92:	f0 2d       	mov	r31, r0
				bufo[8]  = 'N';
				bufo[9]  = 'N';
				bufo[10] = 'N';
    2d94:	7a 83       	std	Y+2, r23	; 0x02
    2d96:	69 83       	std	Y+1, r22	; 0x01
		}
		if (fcs1 == 1)
		{
			for (int i=0; i<10; i++)
			{
				bufo[1]  = 'N';
    2d98:	d3 01       	movw	r26, r6
    2d9a:	9c 92       	st	X, r9
				bufo[2]  = fin;
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	80 81       	ld	r24, Z
    2da0:	d2 01       	movw	r26, r4
    2da2:	8c 93       	st	X, r24
				bufo[3]  = dly;
    2da4:	80 91 b8 02 	lds	r24, 0x02B8
    2da8:	f6 01       	movw	r30, r12
    2daa:	80 83       	st	Z, r24
				bufo[4]  = 'N';
    2dac:	d7 01       	movw	r26, r14
    2dae:	9c 92       	st	X, r9
				bufo[5]  = 'N';
    2db0:	f5 01       	movw	r30, r10
    2db2:	90 82       	st	Z, r9
				bufo[6]  = 'N';
    2db4:	a8 ea       	ldi	r26, 0xA8	; 168
    2db6:	b2 e0       	ldi	r27, 0x02	; 2
    2db8:	9c 92       	st	X, r9
				bufo[7]  = 'N';
    2dba:	f1 01       	movw	r30, r2
    2dbc:	90 82       	st	Z, r9
				bufo[8]  = 'N';
    2dbe:	aa ea       	ldi	r26, 0xAA	; 170
    2dc0:	b2 e0       	ldi	r27, 0x02	; 2
    2dc2:	9c 92       	st	X, r9
				bufo[9]  = 'N';
    2dc4:	eb ea       	ldi	r30, 0xAB	; 171
    2dc6:	f2 e0       	ldi	r31, 0x02	; 2
    2dc8:	90 82       	st	Z, r9
				bufo[10] = 'N';
    2dca:	ac ea       	ldi	r26, 0xAC	; 172
    2dcc:	b2 e0       	ldi	r27, 0x02	; 2
    2dce:	9c 92       	st	X, r9
				transmit();
    2dd0:	0e 94 2b 06 	call	0xc56	; 0xc56 <transmit>
    2dd4:	bf ef       	ldi	r27, 0xFF	; 255
    2dd6:	e0 e7       	ldi	r30, 0x70	; 112
    2dd8:	f2 e0       	ldi	r31, 0x02	; 2
    2dda:	b1 50       	subi	r27, 0x01	; 1
    2ddc:	e0 40       	sbci	r30, 0x00	; 0
    2dde:	f0 40       	sbci	r31, 0x00	; 0
    2de0:	e1 f7       	brne	.-8      	; 0x2dda <main+0x414>
    2de2:	00 c0       	rjmp	.+0      	; 0x2de4 <main+0x41e>
    2de4:	00 00       	nop
    2de6:	69 81       	ldd	r22, Y+1	; 0x01
    2de8:	7a 81       	ldd	r23, Y+2	; 0x02
    2dea:	61 50       	subi	r22, 0x01	; 1
    2dec:	71 09       	sbc	r23, r1
    2dee:	7a 83       	std	Y+2, r23	; 0x02
    2df0:	69 83       	std	Y+1, r22	; 0x01
			transmit();
			_delay_ms(100);
		}
		if (fcs1 == 1)
		{
			for (int i=0; i<10; i++)
    2df2:	67 2b       	or	r22, r23
    2df4:	89 f6       	brne	.-94     	; 0x2d98 <main+0x3d2>
				bufo[9]  = 'N';
				bufo[10] = 'N';
				transmit();
				_delay_ms(100);
			}
			fcs1 = 0;
    2df6:	10 92 37 02 	sts	0x0237, r1
    2dfa:	10 92 36 02 	sts	0x0236, r1
		}
		if (ofhl == 1) ofst = 1;									// Send Off Command
    2dfe:	80 91 42 02 	lds	r24, 0x0242
    2e02:	90 91 43 02 	lds	r25, 0x0243
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	31 f4       	brne	.+12     	; 0x2e16 <main+0x450>
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	90 93 45 02 	sts	0x0245, r25
    2e12:	80 93 44 02 	sts	0x0244, r24
		if (((pg == 1) && (PINA & (1<<3))) || ((pg == 1) && (usrv == 4)) || (mehl == 1)) {ofst = 1; ofhl = 1; usrv = 0;}
    2e16:	80 91 30 02 	lds	r24, 0x0230
    2e1a:	90 91 31 02 	lds	r25, 0x0231
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	41 f4       	brne	.+16     	; 0x2e32 <main+0x46c>
    2e22:	cb 99       	sbic	0x19, 3	; 25
    2e24:	0c c0       	rjmp	.+24     	; 0x2e3e <main+0x478>
    2e26:	80 91 22 02 	lds	r24, 0x0222
    2e2a:	90 91 23 02 	lds	r25, 0x0223
    2e2e:	04 97       	sbiw	r24, 0x04	; 4
    2e30:	31 f0       	breq	.+12     	; 0x2e3e <main+0x478>
    2e32:	80 91 06 02 	lds	r24, 0x0206
    2e36:	90 91 07 02 	lds	r25, 0x0207
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	71 f4       	brne	.+28     	; 0x2e5a <main+0x494>
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	90 93 45 02 	sts	0x0245, r25
    2e46:	80 93 44 02 	sts	0x0244, r24
    2e4a:	90 93 43 02 	sts	0x0243, r25
    2e4e:	80 93 42 02 	sts	0x0242, r24
    2e52:	10 92 23 02 	sts	0x0223, r1
    2e56:	10 92 22 02 	sts	0x0222, r1
		if ((ofst == 1) || (fcs2 == 1))
    2e5a:	80 91 44 02 	lds	r24, 0x0244
    2e5e:	90 91 45 02 	lds	r25, 0x0245
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	41 f0       	breq	.+16     	; 0x2e76 <main+0x4b0>
    2e66:	80 91 34 02 	lds	r24, 0x0234
    2e6a:	90 91 35 02 	lds	r25, 0x0235
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <main+0x4ae>
    2e72:	64 c0       	rjmp	.+200    	; 0x2f3c <main+0x576>
    2e74:	0c c0       	rjmp	.+24     	; 0x2e8e <main+0x4c8>
		{
			if (fcs2 != 1) pg = 5;
    2e76:	80 91 34 02 	lds	r24, 0x0234
    2e7a:	90 91 35 02 	lds	r25, 0x0235
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	31 f0       	breq	.+12     	; 0x2e8e <main+0x4c8>
    2e82:	85 e0       	ldi	r24, 0x05	; 5
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	90 93 31 02 	sts	0x0231, r25
    2e8a:	80 93 30 02 	sts	0x0230, r24
			onst = 0;
    2e8e:	10 92 47 02 	sts	0x0247, r1
    2e92:	10 92 46 02 	sts	0x0246, r1
			mehl = 0;
    2e96:	10 92 07 02 	sts	0x0207, r1
    2e9a:	10 92 06 02 	sts	0x0206, r1
			cnt2++;
    2e9e:	80 91 40 02 	lds	r24, 0x0240
    2ea2:	90 91 41 02 	lds	r25, 0x0241
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	90 93 41 02 	sts	0x0241, r25
    2eac:	80 93 40 02 	sts	0x0240, r24
			if (cnt2 > 1) ofid = 1;
    2eb0:	02 97       	sbiw	r24, 0x02	; 2
    2eb2:	30 f0       	brcs	.+12     	; 0x2ec0 <main+0x4fa>
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	90 93 3b 02 	sts	0x023B, r25
    2ebc:	80 93 3a 02 	sts	0x023A, r24
			bufo[1]  = 'F';
    2ec0:	86 e4       	ldi	r24, 0x46	; 70
    2ec2:	d3 01       	movw	r26, r6
    2ec4:	8c 93       	st	X, r24
			bufo[2]  = fin;
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	90 81       	ld	r25, Z
    2eca:	d2 01       	movw	r26, r4
    2ecc:	9c 93       	st	X, r25
			bufo[3]  = dly;
    2ece:	90 91 b8 02 	lds	r25, 0x02B8
    2ed2:	f6 01       	movw	r30, r12
    2ed4:	90 83       	st	Z, r25
			bufo[4]  = 'F';
    2ed6:	d7 01       	movw	r26, r14
    2ed8:	8c 93       	st	X, r24
			bufo[5]  = 'F';
    2eda:	f5 01       	movw	r30, r10
    2edc:	80 83       	st	Z, r24
			bufo[6]  = 'F';
    2ede:	80 93 a8 02 	sts	0x02A8, r24
			bufo[7]  = 'F';
    2ee2:	80 93 a9 02 	sts	0x02A9, r24
			bufo[8]  = 'F';
    2ee6:	80 93 aa 02 	sts	0x02AA, r24
			bufo[9]  = 'F';
    2eea:	80 93 ab 02 	sts	0x02AB, r24
			bufo[10] = 'F';
    2eee:	80 93 ac 02 	sts	0x02AC, r24
			transmit();
    2ef2:	0e 94 2b 06 	call	0xc56	; 0xc56 <transmit>
			usartsnd();
    2ef6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <usartsnd>
    2efa:	0f 2e       	mov	r0, r31
    2efc:	f4 e6       	ldi	r31, 0x64	; 100
    2efe:	8f 2e       	mov	r8, r31
    2f00:	91 2c       	mov	r9, r1
    2f02:	f0 2d       	mov	r31, r0
			for (int i=0; i<100; i++)
			{
				receive();
    2f04:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <receive>
    2f08:	8f e9       	ldi	r24, 0x9F	; 159
    2f0a:	9f e0       	ldi	r25, 0x0F	; 15
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <main+0x546>
    2f10:	00 c0       	rjmp	.+0      	; 0x2f12 <main+0x54c>
    2f12:	00 00       	nop
				_delay_ms(2);
				if (rcve == 1) i = 99;
    2f14:	80 91 4a 02 	lds	r24, 0x024A
    2f18:	90 91 4b 02 	lds	r25, 0x024B
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <main+0x566>
    2f20:	91 e0       	ldi	r25, 0x01	; 1
    2f22:	89 1a       	sub	r8, r25
    2f24:	91 08       	sbc	r9, r1
			bufo[8]  = 'F';
			bufo[9]  = 'F';
			bufo[10] = 'F';
			transmit();
			usartsnd();
			for (int i=0; i<100; i++)
    2f26:	81 14       	cp	r8, r1
    2f28:	91 04       	cpc	r9, r1
    2f2a:	61 f7       	brne	.-40     	; 0x2f04 <main+0x53e>
			{
				receive();
				_delay_ms(2);
				if (rcve == 1) i = 99;
			}
			ofst = 0;
    2f2c:	10 92 45 02 	sts	0x0245, r1
    2f30:	10 92 44 02 	sts	0x0244, r1
			fcs2 = 0;
    2f34:	10 92 35 02 	sts	0x0235, r1
    2f38:	10 92 34 02 	sts	0x0234, r1
		}
		if (cnt1 > tiot[dly]) {tots = 1;	pg = 6;}							// Timeout Error
    2f3c:	20 91 b8 02 	lds	r18, 0x02B8
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	f9 01       	movw	r30, r18
    2f44:	ee 0f       	add	r30, r30
    2f46:	ff 1f       	adc	r31, r31
    2f48:	e4 59       	subi	r30, 0x94	; 148
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	40 81       	ld	r20, Z
    2f4e:	51 81       	ldd	r21, Z+1	; 0x01
    2f50:	80 91 48 02 	lds	r24, 0x0248
    2f54:	90 91 49 02 	lds	r25, 0x0249
    2f58:	48 17       	cp	r20, r24
    2f5a:	59 07       	cpc	r21, r25
    2f5c:	60 f4       	brcc	.+24     	; 0x2f76 <main+0x5b0>
    2f5e:	61 e0       	ldi	r22, 0x01	; 1
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	70 93 3d 02 	sts	0x023D, r23
    2f66:	60 93 3c 02 	sts	0x023C, r22
    2f6a:	66 e0       	ldi	r22, 0x06	; 6
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	70 93 31 02 	sts	0x0231, r23
    2f72:	60 93 30 02 	sts	0x0230, r22
		if (cnt2 > 6) {tots = 2; pg = 6;}
    2f76:	60 91 40 02 	lds	r22, 0x0240
    2f7a:	70 91 41 02 	lds	r23, 0x0241
    2f7e:	67 30       	cpi	r22, 0x07	; 7
    2f80:	71 05       	cpc	r23, r1
    2f82:	08 f4       	brcc	.+2      	; 0x2f86 <main+0x5c0>
    2f84:	57 c0       	rjmp	.+174    	; 0x3034 <main+0x66e>
    2f86:	42 e0       	ldi	r20, 0x02	; 2
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	50 93 3d 02 	sts	0x023D, r21
    2f8e:	40 93 3c 02 	sts	0x023C, r20
    2f92:	46 e0       	ldi	r20, 0x06	; 6
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	50 93 31 02 	sts	0x0231, r21
    2f9a:	40 93 30 02 	sts	0x0230, r20
    2f9e:	04 c0       	rjmp	.+8      	; 0x2fa8 <main+0x5e2>
		if (((cnt1 > tiot[dly]) || (cnt2 > 6)) == 0) tots = 0;
    2fa0:	10 92 3d 02 	sts	0x023D, r1
    2fa4:	10 92 3c 02 	sts	0x023C, r1
		redi = div(cnt1, reon[dly]);											// Resend On Command
    2fa8:	f9 01       	movw	r30, r18
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	ee 59       	subi	r30, 0x9E	; 158
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	0e 94 1f 18 	call	0x303e	; 0x303e <__divmodhi4>
    2fba:	60 93 62 02 	sts	0x0262, r22
    2fbe:	70 93 63 02 	sts	0x0263, r23
    2fc2:	80 93 64 02 	sts	0x0264, r24
    2fc6:	90 93 65 02 	sts	0x0265, r25
		if ( ((dlac != 1) && sd_err && (erak == 0)) ||
    2fca:	80 91 16 02 	lds	r24, 0x0216
    2fce:	90 91 17 02 	lds	r25, 0x0217
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	d1 f0       	breq	.+52     	; 0x300a <main+0x644>
    2fd6:	9c 9b       	sbis	0x13, 4	; 19
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <main+0x620>
    2fda:	80 91 fc 01 	lds	r24, 0x01FC
    2fde:	90 91 fd 01 	lds	r25, 0x01FD
    2fe2:	89 2b       	or	r24, r25
    2fe4:	31 f0       	breq	.+12     	; 0x2ff2 <main+0x62c>
		     ((dlac != 1) && (cnex == 1))            )							// MicroSD Error
    2fe6:	80 91 fa 01 	lds	r24, 0x01FA
    2fea:	90 91 fb 01 	lds	r25, 0x01FB
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	61 f4       	brne	.+24     	; 0x300a <main+0x644>
		{
			pg = 7;	
    2ff2:	87 e0       	ldi	r24, 0x07	; 7
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	90 93 31 02 	sts	0x0231, r25
    2ffa:	80 93 30 02 	sts	0x0230, r24
			errs = 1;					
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	90 93 ff 01 	sts	0x01FF, r25
    3006:	80 93 fe 01 	sts	0x01FE, r24
			//if (onst == 1) mehl = 1;
		}
		if (sd_err == 0) errs = 0;
    300a:	9c 99       	sbic	0x13, 4	; 19
    300c:	04 c0       	rjmp	.+8      	; 0x3016 <main+0x650>
    300e:	10 92 ff 01 	sts	0x01FF, r1
    3012:	10 92 fe 01 	sts	0x01FE, r1
		if (dsc > 9998) cnex = 1;												// MicroSD Counter Exceeded
    3016:	80 91 08 02 	lds	r24, 0x0208
    301a:	90 91 09 02 	lds	r25, 0x0209
    301e:	8f 30       	cpi	r24, 0x0F	; 15
    3020:	97 42       	sbci	r25, 0x27	; 39
    3022:	08 f4       	brcc	.+2      	; 0x3026 <main+0x660>
    3024:	31 cd       	rjmp	.-1438   	; 0x2a88 <main+0xc2>
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	90 93 fb 01 	sts	0x01FB, r25
    302e:	80 93 fa 01 	sts	0x01FA, r24
    3032:	2a cd       	rjmp	.-1452   	; 0x2a88 <main+0xc2>
			ofst = 0;
			fcs2 = 0;
		}
		if (cnt1 > tiot[dly]) {tots = 1;	pg = 6;}							// Timeout Error
		if (cnt2 > 6) {tots = 2; pg = 6;}
		if (((cnt1 > tiot[dly]) || (cnt2 > 6)) == 0) tots = 0;
    3034:	48 17       	cp	r20, r24
    3036:	59 07       	cpc	r21, r25
    3038:	08 f4       	brcc	.+2      	; 0x303c <main+0x676>
    303a:	b6 cf       	rjmp	.-148    	; 0x2fa8 <main+0x5e2>
    303c:	b1 cf       	rjmp	.-158    	; 0x2fa0 <main+0x5da>

0000303e <__divmodhi4>:
    303e:	97 fb       	bst	r25, 7
    3040:	07 2e       	mov	r0, r23
    3042:	16 f4       	brtc	.+4      	; 0x3048 <__divmodhi4+0xa>
    3044:	00 94       	com	r0
    3046:	07 d0       	rcall	.+14     	; 0x3056 <__divmodhi4_neg1>
    3048:	77 fd       	sbrc	r23, 7
    304a:	09 d0       	rcall	.+18     	; 0x305e <__divmodhi4_neg2>
    304c:	0e 94 33 18 	call	0x3066	; 0x3066 <__udivmodhi4>
    3050:	07 fc       	sbrc	r0, 7
    3052:	05 d0       	rcall	.+10     	; 0x305e <__divmodhi4_neg2>
    3054:	3e f4       	brtc	.+14     	; 0x3064 <__divmodhi4_exit>

00003056 <__divmodhi4_neg1>:
    3056:	90 95       	com	r25
    3058:	81 95       	neg	r24
    305a:	9f 4f       	sbci	r25, 0xFF	; 255
    305c:	08 95       	ret

0000305e <__divmodhi4_neg2>:
    305e:	70 95       	com	r23
    3060:	61 95       	neg	r22
    3062:	7f 4f       	sbci	r23, 0xFF	; 255

00003064 <__divmodhi4_exit>:
    3064:	08 95       	ret

00003066 <__udivmodhi4>:
    3066:	aa 1b       	sub	r26, r26
    3068:	bb 1b       	sub	r27, r27
    306a:	51 e1       	ldi	r21, 0x11	; 17
    306c:	07 c0       	rjmp	.+14     	; 0x307c <__udivmodhi4_ep>

0000306e <__udivmodhi4_loop>:
    306e:	aa 1f       	adc	r26, r26
    3070:	bb 1f       	adc	r27, r27
    3072:	a6 17       	cp	r26, r22
    3074:	b7 07       	cpc	r27, r23
    3076:	10 f0       	brcs	.+4      	; 0x307c <__udivmodhi4_ep>
    3078:	a6 1b       	sub	r26, r22
    307a:	b7 0b       	sbc	r27, r23

0000307c <__udivmodhi4_ep>:
    307c:	88 1f       	adc	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	5a 95       	dec	r21
    3082:	a9 f7       	brne	.-22     	; 0x306e <__udivmodhi4_loop>
    3084:	80 95       	com	r24
    3086:	90 95       	com	r25
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	08 95       	ret

0000308e <__itoa_ncheck>:
    308e:	bb 27       	eor	r27, r27
    3090:	4a 30       	cpi	r20, 0x0A	; 10
    3092:	31 f4       	brne	.+12     	; 0x30a0 <__itoa_ncheck+0x12>
    3094:	99 23       	and	r25, r25
    3096:	22 f4       	brpl	.+8      	; 0x30a0 <__itoa_ncheck+0x12>
    3098:	bd e2       	ldi	r27, 0x2D	; 45
    309a:	90 95       	com	r25
    309c:	81 95       	neg	r24
    309e:	9f 4f       	sbci	r25, 0xFF	; 255
    30a0:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__utoa_common>

000030a4 <__utoa_ncheck>:
    30a4:	bb 27       	eor	r27, r27

000030a6 <__utoa_common>:
    30a6:	fb 01       	movw	r30, r22
    30a8:	55 27       	eor	r21, r21
    30aa:	aa 27       	eor	r26, r26
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	aa 1f       	adc	r26, r26
    30b2:	a4 17       	cp	r26, r20
    30b4:	10 f0       	brcs	.+4      	; 0x30ba <__utoa_common+0x14>
    30b6:	a4 1b       	sub	r26, r20
    30b8:	83 95       	inc	r24
    30ba:	50 51       	subi	r21, 0x10	; 16
    30bc:	b9 f7       	brne	.-18     	; 0x30ac <__utoa_common+0x6>
    30be:	a0 5d       	subi	r26, 0xD0	; 208
    30c0:	aa 33       	cpi	r26, 0x3A	; 58
    30c2:	08 f0       	brcs	.+2      	; 0x30c6 <__utoa_common+0x20>
    30c4:	a9 5d       	subi	r26, 0xD9	; 217
    30c6:	a1 93       	st	Z+, r26
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	79 f7       	brne	.-34     	; 0x30aa <__utoa_common+0x4>
    30cc:	b1 11       	cpse	r27, r1
    30ce:	b1 93       	st	Z+, r27
    30d0:	11 92       	st	Z+, r1
    30d2:	cb 01       	movw	r24, r22
    30d4:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <strrev>

000030d8 <sprintf>:
    30d8:	ae e0       	ldi	r26, 0x0E	; 14
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e2 e7       	ldi	r30, 0x72	; 114
    30de:	f8 e1       	ldi	r31, 0x18	; 24
    30e0:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__prologue_saves__+0x1c>
    30e4:	0d 89       	ldd	r16, Y+21	; 0x15
    30e6:	1e 89       	ldd	r17, Y+22	; 0x16
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	8c 83       	std	Y+4, r24	; 0x04
    30ec:	1a 83       	std	Y+2, r17	; 0x02
    30ee:	09 83       	std	Y+1, r16	; 0x01
    30f0:	8f ef       	ldi	r24, 0xFF	; 255
    30f2:	9f e7       	ldi	r25, 0x7F	; 127
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	8d 83       	std	Y+5, r24	; 0x05
    30f8:	ae 01       	movw	r20, r28
    30fa:	47 5e       	subi	r20, 0xE7	; 231
    30fc:	5f 4f       	sbci	r21, 0xFF	; 255
    30fe:	6f 89       	ldd	r22, Y+23	; 0x17
    3100:	78 8d       	ldd	r23, Y+24	; 0x18
    3102:	ce 01       	movw	r24, r28
    3104:	01 96       	adiw	r24, 0x01	; 1
    3106:	0e 94 8e 18 	call	0x311c	; 0x311c <vfprintf>
    310a:	ef 81       	ldd	r30, Y+7	; 0x07
    310c:	f8 85       	ldd	r31, Y+8	; 0x08
    310e:	e0 0f       	add	r30, r16
    3110:	f1 1f       	adc	r31, r17
    3112:	10 82       	st	Z, r1
    3114:	2e 96       	adiw	r28, 0x0e	; 14
    3116:	e4 e0       	ldi	r30, 0x04	; 4
    3118:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__epilogue_restores__+0x1c>

0000311c <vfprintf>:
    311c:	ac e0       	ldi	r26, 0x0C	; 12
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e4 e9       	ldi	r30, 0x94	; 148
    3122:	f8 e1       	ldi	r31, 0x18	; 24
    3124:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__>
    3128:	7c 01       	movw	r14, r24
    312a:	6b 01       	movw	r12, r22
    312c:	8a 01       	movw	r16, r20
    312e:	fc 01       	movw	r30, r24
    3130:	17 82       	std	Z+7, r1	; 0x07
    3132:	16 82       	std	Z+6, r1	; 0x06
    3134:	83 81       	ldd	r24, Z+3	; 0x03
    3136:	81 ff       	sbrs	r24, 1
    3138:	bd c1       	rjmp	.+890    	; 0x34b4 <vfprintf+0x398>
    313a:	ce 01       	movw	r24, r28
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	4c 01       	movw	r8, r24
    3140:	f7 01       	movw	r30, r14
    3142:	93 81       	ldd	r25, Z+3	; 0x03
    3144:	f6 01       	movw	r30, r12
    3146:	93 fd       	sbrc	r25, 3
    3148:	85 91       	lpm	r24, Z+
    314a:	93 ff       	sbrs	r25, 3
    314c:	81 91       	ld	r24, Z+
    314e:	6f 01       	movw	r12, r30
    3150:	88 23       	and	r24, r24
    3152:	09 f4       	brne	.+2      	; 0x3156 <vfprintf+0x3a>
    3154:	ab c1       	rjmp	.+854    	; 0x34ac <vfprintf+0x390>
    3156:	85 32       	cpi	r24, 0x25	; 37
    3158:	39 f4       	brne	.+14     	; 0x3168 <vfprintf+0x4c>
    315a:	93 fd       	sbrc	r25, 3
    315c:	85 91       	lpm	r24, Z+
    315e:	93 ff       	sbrs	r25, 3
    3160:	81 91       	ld	r24, Z+
    3162:	6f 01       	movw	r12, r30
    3164:	85 32       	cpi	r24, 0x25	; 37
    3166:	29 f4       	brne	.+10     	; 0x3172 <vfprintf+0x56>
    3168:	b7 01       	movw	r22, r14
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    3170:	e7 cf       	rjmp	.-50     	; 0x3140 <vfprintf+0x24>
    3172:	51 2c       	mov	r5, r1
    3174:	31 2c       	mov	r3, r1
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	20 32       	cpi	r18, 0x20	; 32
    317a:	a0 f4       	brcc	.+40     	; 0x31a4 <vfprintf+0x88>
    317c:	8b 32       	cpi	r24, 0x2B	; 43
    317e:	69 f0       	breq	.+26     	; 0x319a <vfprintf+0x7e>
    3180:	30 f4       	brcc	.+12     	; 0x318e <vfprintf+0x72>
    3182:	80 32       	cpi	r24, 0x20	; 32
    3184:	59 f0       	breq	.+22     	; 0x319c <vfprintf+0x80>
    3186:	83 32       	cpi	r24, 0x23	; 35
    3188:	69 f4       	brne	.+26     	; 0x31a4 <vfprintf+0x88>
    318a:	20 61       	ori	r18, 0x10	; 16
    318c:	2c c0       	rjmp	.+88     	; 0x31e6 <vfprintf+0xca>
    318e:	8d 32       	cpi	r24, 0x2D	; 45
    3190:	39 f0       	breq	.+14     	; 0x31a0 <vfprintf+0x84>
    3192:	80 33       	cpi	r24, 0x30	; 48
    3194:	39 f4       	brne	.+14     	; 0x31a4 <vfprintf+0x88>
    3196:	21 60       	ori	r18, 0x01	; 1
    3198:	26 c0       	rjmp	.+76     	; 0x31e6 <vfprintf+0xca>
    319a:	22 60       	ori	r18, 0x02	; 2
    319c:	24 60       	ori	r18, 0x04	; 4
    319e:	23 c0       	rjmp	.+70     	; 0x31e6 <vfprintf+0xca>
    31a0:	28 60       	ori	r18, 0x08	; 8
    31a2:	21 c0       	rjmp	.+66     	; 0x31e6 <vfprintf+0xca>
    31a4:	27 fd       	sbrc	r18, 7
    31a6:	27 c0       	rjmp	.+78     	; 0x31f6 <vfprintf+0xda>
    31a8:	30 ed       	ldi	r19, 0xD0	; 208
    31aa:	38 0f       	add	r19, r24
    31ac:	3a 30       	cpi	r19, 0x0A	; 10
    31ae:	78 f4       	brcc	.+30     	; 0x31ce <vfprintf+0xb2>
    31b0:	26 ff       	sbrs	r18, 6
    31b2:	06 c0       	rjmp	.+12     	; 0x31c0 <vfprintf+0xa4>
    31b4:	fa e0       	ldi	r31, 0x0A	; 10
    31b6:	5f 9e       	mul	r5, r31
    31b8:	30 0d       	add	r19, r0
    31ba:	11 24       	eor	r1, r1
    31bc:	53 2e       	mov	r5, r19
    31be:	13 c0       	rjmp	.+38     	; 0x31e6 <vfprintf+0xca>
    31c0:	8a e0       	ldi	r24, 0x0A	; 10
    31c2:	38 9e       	mul	r3, r24
    31c4:	30 0d       	add	r19, r0
    31c6:	11 24       	eor	r1, r1
    31c8:	33 2e       	mov	r3, r19
    31ca:	20 62       	ori	r18, 0x20	; 32
    31cc:	0c c0       	rjmp	.+24     	; 0x31e6 <vfprintf+0xca>
    31ce:	8e 32       	cpi	r24, 0x2E	; 46
    31d0:	21 f4       	brne	.+8      	; 0x31da <vfprintf+0xbe>
    31d2:	26 fd       	sbrc	r18, 6
    31d4:	6b c1       	rjmp	.+726    	; 0x34ac <vfprintf+0x390>
    31d6:	20 64       	ori	r18, 0x40	; 64
    31d8:	06 c0       	rjmp	.+12     	; 0x31e6 <vfprintf+0xca>
    31da:	8c 36       	cpi	r24, 0x6C	; 108
    31dc:	11 f4       	brne	.+4      	; 0x31e2 <vfprintf+0xc6>
    31de:	20 68       	ori	r18, 0x80	; 128
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <vfprintf+0xca>
    31e2:	88 36       	cpi	r24, 0x68	; 104
    31e4:	41 f4       	brne	.+16     	; 0x31f6 <vfprintf+0xda>
    31e6:	f6 01       	movw	r30, r12
    31e8:	93 fd       	sbrc	r25, 3
    31ea:	85 91       	lpm	r24, Z+
    31ec:	93 ff       	sbrs	r25, 3
    31ee:	81 91       	ld	r24, Z+
    31f0:	6f 01       	movw	r12, r30
    31f2:	81 11       	cpse	r24, r1
    31f4:	c1 cf       	rjmp	.-126    	; 0x3178 <vfprintf+0x5c>
    31f6:	98 2f       	mov	r25, r24
    31f8:	9f 7d       	andi	r25, 0xDF	; 223
    31fa:	95 54       	subi	r25, 0x45	; 69
    31fc:	93 30       	cpi	r25, 0x03	; 3
    31fe:	28 f4       	brcc	.+10     	; 0x320a <vfprintf+0xee>
    3200:	0c 5f       	subi	r16, 0xFC	; 252
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	ff e3       	ldi	r31, 0x3F	; 63
    3206:	f9 83       	std	Y+1, r31	; 0x01
    3208:	0d c0       	rjmp	.+26     	; 0x3224 <vfprintf+0x108>
    320a:	83 36       	cpi	r24, 0x63	; 99
    320c:	31 f0       	breq	.+12     	; 0x321a <vfprintf+0xfe>
    320e:	83 37       	cpi	r24, 0x73	; 115
    3210:	71 f0       	breq	.+28     	; 0x322e <vfprintf+0x112>
    3212:	83 35       	cpi	r24, 0x53	; 83
    3214:	09 f0       	breq	.+2      	; 0x3218 <vfprintf+0xfc>
    3216:	5b c0       	rjmp	.+182    	; 0x32ce <vfprintf+0x1b2>
    3218:	22 c0       	rjmp	.+68     	; 0x325e <vfprintf+0x142>
    321a:	f8 01       	movw	r30, r16
    321c:	80 81       	ld	r24, Z
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	0e 5f       	subi	r16, 0xFE	; 254
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	44 24       	eor	r4, r4
    3226:	43 94       	inc	r4
    3228:	51 2c       	mov	r5, r1
    322a:	54 01       	movw	r10, r8
    322c:	15 c0       	rjmp	.+42     	; 0x3258 <vfprintf+0x13c>
    322e:	38 01       	movw	r6, r16
    3230:	f2 e0       	ldi	r31, 0x02	; 2
    3232:	6f 0e       	add	r6, r31
    3234:	71 1c       	adc	r7, r1
    3236:	f8 01       	movw	r30, r16
    3238:	a0 80       	ld	r10, Z
    323a:	b1 80       	ldd	r11, Z+1	; 0x01
    323c:	26 ff       	sbrs	r18, 6
    323e:	03 c0       	rjmp	.+6      	; 0x3246 <vfprintf+0x12a>
    3240:	65 2d       	mov	r22, r5
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	02 c0       	rjmp	.+4      	; 0x324a <vfprintf+0x12e>
    3246:	6f ef       	ldi	r22, 0xFF	; 255
    3248:	7f ef       	ldi	r23, 0xFF	; 255
    324a:	c5 01       	movw	r24, r10
    324c:	2c 87       	std	Y+12, r18	; 0x0c
    324e:	0e 94 80 1a 	call	0x3500	; 0x3500 <strnlen>
    3252:	2c 01       	movw	r4, r24
    3254:	83 01       	movw	r16, r6
    3256:	2c 85       	ldd	r18, Y+12	; 0x0c
    3258:	2f 77       	andi	r18, 0x7F	; 127
    325a:	22 2e       	mov	r2, r18
    325c:	17 c0       	rjmp	.+46     	; 0x328c <vfprintf+0x170>
    325e:	38 01       	movw	r6, r16
    3260:	f2 e0       	ldi	r31, 0x02	; 2
    3262:	6f 0e       	add	r6, r31
    3264:	71 1c       	adc	r7, r1
    3266:	f8 01       	movw	r30, r16
    3268:	a0 80       	ld	r10, Z
    326a:	b1 80       	ldd	r11, Z+1	; 0x01
    326c:	26 ff       	sbrs	r18, 6
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <vfprintf+0x15a>
    3270:	65 2d       	mov	r22, r5
    3272:	70 e0       	ldi	r23, 0x00	; 0
    3274:	02 c0       	rjmp	.+4      	; 0x327a <vfprintf+0x15e>
    3276:	6f ef       	ldi	r22, 0xFF	; 255
    3278:	7f ef       	ldi	r23, 0xFF	; 255
    327a:	c5 01       	movw	r24, r10
    327c:	2c 87       	std	Y+12, r18	; 0x0c
    327e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <strnlen_P>
    3282:	2c 01       	movw	r4, r24
    3284:	2c 85       	ldd	r18, Y+12	; 0x0c
    3286:	20 68       	ori	r18, 0x80	; 128
    3288:	22 2e       	mov	r2, r18
    328a:	83 01       	movw	r16, r6
    328c:	23 fc       	sbrc	r2, 3
    328e:	1b c0       	rjmp	.+54     	; 0x32c6 <vfprintf+0x1aa>
    3290:	83 2d       	mov	r24, r3
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	48 16       	cp	r4, r24
    3296:	59 06       	cpc	r5, r25
    3298:	b0 f4       	brcc	.+44     	; 0x32c6 <vfprintf+0x1aa>
    329a:	b7 01       	movw	r22, r14
    329c:	80 e2       	ldi	r24, 0x20	; 32
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    32a4:	3a 94       	dec	r3
    32a6:	f4 cf       	rjmp	.-24     	; 0x3290 <vfprintf+0x174>
    32a8:	f5 01       	movw	r30, r10
    32aa:	27 fc       	sbrc	r2, 7
    32ac:	85 91       	lpm	r24, Z+
    32ae:	27 fe       	sbrs	r2, 7
    32b0:	81 91       	ld	r24, Z+
    32b2:	5f 01       	movw	r10, r30
    32b4:	b7 01       	movw	r22, r14
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    32bc:	31 10       	cpse	r3, r1
    32be:	3a 94       	dec	r3
    32c0:	f1 e0       	ldi	r31, 0x01	; 1
    32c2:	4f 1a       	sub	r4, r31
    32c4:	51 08       	sbc	r5, r1
    32c6:	41 14       	cp	r4, r1
    32c8:	51 04       	cpc	r5, r1
    32ca:	71 f7       	brne	.-36     	; 0x32a8 <vfprintf+0x18c>
    32cc:	e5 c0       	rjmp	.+458    	; 0x3498 <vfprintf+0x37c>
    32ce:	84 36       	cpi	r24, 0x64	; 100
    32d0:	11 f0       	breq	.+4      	; 0x32d6 <vfprintf+0x1ba>
    32d2:	89 36       	cpi	r24, 0x69	; 105
    32d4:	39 f5       	brne	.+78     	; 0x3324 <vfprintf+0x208>
    32d6:	f8 01       	movw	r30, r16
    32d8:	27 ff       	sbrs	r18, 7
    32da:	07 c0       	rjmp	.+14     	; 0x32ea <vfprintf+0x1ce>
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	0c 5f       	subi	r16, 0xFC	; 252
    32e6:	1f 4f       	sbci	r17, 0xFF	; 255
    32e8:	08 c0       	rjmp	.+16     	; 0x32fa <vfprintf+0x1de>
    32ea:	60 81       	ld	r22, Z
    32ec:	71 81       	ldd	r23, Z+1	; 0x01
    32ee:	88 27       	eor	r24, r24
    32f0:	77 fd       	sbrc	r23, 7
    32f2:	80 95       	com	r24
    32f4:	98 2f       	mov	r25, r24
    32f6:	0e 5f       	subi	r16, 0xFE	; 254
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	2f 76       	andi	r18, 0x6F	; 111
    32fc:	b2 2e       	mov	r11, r18
    32fe:	97 ff       	sbrs	r25, 7
    3300:	09 c0       	rjmp	.+18     	; 0x3314 <vfprintf+0x1f8>
    3302:	90 95       	com	r25
    3304:	80 95       	com	r24
    3306:	70 95       	com	r23
    3308:	61 95       	neg	r22
    330a:	7f 4f       	sbci	r23, 0xFF	; 255
    330c:	8f 4f       	sbci	r24, 0xFF	; 255
    330e:	9f 4f       	sbci	r25, 0xFF	; 255
    3310:	20 68       	ori	r18, 0x80	; 128
    3312:	b2 2e       	mov	r11, r18
    3314:	2a e0       	ldi	r18, 0x0A	; 10
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	a4 01       	movw	r20, r8
    331a:	0e 94 cd 1a 	call	0x359a	; 0x359a <__ultoa_invert>
    331e:	a8 2e       	mov	r10, r24
    3320:	a8 18       	sub	r10, r8
    3322:	44 c0       	rjmp	.+136    	; 0x33ac <vfprintf+0x290>
    3324:	85 37       	cpi	r24, 0x75	; 117
    3326:	29 f4       	brne	.+10     	; 0x3332 <vfprintf+0x216>
    3328:	2f 7e       	andi	r18, 0xEF	; 239
    332a:	b2 2e       	mov	r11, r18
    332c:	2a e0       	ldi	r18, 0x0A	; 10
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	25 c0       	rjmp	.+74     	; 0x337c <vfprintf+0x260>
    3332:	f2 2f       	mov	r31, r18
    3334:	f9 7f       	andi	r31, 0xF9	; 249
    3336:	bf 2e       	mov	r11, r31
    3338:	8f 36       	cpi	r24, 0x6F	; 111
    333a:	c1 f0       	breq	.+48     	; 0x336c <vfprintf+0x250>
    333c:	18 f4       	brcc	.+6      	; 0x3344 <vfprintf+0x228>
    333e:	88 35       	cpi	r24, 0x58	; 88
    3340:	79 f0       	breq	.+30     	; 0x3360 <vfprintf+0x244>
    3342:	b4 c0       	rjmp	.+360    	; 0x34ac <vfprintf+0x390>
    3344:	80 37       	cpi	r24, 0x70	; 112
    3346:	19 f0       	breq	.+6      	; 0x334e <vfprintf+0x232>
    3348:	88 37       	cpi	r24, 0x78	; 120
    334a:	21 f0       	breq	.+8      	; 0x3354 <vfprintf+0x238>
    334c:	af c0       	rjmp	.+350    	; 0x34ac <vfprintf+0x390>
    334e:	2f 2f       	mov	r18, r31
    3350:	20 61       	ori	r18, 0x10	; 16
    3352:	b2 2e       	mov	r11, r18
    3354:	b4 fe       	sbrs	r11, 4
    3356:	0d c0       	rjmp	.+26     	; 0x3372 <vfprintf+0x256>
    3358:	8b 2d       	mov	r24, r11
    335a:	84 60       	ori	r24, 0x04	; 4
    335c:	b8 2e       	mov	r11, r24
    335e:	09 c0       	rjmp	.+18     	; 0x3372 <vfprintf+0x256>
    3360:	24 ff       	sbrs	r18, 4
    3362:	0a c0       	rjmp	.+20     	; 0x3378 <vfprintf+0x25c>
    3364:	9f 2f       	mov	r25, r31
    3366:	96 60       	ori	r25, 0x06	; 6
    3368:	b9 2e       	mov	r11, r25
    336a:	06 c0       	rjmp	.+12     	; 0x3378 <vfprintf+0x25c>
    336c:	28 e0       	ldi	r18, 0x08	; 8
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	05 c0       	rjmp	.+10     	; 0x337c <vfprintf+0x260>
    3372:	20 e1       	ldi	r18, 0x10	; 16
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vfprintf+0x260>
    3378:	20 e1       	ldi	r18, 0x10	; 16
    337a:	32 e0       	ldi	r19, 0x02	; 2
    337c:	f8 01       	movw	r30, r16
    337e:	b7 fe       	sbrs	r11, 7
    3380:	07 c0       	rjmp	.+14     	; 0x3390 <vfprintf+0x274>
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	0c 5f       	subi	r16, 0xFC	; 252
    338c:	1f 4f       	sbci	r17, 0xFF	; 255
    338e:	06 c0       	rjmp	.+12     	; 0x339c <vfprintf+0x280>
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 5f       	subi	r16, 0xFE	; 254
    339a:	1f 4f       	sbci	r17, 0xFF	; 255
    339c:	a4 01       	movw	r20, r8
    339e:	0e 94 cd 1a 	call	0x359a	; 0x359a <__ultoa_invert>
    33a2:	a8 2e       	mov	r10, r24
    33a4:	a8 18       	sub	r10, r8
    33a6:	fb 2d       	mov	r31, r11
    33a8:	ff 77       	andi	r31, 0x7F	; 127
    33aa:	bf 2e       	mov	r11, r31
    33ac:	b6 fe       	sbrs	r11, 6
    33ae:	0b c0       	rjmp	.+22     	; 0x33c6 <vfprintf+0x2aa>
    33b0:	2b 2d       	mov	r18, r11
    33b2:	2e 7f       	andi	r18, 0xFE	; 254
    33b4:	a5 14       	cp	r10, r5
    33b6:	50 f4       	brcc	.+20     	; 0x33cc <vfprintf+0x2b0>
    33b8:	b4 fe       	sbrs	r11, 4
    33ba:	0a c0       	rjmp	.+20     	; 0x33d0 <vfprintf+0x2b4>
    33bc:	b2 fc       	sbrc	r11, 2
    33be:	08 c0       	rjmp	.+16     	; 0x33d0 <vfprintf+0x2b4>
    33c0:	2b 2d       	mov	r18, r11
    33c2:	2e 7e       	andi	r18, 0xEE	; 238
    33c4:	05 c0       	rjmp	.+10     	; 0x33d0 <vfprintf+0x2b4>
    33c6:	7a 2c       	mov	r7, r10
    33c8:	2b 2d       	mov	r18, r11
    33ca:	03 c0       	rjmp	.+6      	; 0x33d2 <vfprintf+0x2b6>
    33cc:	7a 2c       	mov	r7, r10
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <vfprintf+0x2b6>
    33d0:	75 2c       	mov	r7, r5
    33d2:	24 ff       	sbrs	r18, 4
    33d4:	0d c0       	rjmp	.+26     	; 0x33f0 <vfprintf+0x2d4>
    33d6:	fe 01       	movw	r30, r28
    33d8:	ea 0d       	add	r30, r10
    33da:	f1 1d       	adc	r31, r1
    33dc:	80 81       	ld	r24, Z
    33de:	80 33       	cpi	r24, 0x30	; 48
    33e0:	11 f4       	brne	.+4      	; 0x33e6 <vfprintf+0x2ca>
    33e2:	29 7e       	andi	r18, 0xE9	; 233
    33e4:	09 c0       	rjmp	.+18     	; 0x33f8 <vfprintf+0x2dc>
    33e6:	22 ff       	sbrs	r18, 2
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <vfprintf+0x2da>
    33ea:	73 94       	inc	r7
    33ec:	73 94       	inc	r7
    33ee:	04 c0       	rjmp	.+8      	; 0x33f8 <vfprintf+0x2dc>
    33f0:	82 2f       	mov	r24, r18
    33f2:	86 78       	andi	r24, 0x86	; 134
    33f4:	09 f0       	breq	.+2      	; 0x33f8 <vfprintf+0x2dc>
    33f6:	73 94       	inc	r7
    33f8:	23 fd       	sbrc	r18, 3
    33fa:	13 c0       	rjmp	.+38     	; 0x3422 <vfprintf+0x306>
    33fc:	20 ff       	sbrs	r18, 0
    33fe:	06 c0       	rjmp	.+12     	; 0x340c <vfprintf+0x2f0>
    3400:	5a 2c       	mov	r5, r10
    3402:	73 14       	cp	r7, r3
    3404:	18 f4       	brcc	.+6      	; 0x340c <vfprintf+0x2f0>
    3406:	53 0c       	add	r5, r3
    3408:	57 18       	sub	r5, r7
    340a:	73 2c       	mov	r7, r3
    340c:	73 14       	cp	r7, r3
    340e:	68 f4       	brcc	.+26     	; 0x342a <vfprintf+0x30e>
    3410:	b7 01       	movw	r22, r14
    3412:	80 e2       	ldi	r24, 0x20	; 32
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	2c 87       	std	Y+12, r18	; 0x0c
    3418:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    341c:	73 94       	inc	r7
    341e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3420:	f5 cf       	rjmp	.-22     	; 0x340c <vfprintf+0x2f0>
    3422:	73 14       	cp	r7, r3
    3424:	10 f4       	brcc	.+4      	; 0x342a <vfprintf+0x30e>
    3426:	37 18       	sub	r3, r7
    3428:	01 c0       	rjmp	.+2      	; 0x342c <vfprintf+0x310>
    342a:	31 2c       	mov	r3, r1
    342c:	24 ff       	sbrs	r18, 4
    342e:	12 c0       	rjmp	.+36     	; 0x3454 <vfprintf+0x338>
    3430:	b7 01       	movw	r22, r14
    3432:	80 e3       	ldi	r24, 0x30	; 48
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	2c 87       	std	Y+12, r18	; 0x0c
    3438:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    343c:	2c 85       	ldd	r18, Y+12	; 0x0c
    343e:	22 ff       	sbrs	r18, 2
    3440:	17 c0       	rjmp	.+46     	; 0x3470 <vfprintf+0x354>
    3442:	21 ff       	sbrs	r18, 1
    3444:	03 c0       	rjmp	.+6      	; 0x344c <vfprintf+0x330>
    3446:	88 e5       	ldi	r24, 0x58	; 88
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <vfprintf+0x334>
    344c:	88 e7       	ldi	r24, 0x78	; 120
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	b7 01       	movw	r22, r14
    3452:	0c c0       	rjmp	.+24     	; 0x346c <vfprintf+0x350>
    3454:	82 2f       	mov	r24, r18
    3456:	86 78       	andi	r24, 0x86	; 134
    3458:	59 f0       	breq	.+22     	; 0x3470 <vfprintf+0x354>
    345a:	21 fd       	sbrc	r18, 1
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <vfprintf+0x346>
    345e:	80 e2       	ldi	r24, 0x20	; 32
    3460:	01 c0       	rjmp	.+2      	; 0x3464 <vfprintf+0x348>
    3462:	8b e2       	ldi	r24, 0x2B	; 43
    3464:	27 fd       	sbrc	r18, 7
    3466:	8d e2       	ldi	r24, 0x2D	; 45
    3468:	b7 01       	movw	r22, r14
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    3470:	a5 14       	cp	r10, r5
    3472:	38 f4       	brcc	.+14     	; 0x3482 <vfprintf+0x366>
    3474:	b7 01       	movw	r22, r14
    3476:	80 e3       	ldi	r24, 0x30	; 48
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    347e:	5a 94       	dec	r5
    3480:	f7 cf       	rjmp	.-18     	; 0x3470 <vfprintf+0x354>
    3482:	aa 94       	dec	r10
    3484:	f4 01       	movw	r30, r8
    3486:	ea 0d       	add	r30, r10
    3488:	f1 1d       	adc	r31, r1
    348a:	80 81       	ld	r24, Z
    348c:	b7 01       	movw	r22, r14
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    3494:	a1 10       	cpse	r10, r1
    3496:	f5 cf       	rjmp	.-22     	; 0x3482 <vfprintf+0x366>
    3498:	33 20       	and	r3, r3
    349a:	09 f4       	brne	.+2      	; 0x349e <vfprintf+0x382>
    349c:	51 ce       	rjmp	.-862    	; 0x3140 <vfprintf+0x24>
    349e:	b7 01       	movw	r22, r14
    34a0:	80 e2       	ldi	r24, 0x20	; 32
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <fputc>
    34a8:	3a 94       	dec	r3
    34aa:	f6 cf       	rjmp	.-20     	; 0x3498 <vfprintf+0x37c>
    34ac:	f7 01       	movw	r30, r14
    34ae:	86 81       	ldd	r24, Z+6	; 0x06
    34b0:	97 81       	ldd	r25, Z+7	; 0x07
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <vfprintf+0x39c>
    34b4:	8f ef       	ldi	r24, 0xFF	; 255
    34b6:	9f ef       	ldi	r25, 0xFF	; 255
    34b8:	2c 96       	adiw	r28, 0x0c	; 12
    34ba:	e2 e1       	ldi	r30, 0x12	; 18
    34bc:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__>

000034c0 <__eerd_byte_m16a>:
    34c0:	e1 99       	sbic	0x1c, 1	; 28
    34c2:	fe cf       	rjmp	.-4      	; 0x34c0 <__eerd_byte_m16a>
    34c4:	9f bb       	out	0x1f, r25	; 31
    34c6:	8e bb       	out	0x1e, r24	; 30
    34c8:	e0 9a       	sbi	0x1c, 0	; 28
    34ca:	99 27       	eor	r25, r25
    34cc:	8d b3       	in	r24, 0x1d	; 29
    34ce:	08 95       	ret

000034d0 <__eewr_byte_m16a>:
    34d0:	26 2f       	mov	r18, r22

000034d2 <__eewr_r18_m16a>:
    34d2:	e1 99       	sbic	0x1c, 1	; 28
    34d4:	fe cf       	rjmp	.-4      	; 0x34d2 <__eewr_r18_m16a>
    34d6:	9f bb       	out	0x1f, r25	; 31
    34d8:	8e bb       	out	0x1e, r24	; 30
    34da:	2d bb       	out	0x1d, r18	; 29
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	e2 9a       	sbi	0x1c, 2	; 28
    34e2:	e1 9a       	sbi	0x1c, 1	; 28
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	01 96       	adiw	r24, 0x01	; 1
    34e8:	08 95       	ret

000034ea <strnlen_P>:
    34ea:	fc 01       	movw	r30, r24
    34ec:	05 90       	lpm	r0, Z+
    34ee:	61 50       	subi	r22, 0x01	; 1
    34f0:	70 40       	sbci	r23, 0x00	; 0
    34f2:	01 10       	cpse	r0, r1
    34f4:	d8 f7       	brcc	.-10     	; 0x34ec <strnlen_P+0x2>
    34f6:	80 95       	com	r24
    34f8:	90 95       	com	r25
    34fa:	8e 0f       	add	r24, r30
    34fc:	9f 1f       	adc	r25, r31
    34fe:	08 95       	ret

00003500 <strnlen>:
    3500:	fc 01       	movw	r30, r24
    3502:	61 50       	subi	r22, 0x01	; 1
    3504:	70 40       	sbci	r23, 0x00	; 0
    3506:	01 90       	ld	r0, Z+
    3508:	01 10       	cpse	r0, r1
    350a:	d8 f7       	brcc	.-10     	; 0x3502 <strnlen+0x2>
    350c:	80 95       	com	r24
    350e:	90 95       	com	r25
    3510:	8e 0f       	add	r24, r30
    3512:	9f 1f       	adc	r25, r31
    3514:	08 95       	ret

00003516 <strrev>:
    3516:	dc 01       	movw	r26, r24
    3518:	fc 01       	movw	r30, r24
    351a:	67 2f       	mov	r22, r23
    351c:	71 91       	ld	r23, Z+
    351e:	77 23       	and	r23, r23
    3520:	e1 f7       	brne	.-8      	; 0x351a <strrev+0x4>
    3522:	32 97       	sbiw	r30, 0x02	; 2
    3524:	04 c0       	rjmp	.+8      	; 0x352e <strrev+0x18>
    3526:	7c 91       	ld	r23, X
    3528:	6d 93       	st	X+, r22
    352a:	70 83       	st	Z, r23
    352c:	62 91       	ld	r22, -Z
    352e:	ae 17       	cp	r26, r30
    3530:	bf 07       	cpc	r27, r31
    3532:	c8 f3       	brcs	.-14     	; 0x3526 <strrev+0x10>
    3534:	08 95       	ret

00003536 <fputc>:
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	18 2f       	mov	r17, r24
    3540:	09 2f       	mov	r16, r25
    3542:	eb 01       	movw	r28, r22
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	81 fd       	sbrc	r24, 1
    3548:	03 c0       	rjmp	.+6      	; 0x3550 <fputc+0x1a>
    354a:	8f ef       	ldi	r24, 0xFF	; 255
    354c:	9f ef       	ldi	r25, 0xFF	; 255
    354e:	20 c0       	rjmp	.+64     	; 0x3590 <fputc+0x5a>
    3550:	82 ff       	sbrs	r24, 2
    3552:	10 c0       	rjmp	.+32     	; 0x3574 <fputc+0x3e>
    3554:	4e 81       	ldd	r20, Y+6	; 0x06
    3556:	5f 81       	ldd	r21, Y+7	; 0x07
    3558:	2c 81       	ldd	r18, Y+4	; 0x04
    355a:	3d 81       	ldd	r19, Y+5	; 0x05
    355c:	42 17       	cp	r20, r18
    355e:	53 07       	cpc	r21, r19
    3560:	7c f4       	brge	.+30     	; 0x3580 <fputc+0x4a>
    3562:	e8 81       	ld	r30, Y
    3564:	f9 81       	ldd	r31, Y+1	; 0x01
    3566:	9f 01       	movw	r18, r30
    3568:	2f 5f       	subi	r18, 0xFF	; 255
    356a:	3f 4f       	sbci	r19, 0xFF	; 255
    356c:	39 83       	std	Y+1, r19	; 0x01
    356e:	28 83       	st	Y, r18
    3570:	10 83       	st	Z, r17
    3572:	06 c0       	rjmp	.+12     	; 0x3580 <fputc+0x4a>
    3574:	e8 85       	ldd	r30, Y+8	; 0x08
    3576:	f9 85       	ldd	r31, Y+9	; 0x09
    3578:	81 2f       	mov	r24, r17
    357a:	09 95       	icall
    357c:	89 2b       	or	r24, r25
    357e:	29 f7       	brne	.-54     	; 0x354a <fputc+0x14>
    3580:	2e 81       	ldd	r18, Y+6	; 0x06
    3582:	3f 81       	ldd	r19, Y+7	; 0x07
    3584:	2f 5f       	subi	r18, 0xFF	; 255
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	3f 83       	std	Y+7, r19	; 0x07
    358a:	2e 83       	std	Y+6, r18	; 0x06
    358c:	81 2f       	mov	r24, r17
    358e:	90 2f       	mov	r25, r16
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	1f 91       	pop	r17
    3596:	0f 91       	pop	r16
    3598:	08 95       	ret

0000359a <__ultoa_invert>:
    359a:	fa 01       	movw	r30, r20
    359c:	aa 27       	eor	r26, r26
    359e:	28 30       	cpi	r18, 0x08	; 8
    35a0:	51 f1       	breq	.+84     	; 0x35f6 <__ultoa_invert+0x5c>
    35a2:	20 31       	cpi	r18, 0x10	; 16
    35a4:	81 f1       	breq	.+96     	; 0x3606 <__ultoa_invert+0x6c>
    35a6:	e8 94       	clt
    35a8:	6f 93       	push	r22
    35aa:	6e 7f       	andi	r22, 0xFE	; 254
    35ac:	6e 5f       	subi	r22, 0xFE	; 254
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	8f 4f       	sbci	r24, 0xFF	; 255
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	af 4f       	sbci	r26, 0xFF	; 255
    35b6:	b1 e0       	ldi	r27, 0x01	; 1
    35b8:	3e d0       	rcall	.+124    	; 0x3636 <__ultoa_invert+0x9c>
    35ba:	b4 e0       	ldi	r27, 0x04	; 4
    35bc:	3c d0       	rcall	.+120    	; 0x3636 <__ultoa_invert+0x9c>
    35be:	67 0f       	add	r22, r23
    35c0:	78 1f       	adc	r23, r24
    35c2:	89 1f       	adc	r24, r25
    35c4:	9a 1f       	adc	r25, r26
    35c6:	a1 1d       	adc	r26, r1
    35c8:	68 0f       	add	r22, r24
    35ca:	79 1f       	adc	r23, r25
    35cc:	8a 1f       	adc	r24, r26
    35ce:	91 1d       	adc	r25, r1
    35d0:	a1 1d       	adc	r26, r1
    35d2:	6a 0f       	add	r22, r26
    35d4:	71 1d       	adc	r23, r1
    35d6:	81 1d       	adc	r24, r1
    35d8:	91 1d       	adc	r25, r1
    35da:	a1 1d       	adc	r26, r1
    35dc:	20 d0       	rcall	.+64     	; 0x361e <__ultoa_invert+0x84>
    35de:	09 f4       	brne	.+2      	; 0x35e2 <__ultoa_invert+0x48>
    35e0:	68 94       	set
    35e2:	3f 91       	pop	r19
    35e4:	2a e0       	ldi	r18, 0x0A	; 10
    35e6:	26 9f       	mul	r18, r22
    35e8:	11 24       	eor	r1, r1
    35ea:	30 19       	sub	r19, r0
    35ec:	30 5d       	subi	r19, 0xD0	; 208
    35ee:	31 93       	st	Z+, r19
    35f0:	de f6       	brtc	.-74     	; 0x35a8 <__ultoa_invert+0xe>
    35f2:	cf 01       	movw	r24, r30
    35f4:	08 95       	ret
    35f6:	46 2f       	mov	r20, r22
    35f8:	47 70       	andi	r20, 0x07	; 7
    35fa:	40 5d       	subi	r20, 0xD0	; 208
    35fc:	41 93       	st	Z+, r20
    35fe:	b3 e0       	ldi	r27, 0x03	; 3
    3600:	0f d0       	rcall	.+30     	; 0x3620 <__ultoa_invert+0x86>
    3602:	c9 f7       	brne	.-14     	; 0x35f6 <__ultoa_invert+0x5c>
    3604:	f6 cf       	rjmp	.-20     	; 0x35f2 <__ultoa_invert+0x58>
    3606:	46 2f       	mov	r20, r22
    3608:	4f 70       	andi	r20, 0x0F	; 15
    360a:	40 5d       	subi	r20, 0xD0	; 208
    360c:	4a 33       	cpi	r20, 0x3A	; 58
    360e:	18 f0       	brcs	.+6      	; 0x3616 <__ultoa_invert+0x7c>
    3610:	49 5d       	subi	r20, 0xD9	; 217
    3612:	31 fd       	sbrc	r19, 1
    3614:	40 52       	subi	r20, 0x20	; 32
    3616:	41 93       	st	Z+, r20
    3618:	02 d0       	rcall	.+4      	; 0x361e <__ultoa_invert+0x84>
    361a:	a9 f7       	brne	.-22     	; 0x3606 <__ultoa_invert+0x6c>
    361c:	ea cf       	rjmp	.-44     	; 0x35f2 <__ultoa_invert+0x58>
    361e:	b4 e0       	ldi	r27, 0x04	; 4
    3620:	a6 95       	lsr	r26
    3622:	97 95       	ror	r25
    3624:	87 95       	ror	r24
    3626:	77 95       	ror	r23
    3628:	67 95       	ror	r22
    362a:	ba 95       	dec	r27
    362c:	c9 f7       	brne	.-14     	; 0x3620 <__ultoa_invert+0x86>
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	61 05       	cpc	r22, r1
    3632:	71 05       	cpc	r23, r1
    3634:	08 95       	ret
    3636:	9b 01       	movw	r18, r22
    3638:	ac 01       	movw	r20, r24
    363a:	0a 2e       	mov	r0, r26
    363c:	06 94       	lsr	r0
    363e:	57 95       	ror	r21
    3640:	47 95       	ror	r20
    3642:	37 95       	ror	r19
    3644:	27 95       	ror	r18
    3646:	ba 95       	dec	r27
    3648:	c9 f7       	brne	.-14     	; 0x363c <__ultoa_invert+0xa2>
    364a:	62 0f       	add	r22, r18
    364c:	73 1f       	adc	r23, r19
    364e:	84 1f       	adc	r24, r20
    3650:	95 1f       	adc	r25, r21
    3652:	a0 1d       	adc	r26, r0
    3654:	08 95       	ret

00003656 <__prologue_saves__>:
    3656:	2f 92       	push	r2
    3658:	3f 92       	push	r3
    365a:	4f 92       	push	r4
    365c:	5f 92       	push	r5
    365e:	6f 92       	push	r6
    3660:	7f 92       	push	r7
    3662:	8f 92       	push	r8
    3664:	9f 92       	push	r9
    3666:	af 92       	push	r10
    3668:	bf 92       	push	r11
    366a:	cf 92       	push	r12
    366c:	df 92       	push	r13
    366e:	ef 92       	push	r14
    3670:	ff 92       	push	r15
    3672:	0f 93       	push	r16
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	ca 1b       	sub	r28, r26
    3680:	db 0b       	sbc	r29, r27
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	09 94       	ijmp

0000368e <__epilogue_restores__>:
    368e:	2a 88       	ldd	r2, Y+18	; 0x12
    3690:	39 88       	ldd	r3, Y+17	; 0x11
    3692:	48 88       	ldd	r4, Y+16	; 0x10
    3694:	5f 84       	ldd	r5, Y+15	; 0x0f
    3696:	6e 84       	ldd	r6, Y+14	; 0x0e
    3698:	7d 84       	ldd	r7, Y+13	; 0x0d
    369a:	8c 84       	ldd	r8, Y+12	; 0x0c
    369c:	9b 84       	ldd	r9, Y+11	; 0x0b
    369e:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a0:	b9 84       	ldd	r11, Y+9	; 0x09
    36a2:	c8 84       	ldd	r12, Y+8	; 0x08
    36a4:	df 80       	ldd	r13, Y+7	; 0x07
    36a6:	ee 80       	ldd	r14, Y+6	; 0x06
    36a8:	fd 80       	ldd	r15, Y+5	; 0x05
    36aa:	0c 81       	ldd	r16, Y+4	; 0x04
    36ac:	1b 81       	ldd	r17, Y+3	; 0x03
    36ae:	aa 81       	ldd	r26, Y+2	; 0x02
    36b0:	b9 81       	ldd	r27, Y+1	; 0x01
    36b2:	ce 0f       	add	r28, r30
    36b4:	d1 1d       	adc	r29, r1
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	ed 01       	movw	r28, r26
    36c2:	08 95       	ret

000036c4 <_exit>:
    36c4:	f8 94       	cli

000036c6 <__stop_program>:
    36c6:	ff cf       	rjmp	.-2      	; 0x36c6 <__stop_program>
